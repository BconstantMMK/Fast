C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.13 (r6666M) - 28 May 2018 09:28
C
C  Differentiation of fluroe_lamin_o3_2d in forward (tangent) mode:
C   variations   of useful results: drodm
C   with respect to varying inputs: rop
C   RW status of diff variables: rop:in drodm:out
C
C
C
C
C
C
C
C
C
C
C
C***********************************************************************
C     $Date: 2013-08-26 16:00:23 +0200 (lun. 26 ao√ªt 2013) $
C     $Revision: 64 $
C     $Author: IvanMary $
C***********************************************************************
      SUBROUTINE FLUROE_LAMIN_O3_2D_D(ndom, ithread, param_int, 
     +                                param_real, ind_dm, ind_loop, 
     +                                ijkv_bloc, ijkv_cache, 
     +                                synchro_send_sock, synchro_send_th
     +                                , synchro_receive_sock, 
     +                                synchro_receive_th, ibloc, jbloc, 
     +                                kbloc, icache, jcache, kcache, rop
     +                                , ropd, drodm, drodmd, wig, venti
     +                                , ventj, ventk, ti, tj, tk, vol, 
     +                                xmut)
      IMPLICIT NONE
C
Climiteur 'minmod'
C
C
Cdo k
C
      REAL souszero
      PARAMETER (souszero=-1e-12)
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
      INTEGER*4 ndom, ithread, nptpsi, icache, jcache, kcache, ibloc, 
     +          jbloc, kbloc, ijkv_bloc(3), ijkv_cache(3), ind_loop(6), 
     +          ind_dm(6), synchro_send_sock(3), synchro_send_th(3), 
     +          synchro_receive_sock(3), synchro_receive_th(3), 
     +          param_int(0:*)
C
      REAL*8 xmut(param_int(41))
      REAL*8 rop(param_int(41)*param_int(36))
      REAL*8 ropd(param_int(41)*param_int(36))
      REAL*8 drodm(param_int(41)*param_int(36))
      REAL*8 drodmd(param_int(41)*param_int(36))
      REAL*8 wig(param_int(41)*3)
      REAL*8 venti(param_int(44)*param_int(40))
      REAL*8 ventj(param_int(44)*param_int(40))
      REAL*8 ventk(param_int(44)*param_int(40))
C
      REAL*8 ti(param_int(43)*param_int(37)), tj(param_int(43)*param_int
     +       (37)), tk(param_int(43)*param_int(38))
      REAL*8 vol(param_int(43))
C
      REAL*8 param_real(0:*)
C
C Var loc
      INTEGER*4 inc, incmax, l, lt, i, j, k, incmax2, nm, nm2, np, l0, 
     +          lt0, inci, incj, inck, ci, cj, lij, ltij, inci_mtr, 
     +          incj_mtr, inck_mtr, icorr, jcorr, ls, v1, v2, v3, v4, v5
     +          , v6, wig_i, wig_j, wig_k, lt200, lt100, lt010, lt210, 
     +          lt020, lt110, lt002, lt012, lt102, lt001, lt021, lt201, 
     +          lt120, lvo, lvo200, lvo020, lvo002, vslp, lvol, lvor, ir
     +          , il, l200, l100, l010, l020, l110, l101, l011, v1mtr, 
     +          v2mtr, v3mtr, l001, l002, l210, l220, l201, l202, l021, 
     +          l022, l120, l102, l012
C
      REAL*8 c1, c2, c3, c4, c5, c6, c4sa, c5sa, c6sa, si, sj, sk, qm, 
     +       qp, tcx, tcy, tcz, tc, r1, h1, rou1, rov1, row1, r2, h2, 
     +       rou2, rov2, row2, gam, gam1, gam2, gam3, gam4, qn1, qn2, u
     +       , tdu, p1p2, roref, uref, tam, tam1, qm1, qm2, qm3, qm4, 
     +       qm5, qm6, qp1, qp2, qp3, qp4, qp5, qp6, mut1, mut2, flu1, 
     +       flu2, flu3, flu4, flu5, flu6, p1, p2, qen, sigma_1, ck_vent
     +       , div, f1, f2, f3, f4, f5, f6, fv, fv5, volinv, test
      REAL*8 cmus1, temp01, coesut, tix, tiy, tiz, tix1, tiy1, tiz1, tjx
     +       , tjy, tjz, tjx1, tjy1, tjz1, tkx, tky, tkz, tkx1, tky1, 
     +       tkz1, xmutvol, cvisq, rgp, son, c, gradu_nx, gradu_ny, 
     +       gradu_nz, gradv_nx, gradv_ny, gradv_nz, gradw_nx, gradw_ny
     +       , gradw_nz, gradt_nx, gradt_ny, gradt_nz, delp, delm, delq
     +       , slq, slp, roff, tmin_1, du, dv, dw, dp, dqn, s_1, nx, ny
     +       , nz, qn, r, v, w, h, q, r_1, psiroe, xktvol, xmulam, 
     +       xmutur, xmutot
      REAL*8 qmd, qpd, r1d, h1d, rou1d, r2d, h2d, rou2d, qn1d, qn2d, ud
     +       , p1p2d, qm1d, qm2d, qm3d, qm5d, qp1d, qp2d, qp3d, qp5d, 
     +       flu1d, flu2d, flu3d, flu5d, p1d, p2d, divd, f1d, f2d, f3d, 
     +       f4d, f5d, f6d, fvd, fv5d, cd, gradu_nxd, gradu_nyd, 
     +       gradv_nxd, gradv_nyd, gradt_nxd, gradt_nyd, dud, dvd, dpd, 
     +       dqnd, qnd, rd, vd, hd, qd, r_1d
C
C    adresse point courant pour tableau de la taille d'un domaine 
      INTEGER*4 inddm, i_1, j_1, k_1
C    adresse interface pour tableau metric
      INTEGER*4 indmtr, i_3, j_3, k_3
      INTRINSIC ABS
      INTRINSIC SQRT
      INTRINSIC MAX
      INTRINSIC SIGN
      REAL*8 abs0
      REAL*8 abs0d
      REAL*8 max1
      REAL*8 abs1
      REAL*8 abs1d
      REAL*8 abs2
      REAL*8 abs3
      REAL*8 abs3d
      REAL*8 abs4
      REAL*8 abs5
      REAL*8 abs5d
      REAL*8 abs6
      REAL*8 abs7
      REAL*8 abs7d
      REAL*8 abs8
      REAL*8 abs8d
      REAL*8 max2
      REAL*8 abs9
      REAL*8 abs9d
      REAL*8 abs10
      REAL*8 abs11
      REAL*8 abs11d
      REAL*8 abs12
      REAL*8 abs13
      REAL*8 abs13d
      REAL*8 abs14
      REAL*8 abs15
      REAL*8 abs15d
      REAL*8 abs16
      REAL*8 abs16d
      REAL*8 max3
      REAL*8 abs17
      REAL*8 abs17d
      REAL*8 abs18
      REAL*8 abs19
      REAL*8 abs19d
      REAL*8 abs20
      REAL*8 abs21
      REAL*8 abs21d
      REAL*8 abs22
      REAL*8 abs23
      REAL*8 abs23d
      REAL*8 abs24
      REAL*8 abs24d
      REAL*8 max4
      REAL*8 abs25
      REAL*8 abs25d
      REAL*8 abs26
      REAL*8 abs27
      REAL*8 abs27d
      REAL*8 abs28
      REAL*8 abs29
      REAL*8 abs29d
      REAL*8 abs30
      REAL*8 abs31
      REAL*8 abs31d
      REAL*8 arg1
      INTEGER ii1
C
C
CC!DIR$ ASSUME_ALIGNED xmut: 32
C
      IF (ind_loop(1) .GT. ind_loop(2)) THEN
        RETURN
      ELSE IF (ind_loop(3) .GT. ind_loop(4)) THEN
        RETURN
      ELSE IF (ind_loop(5) .GT. ind_loop(6)) THEN
        RETURN
      ELSE
C
        inci = 1
        incj = param_int(0)
        inck = param_int(0)*param_int(0+1)
C
        inci_mtr = param_int(5)
        incj_mtr = param_int(5+1)
Cmetric
        inck_mtr = param_int(5+2)
C
        lt = 1 + (1+param_int(5+3)-1)*param_int(5) + (1+param_int(5+3)-1
     +    )*param_int(5+1) + (1+param_int(5+4)-1)*param_int(5+2)
        lvo = lt
        tcx = ti(lt)
        tcy = tj(lt)
        IF (tcx .GE. 0.) THEN
          si = tcx
        ELSE
          si = -tcx
        END IF
        IF (tcy .GE. 0.) THEN
          sj = tcy
        ELSE
          sj = -tcy
        END IF
C-----Variables physiques
        volinv = 0.5/vol(lvo)
C
        gam = param_real(1)
CCv(gama-1)= R (gas parfait)
        rgp = param_real(2)*(gam-1.)
        gam1 = gam/(gam-1.)
        gam2 = 1./gam
        gam3 = gam1/param_real(10)*rgp
        gam4 = gam1/param_real(38)*rgp
C
        cmus1 = param_real(13)
        temp01 = 1./param_real(12)
        coesut = param_real(11)*(1.+cmus1*temp01)
        sigma_1 = 1./(2./3.)
C
        roref = param_real(3)
        uref = param_real(5)
C
        psiroe = param_real(34)
C!si T< 0.01Tinf, alors limiteur null
        tmin_1 = 100./param_real(6)
C
C modif suite chant metrique et suppression tc dans flux final
        c1 = 0.02*uref
C modif suite chant metrique et suppression tc dans flux final
        c2 = 0.02/(uref*roref)
C    roff MUSCL
        c3 = -2.
C
        c6 = 1./6.
        c4 = 5.*c6
        c5 = 2.*c6
        c6 = -(1.*c6)
C
C      c7     = c4/c5
C
        cvisq = 1./3
C
Ccorrection indice boucle i pour traiter l'interface ind_loop(2)+1 si necessaire
        icorr = 0
        jcorr = 0
        IF (ibloc .EQ. ijkv_bloc(1) .AND. synchro_receive_sock(1) .EQ. 0
     +      .AND. icache .EQ. ijkv_cache(1) .AND. synchro_receive_th(1) 
     +      .EQ. 0) icorr = 1
        IF (jbloc .EQ. ijkv_bloc(2) .AND. synchro_receive_sock(2) .EQ. 0
     +      .AND. jcache .EQ. ijkv_cache(2) .AND. synchro_receive_th(2) 
     +      .EQ. 0) jcorr = 1
C
        v1 = 0
        v2 = param_int(41)
        v3 = 2*param_int(41)
        v4 = 3*param_int(41)
        v5 = 4*param_int(41)
        v6 = 5*param_int(41)
C
        v1mtr = 0
        v2mtr = param_int(43)
        v3mtr = 2*param_int(43)
C
        wig_i = v1
        wig_j = v2
        wig_k = v3
C
C
C
CC!DIR$ ASSUME (mod(inck,   4) .eq. 0)
CC!DIR$ ASSUME (mod(incj,   4) .eq. 0)
CC!DIR$ ASSUME (mod(param_int(41), 4) .eq. 0)
C
        DO k=ind_loop(5),ind_loop(6)
          DO j=ind_loop(3),ind_loop(4)
C
C
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1) - 1
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
            DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
              lt = l - ltij
              lvo = lt
              l0 = l - incj
C.....Metrique
              tcx = tj(lt+v1mtr)
              tcy = tj(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              sj = SQRT(arg1)
C
              nm = l - incj
              nm2 = l - 2*incj
              np = l + incj
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              vslp = v1
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm1d = qmd
              qm1 = qm
              qp1d = qpd
              qp1 = qp
C
C qm: right state,  qp: left state
              vslp = v2
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm2d = qmd
              qm2 = qm
              qp2d = qpd
              qp2 = qp
C
C qm: right state,  qp: left state
              vslp = v3
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm3d = qmd
              qm3 = qm
              qp3d = qpd
              qp3 = qp
C
C
C qm: right state,  qp: left state
              vslp = v5
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm5d = qmd
              qm5 = qm
              qp5d = qpd
              qp5 = qp
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +          qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C
Cdetermination etat moyenne roe
              IF (r1 .EQ. 0.0) THEN
                qp1d = 0.D0
              ELSE
                qp1d = r1d/(2.0*SQRT(r1))
              END IF
              qp1 = SQRT(r1)
              IF (r2 .EQ. 0.0) THEN
                qm1d = 0.D0
              ELSE
                qm1d = r2d/(2.0*SQRT(r2))
              END IF
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +          h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)
              IF (h - q .GE. 0.) THEN
                abs0d = hd - qd
                abs0 = h - q
              ELSE
                abs0d = -(hd-qd)
                abs0 = -(h-q)
              END IF
              IF ((gam-1.)*abs0 .EQ. 0.0) THEN
                cd = 0.D0
              ELSE
                cd = (gam-1.)*abs0d/(2.0*SQRT((gam-1.)*abs0))
              END IF
              c = SQRT((gam-1.)*abs0)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = sj*(qm2d-qp2d)
              du = (qm2-qp2)*sj
              dvd = sj*(qm3d-qp3d)
              dv = (qm3-qp3)*sj
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
              IF (sj .LT. 1.e-30) THEN
                max1 = 1.e-30
              ELSE
                max1 = sj
              END IF
C
C.....Evaluation des valeurs propres
              s_1 = 1./max1
              nx = tcx*s_1
              ny = tcy*s_1
C
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C
              f1d = qnd
              f1 = qn
              IF (f1 .GE. 0.) THEN
                abs1d = f1d
                abs1 = f1
              ELSE
                abs1d = -f1d
                abs1 = -f1
              END IF
Cdelta
              f4d = psiroe*(abs1d+cd)
              f4 = psiroe*(abs1+c)
              IF (f1 .GE. 0.) THEN
                abs2 = f1
              ELSE
                abs2 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs2 - f4)
              IF (f1 .GE. 0.) THEN
                abs3d = f1d
                abs3 = f1
              ELSE
                abs3d = -f1d
                abs3 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs3d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs3
C  a123*S
              f1d = sj*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*sj
C
              flu1d = f3d*f1 + f3*f1d
              flu1 = f3*f1
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu2 = f3*(f1*u+r*(du-nx*dqn))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu3 = f3*(f1*v+r*(dv-ny*dqn))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
              flu5 = f3*(f1*q+r*(u*du+v*dv-qn*dqn))
C
              f1d = qnd + cd
              f1 = qn + c
              IF (f1 .GE. 0.) THEN
                abs4 = f1
              ELSE
                abs4 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs4 - f4)
              IF (f1 .GE. 0.) THEN
                abs5d = f1d
                abs5 = f1
              ELSE
                abs5d = -f1d
                abs5 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs5d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs5
Clambda4*S*a4
              f1d = sj*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*f3*sj
C
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu2 = flu2 + f1*(u+nx*c)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu3 = flu3 + f1*(v+ny*c)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
              flu5 = flu5 + f1*(h+qn*c)
C
              f1d = qnd - cd
              f1 = qn - c
              IF (f1 .GE. 0.) THEN
                abs6 = f1
              ELSE
                abs6 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs6 - f4)
              IF (f1 .GE. 0.) THEN
                abs7d = f1d
                abs7 = f1
              ELSE
                abs7d = -f1d
                abs7 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs7d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs7
Clambda5*S*a5
              f1d = sj*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*sj
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu2 = flu2 + f1*(u-nx*c)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu3 = flu3 + f1*(v-ny*c)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
              flu5 = flu5 + f1*(h-qn*c)
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
              p1p2 = p1 + p2
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu1 = (flu1+rou1+rou2)*0.5
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu2 = (flu2+rou1*qp2+rou2*qm2+tcx*p1p2)*0.5
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu3 = (flu3+rou1*qp3+rou2*qm3+tcy*p1p2)*0.5
              flu4 = 0.
C1=?+1; 
C3=?+2 
C2=?-1
C4=?-2
Cl341  = (i+2,j-2,k+1)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
              flu5 = (flu5+rou1*h1+rou2*h2)*0.5
C
              lt100 = lt + inci_mtr
              lt010 = lt + incj_mtr
              lt020 = lt - incj_mtr
              lt120 = lt + inci_mtr - incj_mtr
C
              lvor = lt
              lvol = lt020
C
              il = l - incj
              ir = l
              l220 = l - inci - incj
              l200 = l - inci
              l120 = l + inci - incj
CCalcul des vecteurs surfaces J
              l100 = l + inci
CCCCCC
CCCCCC
CCCCCC   Facette J
CCCCCC
CCCCCC
              tix = .5*(tj(lt+v1mtr)+tj(lt020+v1mtr))
              tiy = .5*(tj(lt+v2mtr)+tj(lt020+v2mtr))
              tix1 = .5*(tj(lt+v1mtr)+tj(lt010+v1mtr))
              tiy1 = .5*(tj(lt+v2mtr)+tj(lt010+v2mtr))
C
C(i,j,k) et (i,j-1,k)
              tkx = .125*(ti(lt+v1mtr)+ti(lt020+v1mtr))
              tky = .125*(ti(lt+v2mtr)+ti(lt020+v2mtr))
C(i+1,j,k) et (i+1,j-1,k)
              tkx1 = .125*(ti(lt100+v1mtr)+ti(lt120+v1mtr))
C --- Gradients en U_j (i,j,k), (i,j-1,k), (i,j-1,k-1), (i,j,k-1)
              tky1 = .125*(ti(lt100+v2mtr)+ti(lt120+v2mtr))
C
              f1d = ropd(il+v2)
              f1 = rop(il+v2)
              f2d = ropd(ir+v2)
              f2 = rop(ir+v2)
              f5d = ropd(ir+v2) + ropd(il+v2) + ropd(l220+v2) + ropd(
     +          l200+v2)
              f5 = rop(ir+v2) + rop(il+v2) + rop(l220+v2) + rop(l200+v2)
              f6d = ropd(ir+v2) + ropd(il+v2) + ropd(l120+v2) + ropd(
     +          l100+v2)
              f6 = rop(ir+v2) + rop(il+v2) + rop(l120+v2) + rop(l100+v2)
C
              gradu_nxd = tix1*f2d - tix*f1d + tkx1*f6d - tkx*f5d
              gradu_nx = f2*tix1 - f1*tix + (f6*tkx1-f5*tkx)
C --- Gradients en V_j
              gradu_nyd = tiy1*f2d - tiy*f1d + tky1*f6d - tky*f5d
              gradu_ny = f2*tiy1 - f1*tiy + (f6*tky1-f5*tky)
C
              f1d = ropd(il+v3)
              f1 = rop(il+v3)
              f2d = ropd(ir+v3)
              f2 = rop(ir+v3)
              f5d = ropd(ir+v3) + ropd(il+v3) + ropd(l220+v3) + ropd(
     +          l200+v3)
              f5 = rop(ir+v3) + rop(il+v3) + rop(l220+v3) + rop(l200+v3)
              f6d = ropd(ir+v3) + ropd(il+v3) + ropd(l120+v3) + ropd(
     +          l100+v3)
              f6 = rop(ir+v3) + rop(il+v3) + rop(l120+v3) + rop(l100+v3)
C
              gradv_nxd = tix1*f2d - tix*f1d + tkx1*f6d - tkx*f5d
              gradv_nx = f2*tix1 - f1*tix + (f6*tkx1-f5*tkx)
C --- Gradients en T_j
              gradv_nyd = tiy1*f2d - tiy*f1d + tky1*f6d - tky*f5d
              gradv_ny = f2*tiy1 - f1*tiy + (f6*tky1-f5*tky)
C
              f1d = ropd(il+v5)
              f1 = rop(il+v5)
              f2d = ropd(ir+v5)
              f2 = rop(ir+v5)
              f5d = ropd(ir+v5) + ropd(il+v5) + ropd(l220+v5) + ropd(
     +          l200+v5)
              f5 = rop(ir+v5) + rop(il+v5) + rop(l220+v5) + rop(l200+v5)
              f6d = ropd(ir+v5) + ropd(il+v5) + ropd(l120+v5) + ropd(
     +          l100+v5)
              f6 = rop(ir+v5) + rop(il+v5) + rop(l120+v5) + rop(l100+v5)
C
              gradt_nxd = tix1*f2d - tix*f1d + tkx1*f6d - tkx*f5d
              gradt_nx = f2*tix1 - f1*tix + (f6*tkx1-f5*tkx)
C--- assemblage flux
              gradt_nyd = tiy1*f2d - tiy*f1d + tky1*f6d - tky*f5d
              gradt_ny = f2*tiy1 - f1*tiy + (f6*tky1-f5*tky)
C
              divd = cvisq*(gradu_nxd+gradv_nyd)
              div = (gradu_nx+gradv_ny)*cvisq
              f1d = gradu_nxd - divd
              f1 = gradu_nx - div
              f2d = gradu_nyd + gradv_nxd
              f2 = gradu_ny + gradv_nx
              f4d = gradv_nyd - divd
              f4 = gradv_ny - div
C
              volinv = 1./(vol(lvor)+vol(lvol))
              xmutvol = (xmut(ir)+xmut(il))*volinv
              xktvol = xmutvol*gam3
C
              fvd = -(xmutvol*(2.*tcx*f1d+tcy*f2d))
              fv = -((2.*f1*tcx+f2*tcy)*xmutvol)
              fv5d = fvd*(rop(ir+v2)+rop(il+v2)) + fv*(ropd(ir+v2)+ropd(
     +          il+v2))
              fv5 = fv*(rop(ir+v2)+rop(il+v2))
              flu2d = flu2d + fvd
              flu2 = flu2 + fv
C
              fvd = -(xmutvol*(tcx*f2d+2.*tcy*f4d))
              fv = -((f2*tcx+2.*f4*tcy)*xmutvol)
              fv5d = fv5d + fvd*(rop(ir+v3)+rop(il+v3)) + fv*(ropd(ir+v3
     +          )+ropd(il+v3))
              fv5 = fv5 + fv*(rop(ir+v3)+rop(il+v3))
              flu3d = flu3d + fvd
              flu3 = flu3 + fv
C
              fvd = 0.5*fv5d - xktvol*(tcx*gradt_nxd+tcy*gradt_nyd)
              fv = fv5*0.5 - (gradt_nx*tcx+gradt_ny*tcy)*xktvol
              flu5d = flu5d + fvd
              flu5 = flu5 + fv
              drodmd(l+v1) = drodmd(l+v1) + flu1d
              drodmd(l0+v1) = drodmd(l0+v1) - flu1d
              drodmd(l+v2) = drodmd(l+v2) + flu2d
              drodmd(l0+v2) = drodmd(l0+v2) - flu2d
              drodmd(l+v3) = drodmd(l+v3) + flu3d
              drodmd(l0+v3) = drodmd(l0+v3) - flu3d
              drodmd(l+v5) = drodmd(l+v5) + flu5d
              drodmd(l0+v5) = drodmd(l0+v5) - flu5d
            ENDDO
C
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1) - 1
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
            DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
              lt = l - ltij
              lvo = lt
              l0 = l - inci
C.....Metrique
              tcx = ti(lt+v1mtr)
              tcy = ti(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              si = SQRT(arg1)
C
              nm = l - inci
              nm2 = l - 2*inci
              np = l + inci
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              vslp = v1
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm1d = qmd
              qm1 = qm
              qp1d = qpd
              qp1 = qp
C
C qm: right state,  qp: left state
              vslp = v2
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm2d = qmd
              qm2 = qm
              qp2d = qpd
              qp2 = qp
C
C qm: right state,  qp: left state
              vslp = v3
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm3d = qmd
              qm3 = qm
              qp3d = qpd
              qp3 = qp
C
C
C qm: right state,  qp: left state
              vslp = v5
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm5d = qmd
              qm5 = qm
              qp5d = qpd
              qp5 = qp
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +          qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C
Cdetermination etat moyenne roe
              IF (r1 .EQ. 0.0) THEN
                qp1d = 0.D0
              ELSE
                qp1d = r1d/(2.0*SQRT(r1))
              END IF
              qp1 = SQRT(r1)
              IF (r2 .EQ. 0.0) THEN
                qm1d = 0.D0
              ELSE
                qm1d = r2d/(2.0*SQRT(r2))
              END IF
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +          h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)
              IF (h - q .GE. 0.) THEN
                abs8d = hd - qd
                abs8 = h - q
              ELSE
                abs8d = -(hd-qd)
                abs8 = -(h-q)
              END IF
              IF ((gam-1.)*abs8 .EQ. 0.0) THEN
                cd = 0.D0
              ELSE
                cd = (gam-1.)*abs8d/(2.0*SQRT((gam-1.)*abs8))
              END IF
              c = SQRT((gam-1.)*abs8)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = si*(qm2d-qp2d)
              du = (qm2-qp2)*si
              dvd = si*(qm3d-qp3d)
              dv = (qm3-qp3)*si
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
              IF (si .LT. 1.e-30) THEN
                max2 = 1.e-30
              ELSE
                max2 = si
              END IF
C
C.....Evaluation des valeurs propres
              s_1 = 1./max2
              nx = tcx*s_1
              ny = tcy*s_1
C
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C
              f1d = qnd
              f1 = qn
              IF (f1 .GE. 0.) THEN
                abs9d = f1d
                abs9 = f1
              ELSE
                abs9d = -f1d
                abs9 = -f1
              END IF
Cdelta
              f4d = psiroe*(abs9d+cd)
              f4 = psiroe*(abs9+c)
              IF (f1 .GE. 0.) THEN
                abs10 = f1
              ELSE
                abs10 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs10 - f4)
              IF (f1 .GE. 0.) THEN
                abs11d = f1d
                abs11 = f1
              ELSE
                abs11d = -f1d
                abs11 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs11d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs11
C  a123
              f1d = si*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*si
C
              flu1d = f3d*f1 + f3*f1d
              flu1 = f3*f1
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu2 = f3*(f1*u+r*(du-nx*dqn))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu3 = f3*(f1*v+r*(dv-ny*dqn))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
              flu5 = f3*(f1*q+r*(u*du+v*dv-qn*dqn))
C
              f1d = qnd + cd
              f1 = qn + c
              IF (f1 .GE. 0.) THEN
                abs12 = f1
              ELSE
                abs12 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs12 - f4)
              IF (f1 .GE. 0.) THEN
                abs13d = f1d
                abs13 = f1
              ELSE
                abs13d = -f1d
                abs13 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs13d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs13
Clambda4*S*a4
              f1d = si*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*si*f3
C
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu2 = flu2 + f1*(u+nx*c)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu3 = flu3 + f1*(v+ny*c)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
              flu5 = flu5 + f1*(h+qn*c)
C
              f1d = qnd - cd
              f1 = qn - c
              IF (f1 .GE. 0.) THEN
                abs14 = f1
              ELSE
                abs14 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs14 - f4)
              IF (f1 .GE. 0.) THEN
                abs15d = f1d
                abs15 = f1
              ELSE
                abs15d = -f1d
                abs15 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs15d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs15
Clambda5*S*a5
              f1d = si*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*si
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu2 = flu2 + f1*(u-nx*c)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu3 = flu3 + f1*(v-ny*c)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
              flu5 = flu5 + f1*(h-qn*c)
C
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
              p1p2 = p1 + p2
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu1 = (flu1+rou1+rou2)*0.5
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu2 = (flu2+rou1*qp2+rou2*qm2+tcx*p1p2)*0.5
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu3 = (flu3+rou1*qp3+rou2*qm3+tcy*p1p2)*0.5
              flu4 = 0.
C1=?+1; 
C3=?+2 
C2=?-1
C4=?-2
Cl341  = (i+2,j-2,k+1)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
              flu5 = (flu5+rou1*h1+rou2*h2)*0.5
C
              lt200 = lt - inci_mtr
              lt100 = lt + inci_mtr
              lt010 = lt + incj_mtr
              lt210 = lt - inci_mtr + incj_mtr
C
              lvor = lt
              lvol = lt200
C
              il = l - inci
              ir = l
              l220 = l - inci - incj
              l020 = l - incj
              l210 = l - inci + incj
CCalcul des vecteurs surfaces I
              l010 = l + incj
C
CCCCCC
CCCCCC
CCCCCC   Facette I
CCCCCC
CCCCCC
              tix = .5*(ti(lt+v1mtr)+ti(lt200+v1mtr))
              tiy = .5*(ti(lt+v2mtr)+ti(lt200+v2mtr))
              tix1 = .5*(ti(lt+v1mtr)+ti(lt100+v1mtr))
              tiy1 = .5*(ti(lt+v2mtr)+ti(lt100+v2mtr))
C
              tjx = .125*(tj(lt+v1mtr)+tj(lt200+v1mtr))
              tjy = .125*(tj(lt+v2mtr)+tj(lt200+v2mtr))
              tjx1 = .125*(tj(lt010+v1mtr)+tj(lt210+v1mtr))
C --- Gradients en U_i
              tjy1 = .125*(tj(lt010+v2mtr)+tj(lt210+v2mtr))
C
              f1d = ropd(il+v2)
              f1 = rop(il+v2)
              f2d = ropd(ir+v2)
              f2 = rop(ir+v2)
              f3d = ropd(ir+v2) + ropd(il+v2) + ropd(l220+v2) + ropd(
     +          l020+v2)
              f3 = rop(ir+v2) + rop(il+v2) + rop(l220+v2) + rop(l020+v2)
              f4d = ropd(ir+v2) + ropd(il+v2) + ropd(l210+v2) + ropd(
     +          l010+v2)
              f4 = rop(ir+v2) + rop(il+v2) + rop(l210+v2) + rop(l010+v2)
C
              gradu_nxd = tix1*f2d - tix*f1d + tjx1*f4d - tjx*f3d
              gradu_nx = f2*tix1 - f1*tix + (f4*tjx1-f3*tjx)
C--- Gradients en v_i
              gradu_nyd = tiy1*f2d - tiy*f1d + tjy1*f4d - tjy*f3d
              gradu_ny = f2*tiy1 - f1*tiy + (f4*tjy1-f3*tjy)
C
              f1d = ropd(il+v3)
              f1 = rop(il+v3)
              f2d = ropd(ir+v3)
              f2 = rop(ir+v3)
              f3d = ropd(ir+v3) + ropd(il+v3) + ropd(l220+v3) + ropd(
     +          l020+v3)
              f3 = rop(ir+v3) + rop(il+v3) + rop(l220+v3) + rop(l020+v3)
              f4d = ropd(ir+v3) + ropd(il+v3) + ropd(l210+v3) + ropd(
     +          l010+v3)
              f4 = rop(ir+v3) + rop(il+v3) + rop(l210+v3) + rop(l010+v3)
C
              gradv_nxd = tix1*f2d - tix*f1d + tjx1*f4d - tjx*f3d
              gradv_nx = f2*tix1 - f1*tix + (f4*tjx1-f3*tjx)
C--- Gradients en T_i
              gradv_nyd = tiy1*f2d - tiy*f1d + tjy1*f4d - tjy*f3d
              gradv_ny = f2*tiy1 - f1*tiy + (f4*tjy1-f3*tjy)
C
              f1d = ropd(il+v5)
              f1 = rop(il+v5)
              f2d = ropd(ir+v5)
              f2 = rop(ir+v5)
              f3d = ropd(ir+v5) + ropd(il+v5) + ropd(l220+v5) + ropd(
     +          l020+v5)
              f3 = rop(ir+v5) + rop(il+v5) + rop(l220+v5) + rop(l020+v5)
              f4d = ropd(ir+v5) + ropd(il+v5) + ropd(l210+v5) + ropd(
     +          l010+v5)
              f4 = rop(ir+v5) + rop(il+v5) + rop(l210+v5) + rop(l010+v5)
C
              gradt_nxd = tix1*f2d - tix*f1d + tjx1*f4d - tjx*f3d
              gradt_nx = f2*tix1 - f1*tix + (f4*tjx1-f3*tjx)
C--- assemblage flux
              gradt_nyd = tiy1*f2d - tiy*f1d + tjy1*f4d - tjy*f3d
              gradt_ny = f2*tiy1 - f1*tiy + (f4*tjy1-f3*tjy)
C
              divd = cvisq*(gradu_nxd+gradv_nyd)
              div = (gradu_nx+gradv_ny)*cvisq
              f1d = gradu_nxd - divd
              f1 = gradu_nx - div
              f2d = gradu_nyd + gradv_nxd
              f2 = gradu_ny + gradv_nx
              f4d = gradv_nyd - divd
              f4 = gradv_ny - div
C
              volinv = 1./(vol(lvor)+vol(lvol))
              xmutvol = (xmut(ir)+xmut(il))*volinv
              xktvol = xmutvol*gam3
C
              fvd = -(xmutvol*(2.*tcx*f1d+tcy*f2d))
              fv = -((2.*f1*tcx+f2*tcy)*xmutvol)
              fv5d = fvd*(rop(ir+v2)+rop(il+v2)) + fv*(ropd(ir+v2)+ropd(
     +          il+v2))
              fv5 = fv*(rop(ir+v2)+rop(il+v2))
              flu2d = flu2d + fvd
              flu2 = flu2 + fv
C
              fvd = -(xmutvol*(tcx*f2d+2.*tcy*f4d))
              fv = -((f2*tcx+2.*f4*tcy)*xmutvol)
              fv5d = fv5d + fvd*(rop(ir+v3)+rop(il+v3)) + fv*(ropd(ir+v3
     +          )+ropd(il+v3))
              fv5 = fv5 + fv*(rop(ir+v3)+rop(il+v3))
              flu3d = flu3d + fvd
              flu3 = flu3 + fv
C
              fvd = 0.5*fv5d - xktvol*(tcx*gradt_nxd+tcy*gradt_nyd)
              fv = fv5*0.5 - (gradt_nx*tcx+gradt_ny*tcy)*xktvol
              flu5d = flu5d + fvd
              flu5 = flu5 + fv
C
              drodmd(l+v1) = drodmd(l+v1) + flu1d
              drodmd(l0+v1) = drodmd(l0+v1) - flu1d
              drodmd(l+v2) = drodmd(l+v2) + flu2d
              drodmd(l0+v2) = drodmd(l0+v2) - flu2d
              drodmd(l+v3) = drodmd(l+v3) + flu3d
              drodmd(l0+v3) = drodmd(l0+v3) - flu3d
              drodmd(l+v5) = drodmd(l+v5) + flu5d
              drodmd(l0+v5) = drodmd(l0+v5) - flu5d
            ENDDO
C
C
            IF (icorr .EQ. 1) THEN
Cflux manquant en I
              i = ind_loop(2) + 1
              l = 1 + (i+param_int(0+3)-1) + (j+param_int(0+3)-1)*
     +          param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1)
              lt = 1 + (i+param_int(5+3)-1)*param_int(5) + (j+param_int(
     +          5+3)-1)*param_int(5+1) + (k+param_int(5+4)-1)*param_int(
     +          5+2)
C.....Metrique
              tcx = ti(lt+v1mtr)
              tcy = ti(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              si = SQRT(arg1)
C
              nm = l - inci
              nm2 = l - 2*inci
              np = l + inci
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              vslp = v1
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm1d = qmd
              qm1 = qm
              qp1d = qpd
              qp1 = qp
C
C qm: right state,  qp: left state
              vslp = v2
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm2d = qmd
              qm2 = qm
              qp2d = qpd
              qp2 = qp
C
C qm: right state,  qp: left state
              vslp = v3
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm3d = qmd
              qm3 = qm
              qp3d = qpd
              qp3 = qp
C
C
C qm: right state,  qp: left state
              vslp = v5
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm5d = qmd
              qm5 = qm
              qp5d = qpd
              qp5 = qp
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +          qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C
Cdetermination etat moyenne roe
              IF (r1 .EQ. 0.0) THEN
                qp1d = 0.D0
              ELSE
                qp1d = r1d/(2.0*SQRT(r1))
              END IF
              qp1 = SQRT(r1)
              IF (r2 .EQ. 0.0) THEN
                qm1d = 0.D0
              ELSE
                qm1d = r2d/(2.0*SQRT(r2))
              END IF
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +          h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)
              IF (h - q .GE. 0.) THEN
                abs16d = hd - qd
                abs16 = h - q
              ELSE
                abs16d = -(hd-qd)
                abs16 = -(h-q)
              END IF
              IF ((gam-1.)*abs16 .EQ. 0.0) THEN
                cd = 0.D0
              ELSE
                cd = (gam-1.)*abs16d/(2.0*SQRT((gam-1.)*abs16))
              END IF
              c = SQRT((gam-1.)*abs16)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = si*(qm2d-qp2d)
              du = (qm2-qp2)*si
              dvd = si*(qm3d-qp3d)
              dv = (qm3-qp3)*si
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
              IF (si .LT. 1.e-30) THEN
                max3 = 1.e-30
              ELSE
                max3 = si
              END IF
C
C.....Evaluation des valeurs propres
              s_1 = 1./max3
              nx = tcx*s_1
              ny = tcy*s_1
C
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C
              f1d = qnd
              f1 = qn
              IF (f1 .GE. 0.) THEN
                abs17d = f1d
                abs17 = f1
              ELSE
                abs17d = -f1d
                abs17 = -f1
              END IF
Cdelta
              f4d = psiroe*(abs17d+cd)
              f4 = psiroe*(abs17+c)
              IF (f1 .GE. 0.) THEN
                abs18 = f1
              ELSE
                abs18 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs18 - f4)
              IF (f1 .GE. 0.) THEN
                abs19d = f1d
                abs19 = f1
              ELSE
                abs19d = -f1d
                abs19 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs19d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs19
C  a123
              f1d = si*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*si
C
              flu1d = f3d*f1 + f3*f1d
              flu1 = f3*f1
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu2 = f3*(f1*u+r*(du-nx*dqn))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu3 = f3*(f1*v+r*(dv-ny*dqn))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
              flu5 = f3*(f1*q+r*(u*du+v*dv-qn*dqn))
C
              f1d = qnd + cd
              f1 = qn + c
              IF (f1 .GE. 0.) THEN
                abs20 = f1
              ELSE
                abs20 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs20 - f4)
              IF (f1 .GE. 0.) THEN
                abs21d = f1d
                abs21 = f1
              ELSE
                abs21d = -f1d
                abs21 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs21d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs21
Clambda4*S*a4
              f1d = si*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*si*f3
C
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu2 = flu2 + f1*(u+nx*c)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu3 = flu3 + f1*(v+ny*c)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
              flu5 = flu5 + f1*(h+qn*c)
C
              f1d = qnd - cd
              f1 = qn - c
              IF (f1 .GE. 0.) THEN
                abs22 = f1
              ELSE
                abs22 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs22 - f4)
              IF (f1 .GE. 0.) THEN
                abs23d = f1d
                abs23 = f1
              ELSE
                abs23d = -f1d
                abs23 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs23d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs23
Clambda5*S*a5
              f1d = si*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*si
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu2 = flu2 + f1*(u-nx*c)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu3 = flu3 + f1*(v-ny*c)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
              flu5 = flu5 + f1*(h-qn*c)
C
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
              p1p2 = p1 + p2
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu1 = (flu1+rou1+rou2)*0.5
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu2 = (flu2+rou1*qp2+rou2*qm2+tcx*p1p2)*0.5
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu3 = (flu3+rou1*qp3+rou2*qm3+tcy*p1p2)*0.5
              flu4 = 0.
C1=?+1; 
C3=?+2 
C2=?-1
C4=?-2
Cl341  = (i+2,j-2,k+1)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
              flu5 = (flu5+rou1*h1+rou2*h2)*0.5
C
              lt200 = lt - inci_mtr
              lt100 = lt + inci_mtr
              lt010 = lt + incj_mtr
              lt210 = lt - inci_mtr + incj_mtr
C
              lvor = lt
              lvol = lt200
C
              il = l - inci
              ir = l
              l220 = l - inci - incj
              l020 = l - incj
              l210 = l - inci + incj
CCalcul des vecteurs surfaces I
              l010 = l + incj
C
CCCCCC
CCCCCC
CCCCCC   Facette I
CCCCCC
CCCCCC
              tix = .5*(ti(lt+v1mtr)+ti(lt200+v1mtr))
              tiy = .5*(ti(lt+v2mtr)+ti(lt200+v2mtr))
              tix1 = .5*(ti(lt+v1mtr)+ti(lt100+v1mtr))
              tiy1 = .5*(ti(lt+v2mtr)+ti(lt100+v2mtr))
C
              tjx = .125*(tj(lt+v1mtr)+tj(lt200+v1mtr))
              tjy = .125*(tj(lt+v2mtr)+tj(lt200+v2mtr))
              tjx1 = .125*(tj(lt010+v1mtr)+tj(lt210+v1mtr))
C --- Gradients en U_i
              tjy1 = .125*(tj(lt010+v2mtr)+tj(lt210+v2mtr))
C
              f1d = ropd(il+v2)
              f1 = rop(il+v2)
              f2d = ropd(ir+v2)
              f2 = rop(ir+v2)
              f3d = ropd(ir+v2) + ropd(il+v2) + ropd(l220+v2) + ropd(
     +          l020+v2)
              f3 = rop(ir+v2) + rop(il+v2) + rop(l220+v2) + rop(l020+v2)
              f4d = ropd(ir+v2) + ropd(il+v2) + ropd(l210+v2) + ropd(
     +          l010+v2)
              f4 = rop(ir+v2) + rop(il+v2) + rop(l210+v2) + rop(l010+v2)
C
              gradu_nxd = tix1*f2d - tix*f1d + tjx1*f4d - tjx*f3d
              gradu_nx = f2*tix1 - f1*tix + (f4*tjx1-f3*tjx)
C--- Gradients en v_i
              gradu_nyd = tiy1*f2d - tiy*f1d + tjy1*f4d - tjy*f3d
              gradu_ny = f2*tiy1 - f1*tiy + (f4*tjy1-f3*tjy)
C
              f1d = ropd(il+v3)
              f1 = rop(il+v3)
              f2d = ropd(ir+v3)
              f2 = rop(ir+v3)
              f3d = ropd(ir+v3) + ropd(il+v3) + ropd(l220+v3) + ropd(
     +          l020+v3)
              f3 = rop(ir+v3) + rop(il+v3) + rop(l220+v3) + rop(l020+v3)
              f4d = ropd(ir+v3) + ropd(il+v3) + ropd(l210+v3) + ropd(
     +          l010+v3)
              f4 = rop(ir+v3) + rop(il+v3) + rop(l210+v3) + rop(l010+v3)
C
              gradv_nxd = tix1*f2d - tix*f1d + tjx1*f4d - tjx*f3d
              gradv_nx = f2*tix1 - f1*tix + (f4*tjx1-f3*tjx)
C--- Gradients en T_i
              gradv_nyd = tiy1*f2d - tiy*f1d + tjy1*f4d - tjy*f3d
              gradv_ny = f2*tiy1 - f1*tiy + (f4*tjy1-f3*tjy)
C
              f1d = ropd(il+v5)
              f1 = rop(il+v5)
              f2d = ropd(ir+v5)
              f2 = rop(ir+v5)
              f3d = ropd(ir+v5) + ropd(il+v5) + ropd(l220+v5) + ropd(
     +          l020+v5)
              f3 = rop(ir+v5) + rop(il+v5) + rop(l220+v5) + rop(l020+v5)
              f4d = ropd(ir+v5) + ropd(il+v5) + ropd(l210+v5) + ropd(
     +          l010+v5)
              f4 = rop(ir+v5) + rop(il+v5) + rop(l210+v5) + rop(l010+v5)
C
              gradt_nxd = tix1*f2d - tix*f1d + tjx1*f4d - tjx*f3d
              gradt_nx = f2*tix1 - f1*tix + (f4*tjx1-f3*tjx)
C--- assemblage flux
              gradt_nyd = tiy1*f2d - tiy*f1d + tjy1*f4d - tjy*f3d
              gradt_ny = f2*tiy1 - f1*tiy + (f4*tjy1-f3*tjy)
C
              divd = cvisq*(gradu_nxd+gradv_nyd)
              div = (gradu_nx+gradv_ny)*cvisq
              f1d = gradu_nxd - divd
              f1 = gradu_nx - div
              f2d = gradu_nyd + gradv_nxd
              f2 = gradu_ny + gradv_nx
              f4d = gradv_nyd - divd
              f4 = gradv_ny - div
C
              volinv = 1./(vol(lvor)+vol(lvol))
              xmutvol = (xmut(ir)+xmut(il))*volinv
              xktvol = xmutvol*gam3
C
              fvd = -(xmutvol*(2.*tcx*f1d+tcy*f2d))
              fv = -((2.*f1*tcx+f2*tcy)*xmutvol)
              fv5d = fvd*(rop(ir+v2)+rop(il+v2)) + fv*(ropd(ir+v2)+ropd(
     +          il+v2))
              fv5 = fv*(rop(ir+v2)+rop(il+v2))
              flu2d = flu2d + fvd
              flu2 = flu2 + fv
C
              fvd = -(xmutvol*(tcx*f2d+2.*tcy*f4d))
              fv = -((f2*tcx+2.*f4*tcy)*xmutvol)
              fv5d = fv5d + fvd*(rop(ir+v3)+rop(il+v3)) + fv*(ropd(ir+v3
     +          )+ropd(il+v3))
              fv5 = fv5 + fv*(rop(ir+v3)+rop(il+v3))
              flu3d = flu3d + fvd
              flu3 = flu3 + fv
C
              fvd = 0.5*fv5d - xktvol*(tcx*gradt_nxd+tcy*gradt_nyd)
              fv = fv5*0.5 - (gradt_nx*tcx+gradt_ny*tcy)*xktvol
              flu5d = flu5d + fvd
              flu5 = flu5 + fv
C
              ls = l - inci
              drodmd(ls+v1) = drodmd(ls+v1) - flu1d
              drodmd(ls+v2) = drodmd(ls+v2) - flu2d
              drodmd(ls+v3) = drodmd(ls+v3) - flu3d
              drodmd(ls+v5) = drodmd(ls+v5) - flu5d
            END IF
          ENDDO
Cdo j
CComplement fluj en Jmax
C
          IF (jcorr .EQ. 1) THEN
C
            j = ind_loop(4) + 1
C
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1) - 1
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
            DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
              lt = l - ltij
              lvo = lt
C
C.....Metrique
              tcx = tj(lt+v1mtr)
              tcy = tj(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              sj = SQRT(arg1)
C
              nm = l - incj
              nm2 = l - 2*incj
              np = l + incj
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              vslp = v1
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm1d = qmd
              qm1 = qm
              qp1d = qpd
              qp1 = qp
C
C qm: right state,  qp: left state
              vslp = v2
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm2d = qmd
              qm2 = qm
              qp2d = qpd
              qp2 = qp
C
C qm: right state,  qp: left state
              vslp = v3
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm3d = qmd
              qm3 = qm
              qp3d = qpd
              qp3 = qp
C
C
C qm: right state,  qp: left state
              vslp = v5
              qmd = c4*ropd(l+vslp) + c5*ropd(nm+vslp) + c6*ropd(np+vslp
     +          )
              qm = c4*rop(l+vslp) + c5*rop(nm+vslp) + c6*rop(np+vslp)
              qpd = c4*ropd(nm+vslp) + c6*ropd(nm2+vslp) + c5*ropd(l+
     +          vslp)
              qp = c4*rop(nm+vslp) + c6*rop(nm2+vslp) + c5*rop(l+vslp)
              qm5d = qmd
              qm5 = qm
              qp5d = qpd
              qp5 = qp
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +          qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C
Cdetermination etat moyenne roe
              IF (r1 .EQ. 0.0) THEN
                qp1d = 0.D0
              ELSE
                qp1d = r1d/(2.0*SQRT(r1))
              END IF
              qp1 = SQRT(r1)
              IF (r2 .EQ. 0.0) THEN
                qm1d = 0.D0
              ELSE
                qm1d = r2d/(2.0*SQRT(r2))
              END IF
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +          h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)
              IF (h - q .GE. 0.) THEN
                abs24d = hd - qd
                abs24 = h - q
              ELSE
                abs24d = -(hd-qd)
                abs24 = -(h-q)
              END IF
              IF ((gam-1.)*abs24 .EQ. 0.0) THEN
                cd = 0.D0
              ELSE
                cd = (gam-1.)*abs24d/(2.0*SQRT((gam-1.)*abs24))
              END IF
              c = SQRT((gam-1.)*abs24)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = sj*(qm2d-qp2d)
              du = (qm2-qp2)*sj
              dvd = sj*(qm3d-qp3d)
              dv = (qm3-qp3)*sj
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
              IF (sj .LT. 1.e-30) THEN
                max4 = 1.e-30
              ELSE
                max4 = sj
              END IF
C
C.....Evaluation des valeurs propres
              s_1 = 1./max4
              nx = tcx*s_1
              ny = tcy*s_1
C
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C
              f1d = qnd
              f1 = qn
              IF (f1 .GE. 0.) THEN
                abs25d = f1d
                abs25 = f1
              ELSE
                abs25d = -f1d
                abs25 = -f1
              END IF
Cdelta
              f4d = psiroe*(abs25d+cd)
              f4 = psiroe*(abs25+c)
              IF (f1 .GE. 0.) THEN
                abs26 = f1
              ELSE
                abs26 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs26 - f4)
              IF (f1 .GE. 0.) THEN
                abs27d = f1d
                abs27 = f1
              ELSE
                abs27d = -f1d
                abs27 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs27d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs27
C  a123*S
              f1d = sj*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*sj
C
              flu1d = f3d*f1 + f3*f1d
              flu1 = f3*f1
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu2 = f3*(f1*u+r*(du-nx*dqn))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu3 = f3*(f1*v+r*(dv-ny*dqn))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
              flu5 = f3*(f1*q+r*(u*du+v*dv-qn*dqn))
C
              f1d = qnd + cd
              f1 = qn + c
              IF (f1 .GE. 0.) THEN
                abs28 = f1
              ELSE
                abs28 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs28 - f4)
              IF (f1 .GE. 0.) THEN
                abs29d = f1d
                abs29 = f1
              ELSE
                abs29d = -f1d
                abs29 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs29d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs29
Clambda4*S*a4
              f1d = sj*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*f3*sj
C
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu2 = flu2 + f1*(u+nx*c)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu3 = flu3 + f1*(v+ny*c)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
              flu5 = flu5 + f1*(h+qn*c)
C
              f1d = qnd - cd
              f1 = qn - c
              IF (f1 .GE. 0.) THEN
                abs30 = f1
              ELSE
                abs30 = -f1
              END IF
              f2 = .5 + SIGN(.5, abs30 - f4)
              IF (f1 .GE. 0.) THEN
                abs31d = f1d
                abs31 = f1
              ELSE
                abs31d = -f1d
                abs31 = -f1
              END IF
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs31d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs31
Clambda5*S*a5
              f1d = sj*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*sj
              flu1d = flu1d + f1d
              flu1 = flu1 + f1
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu2 = flu2 + f1*(u-nx*c)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu3 = flu3 + f1*(v-ny*c)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
              flu5 = flu5 + f1*(h-qn*c)
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
              p1p2 = p1 + p2
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu1 = (flu1+rou1+rou2)*0.5
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu2 = (flu2+rou1*qp2+rou2*qm2+tcx*p1p2)*0.5
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu3 = (flu3+rou1*qp3+rou2*qm3+tcy*p1p2)*0.5
              flu4 = 0.
C1=?+1; 
C3=?+2 
C2=?-1
C4=?-2
Cl341  = (i+2,j-2,k+1)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
              flu5 = (flu5+rou1*h1+rou2*h2)*0.5
C
              lt100 = lt + inci_mtr
              lt010 = lt + incj_mtr
              lt020 = lt - incj_mtr
              lt120 = lt + inci_mtr - incj_mtr
C
              lvor = lt
              lvol = lt020
C
              il = l - incj
              ir = l
              l220 = l - inci - incj
              l200 = l - inci
              l120 = l + inci - incj
CCalcul des vecteurs surfaces J
              l100 = l + inci
CCCCCC
CCCCCC
CCCCCC   Facette J
CCCCCC
CCCCCC
              tix = .5*(tj(lt+v1mtr)+tj(lt020+v1mtr))
              tiy = .5*(tj(lt+v2mtr)+tj(lt020+v2mtr))
              tix1 = .5*(tj(lt+v1mtr)+tj(lt010+v1mtr))
              tiy1 = .5*(tj(lt+v2mtr)+tj(lt010+v2mtr))
C
C(i,j,k) et (i,j-1,k)
              tkx = .125*(ti(lt+v1mtr)+ti(lt020+v1mtr))
              tky = .125*(ti(lt+v2mtr)+ti(lt020+v2mtr))
C(i+1,j,k) et (i+1,j-1,k)
              tkx1 = .125*(ti(lt100+v1mtr)+ti(lt120+v1mtr))
C --- Gradients en U_j (i,j,k), (i,j-1,k), (i,j-1,k-1), (i,j,k-1)
              tky1 = .125*(ti(lt100+v2mtr)+ti(lt120+v2mtr))
C
              f1d = ropd(il+v2)
              f1 = rop(il+v2)
              f2d = ropd(ir+v2)
              f2 = rop(ir+v2)
              f5d = ropd(ir+v2) + ropd(il+v2) + ropd(l220+v2) + ropd(
     +          l200+v2)
              f5 = rop(ir+v2) + rop(il+v2) + rop(l220+v2) + rop(l200+v2)
              f6d = ropd(ir+v2) + ropd(il+v2) + ropd(l120+v2) + ropd(
     +          l100+v2)
              f6 = rop(ir+v2) + rop(il+v2) + rop(l120+v2) + rop(l100+v2)
C
              gradu_nxd = tix1*f2d - tix*f1d + tkx1*f6d - tkx*f5d
              gradu_nx = f2*tix1 - f1*tix + (f6*tkx1-f5*tkx)
C --- Gradients en V_j
              gradu_nyd = tiy1*f2d - tiy*f1d + tky1*f6d - tky*f5d
              gradu_ny = f2*tiy1 - f1*tiy + (f6*tky1-f5*tky)
C
              f1d = ropd(il+v3)
              f1 = rop(il+v3)
              f2d = ropd(ir+v3)
              f2 = rop(ir+v3)
              f5d = ropd(ir+v3) + ropd(il+v3) + ropd(l220+v3) + ropd(
     +          l200+v3)
              f5 = rop(ir+v3) + rop(il+v3) + rop(l220+v3) + rop(l200+v3)
              f6d = ropd(ir+v3) + ropd(il+v3) + ropd(l120+v3) + ropd(
     +          l100+v3)
              f6 = rop(ir+v3) + rop(il+v3) + rop(l120+v3) + rop(l100+v3)
C
              gradv_nxd = tix1*f2d - tix*f1d + tkx1*f6d - tkx*f5d
              gradv_nx = f2*tix1 - f1*tix + (f6*tkx1-f5*tkx)
C --- Gradients en T_j
              gradv_nyd = tiy1*f2d - tiy*f1d + tky1*f6d - tky*f5d
              gradv_ny = f2*tiy1 - f1*tiy + (f6*tky1-f5*tky)
C
              f1d = ropd(il+v5)
              f1 = rop(il+v5)
              f2d = ropd(ir+v5)
              f2 = rop(ir+v5)
              f5d = ropd(ir+v5) + ropd(il+v5) + ropd(l220+v5) + ropd(
     +          l200+v5)
              f5 = rop(ir+v5) + rop(il+v5) + rop(l220+v5) + rop(l200+v5)
              f6d = ropd(ir+v5) + ropd(il+v5) + ropd(l120+v5) + ropd(
     +          l100+v5)
              f6 = rop(ir+v5) + rop(il+v5) + rop(l120+v5) + rop(l100+v5)
C
              gradt_nxd = tix1*f2d - tix*f1d + tkx1*f6d - tkx*f5d
              gradt_nx = f2*tix1 - f1*tix + (f6*tkx1-f5*tkx)
C--- assemblage flux
              gradt_nyd = tiy1*f2d - tiy*f1d + tky1*f6d - tky*f5d
              gradt_ny = f2*tiy1 - f1*tiy + (f6*tky1-f5*tky)
C
              divd = cvisq*(gradu_nxd+gradv_nyd)
              div = (gradu_nx+gradv_ny)*cvisq
              f1d = gradu_nxd - divd
              f1 = gradu_nx - div
              f2d = gradu_nyd + gradv_nxd
              f2 = gradu_ny + gradv_nx
              f4d = gradv_nyd - divd
              f4 = gradv_ny - div
C
              volinv = 1./(vol(lvor)+vol(lvol))
              xmutvol = (xmut(ir)+xmut(il))*volinv
              xktvol = xmutvol*gam3
C
              fvd = -(xmutvol*(2.*tcx*f1d+tcy*f2d))
              fv = -((2.*f1*tcx+f2*tcy)*xmutvol)
              fv5d = fvd*(rop(ir+v2)+rop(il+v2)) + fv*(ropd(ir+v2)+ropd(
     +          il+v2))
              fv5 = fv*(rop(ir+v2)+rop(il+v2))
              flu2d = flu2d + fvd
              flu2 = flu2 + fv
C
              fvd = -(xmutvol*(tcx*f2d+2.*tcy*f4d))
              fv = -((f2*tcx+2.*f4*tcy)*xmutvol)
              fv5d = fv5d + fvd*(rop(ir+v3)+rop(il+v3)) + fv*(ropd(ir+v3
     +          )+ropd(il+v3))
              fv5 = fv5 + fv*(rop(ir+v3)+rop(il+v3))
              flu3d = flu3d + fvd
              flu3 = flu3 + fv
C
              fvd = 0.5*fv5d - xktvol*(tcx*gradt_nxd+tcy*gradt_nyd)
              fv = fv5*0.5 - (gradt_nx*tcx+gradt_ny*tcy)*xktvol
              flu5d = flu5d + fvd
              flu5 = flu5 + fv
              ls = l - incj
              drodmd(ls+v1) = drodmd(ls+v1) - flu1d
              drodmd(ls+v2) = drodmd(ls+v2) - flu2d
              drodmd(ls+v3) = drodmd(ls+v3) - flu3d
              drodmd(ls+v5) = drodmd(ls+v5) - flu5d
            ENDDO
          END IF
        ENDDO
      END IF
      END
C

