import os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# FastC requires:
# ELSAPROD variable defined in environment
# C++ compiler
# Fortran compiler: defined in config.py
# Numpy
# KCore library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

# Test if xcore exists =======================================================
(xcoreVersion, xcoreIncDir, xcoreLibDir) = Dist.checkXCore()

# Test if connector exists ==================================================
(connectorVersion, connectorIncDir, connectorLibDir) = Dist.checkConnector()

# Test if libmpi exists ======================================================
(mpi, mpiIncDir, mpiLibDir, mpiLibs) = Dist.checkMpi(additionalLibPaths, additionalIncludePaths)

from KCore.config import *

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir, xcoreLibDir, connectorLibDir]
includeDirs = [numpyIncDir, kcoreIncDir, xcoreIncDir, connectorIncDir, pythonIncDir]
libraries = ["kcore", "xcore", "connector"]
(ok, libs, paths) = Dist.checkFortranLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs
(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

if mpi:
    libraryDirs.append(mpiLibDir)
    includeDirs.append(mpiIncDir)
    ADDITIONALCPPFLAGS = ['-D_MPI']
else:
    ADDITIONALCPPFLAGS = []

if mpi: libraries += mpiLibs

# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None
AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  FORTRAN=f77compiler,
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons())

ELSAPROD = os.environ.get('ELSAPROD', 'x86_r8')
env.SConsignFile('build/'+ELSAPROD+'/.sconsign.dblite')
env.Replace(CPPPATH=[".", "FastC"]+additionalIncludePaths+includeDirs)
env.Replace(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS)
env.Replace(CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS)

#=============================================================================================

# additional fortran preprocessing args
addFPPArgs = '-D_OPENMP4 -D_OPENMP -DE_SCALAR_COMPUTER -DE_OMP_SOUS_DOMAIN'
# additional fortran compiler flags
addFFlags = []
cacheLine = Dist.getCacheLine()
if cacheLine == 1: addFPPArgs += ' -DCACHELINE=16'
else: addFPPArgs += ' -DCACHELINE=%d'%cacheLine
nbsocket = Dist.getNbSocket()
if nbsocket == 1: addFPPArgs += ' -DNB_SOCKET=1'
else: addFPPArgs += ' -DNB_SOCKET=%d'%nbsocket
if Dist.DEBUG: addFPPArgs += ' -D__DEBUG__'
corePerSock = Dist.getCorePerSocket()
if corePerSock== 1: addFPPArgs += ' -DCORE_PER_SOCK=1'
else: addFPPArgs += ' -DCORE_PER_SOCK=%d'%corePerSock

if f77compiler == 'gfortran' or f77compiler == 'x86_64-w64-mingw32-gfortran':
    addFFlags += ['-fdefault-real-8', '-fdefault-double-8']

elif f77compiler == 'ifort':
   version = Dist.getForVersion() # A utiliser version=(13,4)
   floatType = '-r8' if Dist.EDOUBLEINT else '-r8 -i4'
   addFFlags += [ '-r8', '-fno-alias', '-fno-fnalias', '-ip' ]
   if Dist.EDOUBLEINT: addFFlags += ['-i8']
   else: addFFlags += ['-i4']
   if version[0] >= 17:
      addFFlags += ['-qopt-report5', '-qopt-report-phase=loop,vec,cg', '-qopt-report-embed',  '-unroll0']
   else: addFFlags += ['-unroll0']

env = Dist.createFortranBuilder(env, dirs=["."], 
   additionalPPArgs=addFPPArgs, additionalFortranArgs=addFFlags)

# Scan fortran files and store dependencies
parentFolder = os.path.dirname(os.path.dirname(os.getcwd()))
deps = Dist.findImmediateDeps(parentFolder=parentFolder, searchFolder="FastC",
                              depPattern=r'^#include\s*["\'](.+?)["\']',
                              fileExtensions=['.f', '.f90', '.for'])
ppf = Dist.createFortranFiles(env, srcs, deps=deps)
ppf = srcs.cpp_srcs + ppf

# Split list of pre-processed object files
ppf = Dist.chunkObjectFiles(ppf, chunkSize=100)

# Create a static library and copy built files to the install folder
staticLib = Dist.createStaticLibrary(env, ppf, parentFolder=parentFolder,
                                     moduleName="FastC")
Dist.copyBuiltFiles(env, staticLib, moduleName="FastC", installPath=installPath)
