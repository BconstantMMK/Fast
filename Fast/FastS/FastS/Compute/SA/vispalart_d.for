C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.13 (r6666M) - 28 May 2018 09:28
C
C  Differentiation of vispalart in forward (tangent) mode:
C   variations   of useful results: xmut
C   with respect to varying inputs: rop
C   RW status of diff variables: rop:in xmut:out
C
C
C
C
C
C
C
C
C
C
C
C***********************************************************************
C     $Date: 2013-02-04 19:27:20 +0100 (lun. 04 f√©vr. 2013) $
C     $Revision: 38 $
C     $Author: IvanMary $
C***********************************************************************
      SUBROUTINE VISPALART_D(ndom, param_int, param_real, ind_loop, xmut
     +                       , xmutd, rop, ropd)
      IMPLICIT NONE
C
C.....formulation originelle
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
      INTEGER*4 ndom, ind_loop(6), param_int(0:*)
C
      REAL*8 xmut(param_int(41))
      REAL*8 xmutd(param_int(41))
      REAL*8 rop(param_int(41), param_int(36))
      REAL*8 ropd(param_int(41), param_int(36))
C
      REAL*8 param_real(0:*)
C Var loc 
      INTEGER*4 incmax, i, j, k, l, ltij, lij, lt, lvo
C
      REAL*8 amulam, anulam, fv1, fvv1, anutild, amut, xmuprov, chi, ad1
     +       , s, temp01, cmus1, coesut, t1_1
      REAL*8 amulamd, anulamd, fvv1d, anutildd, amutd, xmuprovd, chid
C
C    adresse interface pour tableau metric
      INTEGER_E indmtr, i_3, j_3, k_3
C    adresse point courant pour tableau de la taille d'un domaine 
      INTEGER_E inddm, i_1, j_1, k_1
      INTRINSIC SQRT
      INTRINSIC MAX
      INTRINSIC MIN
      REAL*8 min1
      REAL*8 min1d
      REAL*8 arg1
      REAL*8 arg1d
      REAL*8 result1
      REAL*8 result1d
      INTEGER ii1
      cmus1 = param_real(9+4)
      temp01 = 1./param_real(9+3)
C
C
CModele Spalart
C
C
      coesut = param_real(9+2)*(1.+cmus1*temp01)
C
      IF (param_int(47+1-1) .LE. 1) THEN
CSA
C
        DO k=ind_loop(5),ind_loop(6)
          DO j=ind_loop(3),ind_loop(4)
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1)
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2))
CDEC$ IVDEP
            DO l=lij,lij+ind_loop(2)-ind_loop(1)
              lt = l - ltij
              lvo = lt
              arg1d = temp01*ropd(l, 5)
              arg1 = rop(l, 5)*temp01
              IF (arg1 .EQ. 0.0) THEN
                result1d = 0.D0
              ELSE
                result1d = arg1d/(2.0*SQRT(arg1))
              END IF
              result1 = SQRT(arg1)
              amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut*
     +          result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/rop(l, 
     +          5))**2
              amulam = coesut*result1/(1.+cmus1/rop(l, 5))
              anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam**2
              anulam = rop(l, 1)/amulam
              IF (rop(l, 6) .LT. 1.e-27) THEN
                anutild = 1.e-27
                anutildd = 0.0
              ELSE
                anutildd = ropd(l, 6)
                anutild = rop(l, 6)
              END IF
              IF (anutild*anulam .LT. 1.e-7) THEN
                chi = 1.e-7
                chid = 0.0
              ELSE
                chid = anutildd*anulam + anutild*anulamd
                chi = anutild*anulam
              END IF
C
              fvv1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +          chi**3+357.911)**2
              fvv1 = chi**3/(chi**3+357.911)
              amutd = ropd(l, 1)*anutild*fvv1 + rop(l, 1)*(anutildd*fvv1
     +          +anutild*fvv1d)
              amut = rop(l, 1)*anutild*fvv1
              IF (amut .LT. 0.) THEN
                xmuprov = 0.
                xmuprovd = 0.0
              ELSE
                xmuprovd = amutd
                xmuprov = amut
              END IF
              IF (xmuprov .GT. param_real(16+3-1)*amulam) THEN
                min1d = param_real(16+3-1)*amulamd
                min1 = param_real(16+3-1)*amulam
              ELSE
                min1d = xmuprovd
                min1 = xmuprov
              END IF
              xmutd(l) = amulamd + min1d
            ENDDO
          ENDDO
        ENDDO
      ELSE
      END IF
      END

