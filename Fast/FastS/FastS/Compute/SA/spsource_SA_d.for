C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.13 (r6666M) - 28 May 2018 09:28
C
C  Differentiation of spsource_sa in forward (tangent) mode:
C   variations   of useful results: drodm
C   with respect to varying inputs: rop
C   RW status of diff variables: rop:in drodm:out
C
C
C
C
C
C
C
C
C
C
C
C***********************************************************************
C     $Date: 2013-02-04 19:27:20 +0100 (lun. 04 f√©vr. 2013) $
C     $Revision: 38 $
C     $Author: IvanMary $
C***********************************************************************
      SUBROUTINE SPSOURCE_SA_D(ndom, nitcfg, param_int, param_real, 
     +                         ind_loop, xmut, rop, ropd, coe, ti, tj, 
     +                         tk, vol, dlng, drodm, drodmd)
      IMPLICIT NONE
C
C.....formulation originelle
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
      INTEGER*4 ndom, ind_loop(6), nitcfg, param_int(0:*)
C
      REAL*8 xmut(param_int(41))
      REAL*8 rop(param_int(41), param_int(36))
      REAL*8 ropd(param_int(41), param_int(36))
      REAL*8 coe(param_int(41), param_int(39))
      REAL*8 drodm(param_int(41), param_int(36))
      REAL*8 drodmd(param_int(41), param_int(36))
      REAL*8 ti(param_int(43), param_int(37)), tj(param_int(43), 
     +       param_int(37)), tk(param_int(43), param_int(38))
      REAL*8 dlng(param_int(41)), vol(param_int(43))
C
      REAL*8 param_real(0:*)
C
C
C Var loc 
      INTEGER*4 incmax, i, j, k, l, icoe_pos, inci, incj, inck, inci_mtr
     +          , incj_mtr, inck_mtr, l1, l2, l3, l4, l5, l6, ltij, lij
     +          , lt, ndimdx, lvo
C
      REAL*8 adtild, adtild1, ad1, adelta1, adelta2, testzg2, testzg, fw
     +       , fv1, fv2, r1_1, amulam, anulam, amutild, anutild, voldes
     +       , tci, tcj, tck, sph2, amut, xmuprov, rotx, roty, rotz, rot
     +       , chi, prod, stild, stides, r, r2, g, fwg1, fwg, aseuil, 
     +       destruc, dest2, anvisc, tsource, tsourceb, tsourcenu, f1, 
     +       f2, dist, s, t, df2dchi, dstidnu, dpdnu, dfwdg, dgdr, drdnu
     +       , dfwdnu, ddesdnu, temp01, cmus1, coesut, t1, t1_1, auijuij
     +       , adcut, variable2, fa, testfa, ra, c1, cw1, c1d, c2d, tjx
     +       , tjy, tjz, tjx1, tjy1, tjz1, si, sj
      REAL*8 sk, tix, tiy, tiz, tix1, tiy1, tiz1, tkx, tky, tkz, tkx1, 
     +       tky1, tkz1, u1, u2, u3, u4, u5, u6, xvol, dudx, dudy, dudz
      REAL*8 amulamd, anulamd, anutildd, rotxd, rotyd, rotzd, rotd, chid
     +       , prodd, stildd, rd, gd, fwgd, destrucd, anviscd, tsourced
     +       , f1d, f2d, u1d, u2d, u3d, u4d, u5d, u6d, dudxd, dudyd, 
     +       dudzd
C
C    adresse point courant pour tableau de la taille d'un domaine 
      INTEGER_E inddm, i_1, j_1, k_1
C    adresse interface pour tableau metric
      INTEGER_E indmtr, i_3, j_3, k_3
      INTRINSIC SQRT
      INTRINSIC MAX
      INTRINSIC MIN
      INTRINSIC ABS
      REAL*8 min1
      REAL*8 min2
      REAL*8 min3
      REAL*8 abs0
      REAL*8 abs0d
      REAL*8 min4
      REAL*8 abs1
      REAL*8 abs1d
      REAL*8 arg1
      REAL*8 arg1d
      REAL*8 result1
      REAL*8 result1d
      REAL*8 pwx1
      REAL*8 pwx1d
      REAL*8 pwr1
      REAL*8 pwr1d
      INTEGER ii2
      INTEGER ii1
C
      cmus1 = param_real(9+4)
      temp01 = 1./param_real(9+3)
      coesut = param_real(9+2)*(1.+cmus1*temp01)
      c1 = 0.622/(2./3.)
      cw1 = 0.1355/0.41/0.41 + (1.+0.622)/(2./3.)
C
      incmax = param_int(0)*param_int(0+1)*param_int(0+4)
C
      inci = 1
      incj = param_int(0)
      inck = param_int(0)*param_int(0+1)
C
      inci_mtr = param_int(5)
      incj_mtr = param_int(5+1)
      inck_mtr = param_int(5+2)
C
      ndimdx = param_int(41)
C typezone (2d,3d, cart,...0
C
      IF (param_int(25) .EQ. 0) THEN
Cexplicite/implicite
C!!!!
C!!!!
C!!!!
C!!!!
C!!!!
C3dhomo
Cdomaine 3d:
C
        IF (param_int(29) .LE. 1 .AND. nitcfg .LE. 1) THEN
Ccalcul implicite, on stocke coe pour ssor SA
C
          icoe_pos = 6
          IF (icoe_pos .GT. param_int(39)) THEN
C$OMP SINGLE 
            WRITE(*, *) 'erreur dim coe: spsource'
C$OMP END SINGLE 
            STOP
          ELSE
C
            DO k=ind_loop(5),ind_loop(6)
              DO j=ind_loop(3),ind_loop(4)
                lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(
     +            0+3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(
     +            0)*param_int(0+1)
                ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int
     +            (5)+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5
     +            +4)-1)*param_int(5+2))
CDEC$ IVDEP
                DO l=lij,lij+ind_loop(2)-ind_loop(1)
                  lt = l - ltij
Ccalcul de delta et gradient vitesse
                  lvo = lt
C
                  tix = ti(lt, 1)
                  tiy = ti(lt, 2)
                  tiz = ti(lt, 3)
                  tix1 = ti(lt+inci_mtr, 1)
                  tiy1 = ti(lt+inci_mtr, 2)
                  tiz1 = ti(lt+inci_mtr, 3)
C
                  tjx = tj(lt, 1)
                  tjy = tj(lt, 2)
                  tjz = tj(lt, 3)
                  tjx1 = tj(lt+incj_mtr, 1)
                  tjy1 = tj(lt+incj_mtr, 2)
                  tjz1 = tj(lt+incj_mtr, 3)
C
                  tkx = tk(lt, 1)
                  tky = tk(lt, 2)
                  tkz = tk(lt, 3)
                  tkx1 = tk(lt+inck_mtr, 1)
                  tky1 = tk(lt+inck_mtr, 2)
                  tkz1 = tk(lt+inck_mtr, 3)
C
                  l1 = l + 1
                  l2 = l - 1
                  l3 = l + incj
                  l4 = l - incj
                  l5 = l + inck
                  l6 = l - inck
C
                  u1d = ropd(l, 2) + ropd(l2, 2)
                  u1 = rop(l, 2) + rop(l2, 2)
                  u2d = ropd(l, 2) + ropd(l3, 2)
                  u2 = rop(l, 2) + rop(l3, 2)
                  u3d = ropd(l, 2) + ropd(l1, 2)
                  u3 = rop(l, 2) + rop(l1, 2)
                  u4d = ropd(l, 2) + ropd(l4, 2)
                  u4 = rop(l, 2) + rop(l4, 2)
                  u5d = ropd(l, 2) + ropd(l5, 2)
                  u5 = rop(l, 2) + rop(l5, 2)
Cdudy
                  u6d = ropd(l, 2) + ropd(l6, 2)
                  u6 = rop(l, 2) + rop(l6, 2)
C
Cdudz
                  rotzd = -(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d+tky1*u5d-
     +              tky*u6d)
                  rotz = -(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy+u5*tky1-u6*tky)
C
                  rotyd = tiz1*u3d - tiz*u1d + tjz1*u2d - tjz*u4d + tkz1
     +              *u5d - tkz*u6d
                  roty = u3*tiz1 - u1*tiz + u2*tjz1 - u4*tjz + u5*tkz1 -
     +              u6*tkz
C
C
                  u1d = ropd(l, 3) + ropd(l2, 3)
                  u1 = rop(l, 3) + rop(l2, 3)
                  u2d = ropd(l, 3) + ropd(l3, 3)
                  u2 = rop(l, 3) + rop(l3, 3)
                  u3d = ropd(l, 3) + ropd(l1, 3)
                  u3 = rop(l, 3) + rop(l1, 3)
                  u4d = ropd(l, 3) + ropd(l4, 3)
                  u4 = rop(l, 3) + rop(l4, 3)
                  u5d = ropd(l, 3) + ropd(l5, 3)
                  u5 = rop(l, 3) + rop(l5, 3)
Cdvdx
                  u6d = ropd(l, 3) + ropd(l6, 3)
                  u6 = rop(l, 3) + rop(l6, 3)
                  dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d + tkx1
     +              *u5d - tkx*u6d
                  dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx + u5*tkx1 -
     +              u6*tkx
C
Cdvdz
                  rotzd = rotzd + dudxd
                  rotz = rotz + dudx
C
                  dudxd = tiz1*u3d - tiz*u1d + tjz1*u2d - tjz*u4d + tkz1
     +              *u5d - tkz*u6d
                  dudx = u3*tiz1 - u1*tiz + u2*tjz1 - u4*tjz + u5*tkz1 -
     +              u6*tkz
C
                  rotxd = -dudxd
                  rotx = -dudx
C
                  u1d = ropd(l, 4) + ropd(l2, 4)
                  u1 = rop(l, 4) + rop(l2, 4)
                  u2d = ropd(l, 4) + ropd(l3, 4)
                  u2 = rop(l, 4) + rop(l3, 4)
                  u3d = ropd(l, 4) + ropd(l1, 4)
                  u3 = rop(l, 4) + rop(l1, 4)
                  u4d = ropd(l, 4) + ropd(l4, 4)
                  u4 = rop(l, 4) + rop(l4, 4)
                  u5d = ropd(l, 4) + ropd(l5, 4)
                  u5 = rop(l, 4) + rop(l5, 4)
Cdwdx
                  u6d = ropd(l, 4) + ropd(l6, 4)
                  u6 = rop(l, 4) + rop(l6, 4)
                  dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d + tkx1
     +              *u5d - tkx*u6d
                  dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx + u5*tkx1 -
     +              u6*tkx
C
Cdwdy
                  rotyd = rotyd - dudxd
                  roty = roty - dudx
                  dudxd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d + tky1
     +              *u5d - tky*u6d
                  dudx = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy + u5*tky1 -
     +              u6*tky
C
C! mise a jour rot et auijuij par le volume
                  rotxd = rotxd + dudxd
                  rotx = rotx + dudx
C
                  xvol = 0.5/vol(lvo)
Cformulation compressible complete
                  arg1d = rotxd*rotx + rotx*rotxd + rotyd*roty + roty*
     +              rotyd + rotzd*rotz + rotz*rotzd
                  arg1 = rotx*rotx + roty*roty + rotz*rotz
                  IF (arg1 .EQ. 0.0) THEN
                    result1d = 0.D0
                  ELSE
                    result1d = arg1d/(2.0*SQRT(arg1))
                  END IF
                  result1 = SQRT(arg1)
                  rotd = xvol*result1d
                  rot = result1*xvol
C
                  u1d = ropd(l, 6) + ropd(l2, 6)
                  u1 = rop(l, 6) + rop(l2, 6)
                  u2d = ropd(l, 6) + ropd(l3, 6)
                  u2 = rop(l, 6) + rop(l3, 6)
                  u3d = ropd(l, 6) + ropd(l1, 6)
                  u3 = rop(l, 6) + rop(l1, 6)
                  u4d = ropd(l, 6) + ropd(l4, 6)
                  u4 = rop(l, 6) + rop(l4, 6)
                  u5d = ropd(l, 6) + ropd(l5, 6)
                  u5 = rop(l, 6) + rop(l5, 6)
Cdudx
                  u6d = ropd(l, 6) + ropd(l6, 6)
                  u6 = rop(l, 6) + rop(l6, 6)
Cdudy
                  dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d + tkx1
     +              *u5d - tkx*u6d
                  dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx + u5*tkx1 -
     +              u6*tkx
C
Cdudz
                  dudyd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d + tky1
     +              *u5d - tky*u6d
                  dudy = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy + u5*tky1 -
     +              u6*tky
                  dudzd = tiz1*u3d - tiz*u1d + tjz1*u2d - tjz*u4d + tkz1
     +              *u5d - tkz*u6d
                  dudz = u3*tiz1 - u1*tiz + u2*tjz1 - u4*tjz + u5*tkz1 -
     +              u6*tkz
C
C
                  u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
                  u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
                  u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
                  u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
                  u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
                  u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
                  u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
                  u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
                  u5d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l5, 6)*rop(l5, 1) + rop(l5, 6)*ropd(l5, 1)
                  u5 = rop(l, 6)*rop(l, 1) + rop(l5, 6)*rop(l5, 1)
Cdudx
                  u6d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l6, 6)*rop(l6, 1) + rop(l6, 6)*ropd(l6, 1)
                  u6 = rop(l, 6)*rop(l, 1) + rop(l6, 6)*rop(l6, 1)
Cdudy
                  dudxd = dudxd*(u3*tix1-u1*tix+u2*tjx1-u4*tjx+u5*tkx1-
     +              u6*tkx) + dudx*(tix1*u3d-tix*u1d+tjx1*u2d-tjx*u4d+
     +              tkx1*u5d-tkx*u6d)
                  dudx = dudx*(u3*tix1-u1*tix+u2*tjx1-u4*tjx+u5*tkx1-u6*
     +              tkx)
C
Cdudz
                  dudyd = dudyd*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy+u5*tky1-
     +              u6*tky) + dudy*(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d+
     +              tky1*u5d-tky*u6d)
                  dudy = dudy*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy+u5*tky1-u6*
     +              tky)
C
                  dudzd = dudzd*(u3*tiz1-u1*tiz+u2*tjz1-u4*tjz+u5*tkz1-
     +              u6*tkz) + dudz*(tiz1*u3d-tiz*u1d+tjz1*u2d-tjz*u4d+
     +              tkz1*u5d-tkz*u6d)
                  dudz = dudz*(u3*tiz1-u1*tiz+u2*tjz1-u4*tjz+u5*tkz1-u6*
     +              tkz)
C
                  anviscd = c1*xvol**2*(dudxd+dudyd+dudzd)
                  anvisc = c1*(dudx+dudy+dudz)*xvol*xvol
                  arg1d = temp01*ropd(l, 5)
                  arg1 = rop(l, 5)*temp01
                  IF (arg1 .EQ. 0.0) THEN
                    result1d = 0.D0
                  ELSE
                    result1d = arg1d/(2.0*SQRT(arg1))
                  END IF
                  result1 = SQRT(arg1)
                  amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut
     +              *result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/
     +              rop(l, 5))**2
                  amulam = coesut*result1/(1.+cmus1/rop(l, 5))
                  anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam
     +              **2
                  anulam = rop(l, 1)/amulam
                  IF (rop(l, 6) .LT. 1.e-27) THEN
                    anutild = 1.e-27
                    anutildd = 0.0
                  ELSE
                    anutildd = ropd(l, 6)
                    anutild = rop(l, 6)
                  END IF
                  IF (anutild*anulam .LT. 1.e-7) THEN
                    chi = 1.e-7
                    chid = 0.0
                  ELSE
                    chid = anutildd*anulam + anutild*anulamd
                    chi = anutild*anulam
                  END IF
C
C
                  f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +              chi**3+357.911)**2
                  f1 = chi**3/(chi**3+357.911)
                  f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+
     +              chi*f1)**2)
                  f2 = 1. - chi/(1.+chi*f1)
                  IF (dlng(l) .LT. 1.e-27) THEN
                    dist = 1.e-27
                  ELSE
                    dist = dlng(l)
                  END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
                  stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*
     +              dist*dist)
                  stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
                  prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(
     +              stildd*anutild+stild*anutildd))
                  prod = rop(l, 1)*0.1355*stild*anutild
                  IF (stild .LT. 0.00000000000000000001) THEN
                    stild = 0.00000000000000000001
                    stildd = 0.0
                  ELSE
                    stild = stild
                  END IF
                  rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*
     +              dist**2*stildd)/(stild*0.41*0.41*dist*dist)**2
                  r = anutild/(stild*0.41*0.41*dist*dist)
                  IF (r .GT. 10.) THEN
                    r = 10.
                    rd = 0.0
                  ELSE
                    r = r
                  END IF
                  gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*
     +              r+r**2*rd)*r**2+r**3*(rd*r+r*rd))
                  g = r*(1.+0.3*(r*r*r*r*r-1.))
                  pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
                  pwx1 = (1.+64.)/(g**6+64.)
                  IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ.
     +                INT(1./6.))) THEN
                    pwr1d = pwx1**(1./6.-1)*pwx1d/6.
                  ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                    pwr1d = pwx1d
                  ELSE
                    pwr1d = 0.0
                  END IF
                  pwr1 = pwx1**(1./6.)
                  fwgd = gd*pwr1 + g*pwr1d
                  fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
                  destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*
     +              anutild**2/dist**2+rop(l, 1)*fwg*(anutildd*anutild/
     +              dist**2+anutild*anutildd/dist**2))
                  destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/
     +              dist)
C
C
Cpour la Jacobienne (linearisation du terme visqueux)
                  tsourced = prodd + anviscd - destrucd
                  tsource = prod + anvisc - destruc
                  tsourceb = prod - destruc
                  amutild = anutild*rop(l, 1)
                  IF (amutild .LT. 0.0000000000000001) THEN
                    amutild = 0.0000000000000001
                  ELSE
                    amutild = amutild
                  END IF
                  tsourcenu = vol(lvo)*tsourceb/amutild
                  IF (tsourcenu .GT. 0.) THEN
                    min1 = 0.
                  ELSE
                    min1 = tsourcenu
                  END IF
C
                  drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
                ENDDO
              ENDDO
            ENDDO
          END IF
        ELSE
C
C
Ccalcul explicit, Stockage terme source inutile
C
          DO k=ind_loop(5),ind_loop(6)
            DO j=ind_loop(3),ind_loop(4)
              lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+
     +          3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1)
              ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5
     +          )+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-
     +          1)*param_int(5+2))
CDEC$ IVDEP
              DO l=lij,lij+ind_loop(2)-ind_loop(1)
                lt = l - ltij
Ccalcul de delta et gradient vitesse
                lvo = lt
C
                tix = ti(lt, 1)
                tiy = ti(lt, 2)
                tiz = ti(lt, 3)
                tix1 = ti(lt+inci_mtr, 1)
                tiy1 = ti(lt+inci_mtr, 2)
                tiz1 = ti(lt+inci_mtr, 3)
C
                tjx = tj(lt, 1)
                tjy = tj(lt, 2)
                tjz = tj(lt, 3)
                tjx1 = tj(lt+incj_mtr, 1)
                tjy1 = tj(lt+incj_mtr, 2)
                tjz1 = tj(lt+incj_mtr, 3)
C
                tkx = tk(lt, 1)
                tky = tk(lt, 2)
                tkz = tk(lt, 3)
                tkx1 = tk(lt+inck_mtr, 1)
                tky1 = tk(lt+inck_mtr, 2)
                tkz1 = tk(lt+inck_mtr, 3)
C
                l1 = l + 1
                l2 = l - 1
                l3 = l + incj
                l4 = l - incj
                l5 = l + inck
                l6 = l - inck
C
                u1d = ropd(l, 2) + ropd(l2, 2)
                u1 = rop(l, 2) + rop(l2, 2)
                u2d = ropd(l, 2) + ropd(l3, 2)
                u2 = rop(l, 2) + rop(l3, 2)
                u3d = ropd(l, 2) + ropd(l1, 2)
                u3 = rop(l, 2) + rop(l1, 2)
                u4d = ropd(l, 2) + ropd(l4, 2)
                u4 = rop(l, 2) + rop(l4, 2)
                u5d = ropd(l, 2) + ropd(l5, 2)
                u5 = rop(l, 2) + rop(l5, 2)
Cdudy
                u6d = ropd(l, 2) + ropd(l6, 2)
                u6 = rop(l, 2) + rop(l6, 2)
C
Cdudz
                rotzd = -(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d+tky1*u5d-tky
     +            *u6d)
                rotz = -(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy+u5*tky1-u6*tky)
C
                rotyd = tiz1*u3d - tiz*u1d + tjz1*u2d - tjz*u4d + tkz1*
     +            u5d - tkz*u6d
                roty = u3*tiz1 - u1*tiz + u2*tjz1 - u4*tjz + u5*tkz1 - 
     +            u6*tkz
C
C
                u1d = ropd(l, 3) + ropd(l2, 3)
                u1 = rop(l, 3) + rop(l2, 3)
                u2d = ropd(l, 3) + ropd(l3, 3)
                u2 = rop(l, 3) + rop(l3, 3)
                u3d = ropd(l, 3) + ropd(l1, 3)
                u3 = rop(l, 3) + rop(l1, 3)
                u4d = ropd(l, 3) + ropd(l4, 3)
                u4 = rop(l, 3) + rop(l4, 3)
                u5d = ropd(l, 3) + ropd(l5, 3)
                u5 = rop(l, 3) + rop(l5, 3)
Cdvdx
                u6d = ropd(l, 3) + ropd(l6, 3)
                u6 = rop(l, 3) + rop(l6, 3)
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d + tkx1*
     +            u5d - tkx*u6d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx + u5*tkx1 - 
     +            u6*tkx
C
Cdvdz
                rotzd = rotzd + dudxd
                rotz = rotz + dudx
C
                dudxd = tiz1*u3d - tiz*u1d + tjz1*u2d - tjz*u4d + tkz1*
     +            u5d - tkz*u6d
                dudx = u3*tiz1 - u1*tiz + u2*tjz1 - u4*tjz + u5*tkz1 - 
     +            u6*tkz
C
                rotxd = -dudxd
                rotx = -dudx
C
                u1d = ropd(l, 4) + ropd(l2, 4)
                u1 = rop(l, 4) + rop(l2, 4)
                u2d = ropd(l, 4) + ropd(l3, 4)
                u2 = rop(l, 4) + rop(l3, 4)
                u3d = ropd(l, 4) + ropd(l1, 4)
                u3 = rop(l, 4) + rop(l1, 4)
                u4d = ropd(l, 4) + ropd(l4, 4)
                u4 = rop(l, 4) + rop(l4, 4)
                u5d = ropd(l, 4) + ropd(l5, 4)
                u5 = rop(l, 4) + rop(l5, 4)
Cdwdx
                u6d = ropd(l, 4) + ropd(l6, 4)
                u6 = rop(l, 4) + rop(l6, 4)
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d + tkx1*
     +            u5d - tkx*u6d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx + u5*tkx1 - 
     +            u6*tkx
C
Cdwdy
                rotyd = rotyd - dudxd
                roty = roty - dudx
                dudxd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d + tky1*
     +            u5d - tky*u6d
                dudx = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy + u5*tky1 - 
     +            u6*tky
C
C! mise a jour rot et auijuij par le volume
                rotxd = rotxd + dudxd
                rotx = rotx + dudx
C
                xvol = 0.5/vol(lvo)
Cformulation compressible complete
                arg1d = rotxd*rotx + rotx*rotxd + rotyd*roty + roty*
     +            rotyd + rotzd*rotz + rotz*rotzd
                arg1 = rotx*rotx + roty*roty + rotz*rotz
                IF (arg1 .EQ. 0.0) THEN
                  result1d = 0.D0
                ELSE
                  result1d = arg1d/(2.0*SQRT(arg1))
                END IF
                result1 = SQRT(arg1)
                rotd = xvol*result1d
                rot = result1*xvol
C
                u1d = ropd(l, 6) + ropd(l2, 6)
                u1 = rop(l, 6) + rop(l2, 6)
                u2d = ropd(l, 6) + ropd(l3, 6)
                u2 = rop(l, 6) + rop(l3, 6)
                u3d = ropd(l, 6) + ropd(l1, 6)
                u3 = rop(l, 6) + rop(l1, 6)
                u4d = ropd(l, 6) + ropd(l4, 6)
                u4 = rop(l, 6) + rop(l4, 6)
                u5d = ropd(l, 6) + ropd(l5, 6)
                u5 = rop(l, 6) + rop(l5, 6)
Cdudx
                u6d = ropd(l, 6) + ropd(l6, 6)
                u6 = rop(l, 6) + rop(l6, 6)
Cdudy
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d + tkx1*
     +            u5d - tkx*u6d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx + u5*tkx1 - 
     +            u6*tkx
C
Cdudz
                dudyd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d + tky1*
     +            u5d - tky*u6d
                dudy = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy + u5*tky1 - 
     +            u6*tky
                dudzd = tiz1*u3d - tiz*u1d + tjz1*u2d - tjz*u4d + tkz1*
     +            u5d - tkz*u6d
                dudz = u3*tiz1 - u1*tiz + u2*tjz1 - u4*tjz + u5*tkz1 - 
     +            u6*tkz
C
C
                u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
                u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
                u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
                u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
                u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
                u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
                u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
                u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
                u5d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l5, 6)*rop(l5, 1) + rop(l5, 6)*ropd(l5, 1)
                u5 = rop(l, 6)*rop(l, 1) + rop(l5, 6)*rop(l5, 1)
Cdudx
                u6d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l6, 6)*rop(l6, 1) + rop(l6, 6)*ropd(l6, 1)
                u6 = rop(l, 6)*rop(l, 1) + rop(l6, 6)*rop(l6, 1)
Cdudy
                dudxd = dudxd*(u3*tix1-u1*tix+u2*tjx1-u4*tjx+u5*tkx1-u6*
     +            tkx) + dudx*(tix1*u3d-tix*u1d+tjx1*u2d-tjx*u4d+tkx1*
     +            u5d-tkx*u6d)
                dudx = dudx*(u3*tix1-u1*tix+u2*tjx1-u4*tjx+u5*tkx1-u6*
     +            tkx)
C
Cdudz
                dudyd = dudyd*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy+u5*tky1-u6*
     +            tky) + dudy*(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d+tky1*
     +            u5d-tky*u6d)
                dudy = dudy*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy+u5*tky1-u6*
     +            tky)
C
                dudzd = dudzd*(u3*tiz1-u1*tiz+u2*tjz1-u4*tjz+u5*tkz1-u6*
     +            tkz) + dudz*(tiz1*u3d-tiz*u1d+tjz1*u2d-tjz*u4d+tkz1*
     +            u5d-tkz*u6d)
                dudz = dudz*(u3*tiz1-u1*tiz+u2*tjz1-u4*tjz+u5*tkz1-u6*
     +            tkz)
C
                anviscd = c1*xvol**2*(dudxd+dudyd+dudzd)
                anvisc = c1*(dudx+dudy+dudz)*xvol*xvol
                arg1d = temp01*ropd(l, 5)
                arg1 = rop(l, 5)*temp01
                IF (arg1 .EQ. 0.0) THEN
                  result1d = 0.D0
                ELSE
                  result1d = arg1d/(2.0*SQRT(arg1))
                END IF
                result1 = SQRT(arg1)
                amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut*
     +            result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/rop(l
     +            , 5))**2
                amulam = coesut*result1/(1.+cmus1/rop(l, 5))
                anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam**
     +            2
                anulam = rop(l, 1)/amulam
                IF (rop(l, 6) .LT. 1.e-27) THEN
                  anutild = 1.e-27
                  anutildd = 0.0
                ELSE
                  anutildd = ropd(l, 6)
                  anutild = rop(l, 6)
                END IF
                IF (anutild*anulam .LT. 1.e-7) THEN
                  chi = 1.e-7
                  chid = 0.0
                ELSE
                  chid = anutildd*anulam + anutild*anulamd
                  chi = anutild*anulam
                END IF
C
C
                f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +            chi**3+357.911)**2
                f1 = chi**3/(chi**3+357.911)
                f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+chi
     +            *f1)**2)
                f2 = 1. - chi/(1.+chi*f1)
                IF (dlng(l) .LT. 1.e-27) THEN
                  dist = 1.e-27
                ELSE
                  dist = dlng(l)
                END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
                stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*
     +            dist*dist)
                stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
                prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(
     +            stildd*anutild+stild*anutildd))
                prod = rop(l, 1)*0.1355*stild*anutild
                IF (stild .LT. 0.00000000000000000001) THEN
                  stild = 0.00000000000000000001
                  stildd = 0.0
                ELSE
                  stild = stild
                END IF
                rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*
     +            dist**2*stildd)/(stild*0.41*0.41*dist*dist)**2
                r = anutild/(stild*0.41*0.41*dist*dist)
                IF (r .GT. 10.) THEN
                  r = 10.
                  rd = 0.0
                ELSE
                  r = r
                END IF
                gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*r+
     +            r**2*rd)*r**2+r**3*(rd*r+r*rd))
                g = r*(1.+0.3*(r*r*r*r*r-1.))
                pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
                pwx1 = (1.+64.)/(g**6+64.)
                IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ. 
     +              INT(1./6.))) THEN
                  pwr1d = pwx1**(1./6.-1)*pwx1d/6.
                ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                  pwr1d = pwx1d
                ELSE
                  pwr1d = 0.0
                END IF
                pwr1 = pwx1**(1./6.)
                fwgd = gd*pwr1 + g*pwr1d
                fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
                destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*anutild
     +            **2/dist**2+rop(l, 1)*fwg*(anutildd*anutild/dist**2+
     +            anutild*anutildd/dist**2))
                destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/dist
     +            )
C
C
                tsourced = prodd + anviscd - destrucd
                tsource = prod + anvisc - destruc
                drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
              ENDDO
            ENDDO
          ENDDO
        END IF
      ELSE IF (param_int(25) .EQ. 1) THEN
C
C
C
C
Cexplicite/implicite 3dhomo
C!!!!
C!!!!
C!!!!
C!!!!
C!!!!
C3dcart
C
C
        IF (param_int(29) .LE. 1 .AND. nitcfg .LE. 1) THEN
Ccalcul implicite, on stocke coe pour ssor SA
C
          icoe_pos = 6
          IF (icoe_pos .GT. param_int(39)) THEN
C$OMP SINGLE 
            WRITE(*, *) 'erreur dim coe: spsource'
C$OMP END SINGLE 
            STOP
          ELSE
C
C
            DO k=ind_loop(5),ind_loop(6)
              DO j=ind_loop(3),ind_loop(4)
                lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(
     +            0+3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(
     +            0)*param_int(0+1)
                ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int
     +            (5)+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5
     +            +4)-1)*param_int(5+2))
CDEC$ IVDEP
                DO l=lij,lij+ind_loop(2)-ind_loop(1)
                  lt = l - ltij
Ccalcul de delta et gradient vitesse
                  lvo = lt
C
                  tix = ti(lt, 1)
                  tiy = ti(lt, 2)
                  tix1 = ti(lt+inci_mtr, 1)
                  tiy1 = ti(lt+inci_mtr, 2)
C
                  tjx = tj(lt, 1)
                  tjy = tj(lt, 2)
                  tjx1 = tj(lt+incj_mtr, 1)
                  tjy1 = tj(lt+incj_mtr, 2)
C
                  tkz = tk(lt, 1)
C
                  l1 = l + 1
                  l2 = l - 1
                  l3 = l + incj
                  l4 = l - incj
                  l5 = l + inck
                  l6 = l - inck
C
                  u1d = ropd(l, 2) + ropd(l2, 2)
                  u1 = rop(l, 2) + rop(l2, 2)
                  u2d = ropd(l, 2) + ropd(l3, 2)
                  u2 = rop(l, 2) + rop(l3, 2)
                  u3d = ropd(l, 2) + ropd(l1, 2)
                  u3 = rop(l, 2) + rop(l1, 2)
                  u4d = ropd(l, 2) + ropd(l4, 2)
                  u4 = rop(l, 2) + rop(l4, 2)
                  u5d = ropd(l, 2) + ropd(l5, 2)
                  u5 = rop(l, 2) + rop(l5, 2)
Cdudy
                  u6d = ropd(l, 2) + ropd(l6, 2)
                  u6 = rop(l, 2) + rop(l6, 2)
C
Cdudz
                  rotzd = -(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
                  rotz = -(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
                  rotyd = tkz*(u5d-u6d)
                  roty = (u5-u6)*tkz
C
                  u1d = ropd(l, 3) + ropd(l2, 3)
                  u1 = rop(l, 3) + rop(l2, 3)
                  u2d = ropd(l, 3) + ropd(l3, 3)
                  u2 = rop(l, 3) + rop(l3, 3)
                  u3d = ropd(l, 3) + ropd(l1, 3)
                  u3 = rop(l, 3) + rop(l1, 3)
                  u4d = ropd(l, 3) + ropd(l4, 3)
                  u4 = rop(l, 3) + rop(l4, 3)
                  u5d = ropd(l, 3) + ropd(l5, 3)
                  u5 = rop(l, 3) + rop(l5, 3)
Cdvdx
                  u6d = ropd(l, 3) + ropd(l6, 3)
                  u6 = rop(l, 3) + rop(l6, 3)
                  dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                  dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
Cdvdy
                  rotzd = rotzd + dudxd
                  rotz = rotz + dudx
C
Cdvdz
                  dudx = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
C
                  dudxd = tkz*(u5d-u6d)
                  dudx = (u5-u6)*tkz
C
                  rotxd = -dudxd
                  rotx = -dudx
C
                  u1d = ropd(l, 4) + ropd(l2, 4)
                  u1 = rop(l, 4) + rop(l2, 4)
                  u2d = ropd(l, 4) + ropd(l3, 4)
                  u2 = rop(l, 4) + rop(l3, 4)
                  u3d = ropd(l, 4) + ropd(l1, 4)
                  u3 = rop(l, 4) + rop(l1, 4)
                  u4d = ropd(l, 4) + ropd(l4, 4)
                  u4 = rop(l, 4) + rop(l4, 4)
                  u5 = rop(l, 4) + rop(l5, 4)
Cdwdx
                  u6 = rop(l, 4) + rop(l6, 4)
                  dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                  dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
Cdwdy
                  rotyd = rotyd - dudxd
                  roty = roty - dudx
                  dudxd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d
                  dudx = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
C
C! mise a jour rot et auijuij par le volume
                  rotxd = rotxd + dudxd
                  rotx = rotx + dudx
C
                  xvol = 0.5/vol(lvo)
Cformulation compressible complete
                  arg1d = rotxd*rotx + rotx*rotxd + rotyd*roty + roty*
     +              rotyd + rotzd*rotz + rotz*rotzd
                  arg1 = rotx*rotx + roty*roty + rotz*rotz
                  IF (arg1 .EQ. 0.0) THEN
                    result1d = 0.D0
                  ELSE
                    result1d = arg1d/(2.0*SQRT(arg1))
                  END IF
                  result1 = SQRT(arg1)
                  rotd = xvol*result1d
                  rot = result1*xvol
C
                  u1d = ropd(l, 6) + ropd(l2, 6)
                  u1 = rop(l, 6) + rop(l2, 6)
                  u2d = ropd(l, 6) + ropd(l3, 6)
                  u2 = rop(l, 6) + rop(l3, 6)
                  u3d = ropd(l, 6) + ropd(l1, 6)
                  u3 = rop(l, 6) + rop(l1, 6)
                  u4d = ropd(l, 6) + ropd(l4, 6)
                  u4 = rop(l, 6) + rop(l4, 6)
                  u5d = ropd(l, 6) + ropd(l5, 6)
                  u5 = rop(l, 6) + rop(l5, 6)
Cdudx
                  u6d = ropd(l, 6) + ropd(l6, 6)
                  u6 = rop(l, 6) + rop(l6, 6)
Cdudy
                  dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                  dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
Cdudz
                  dudyd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d
                  dudy = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
                  dudzd = tkz*(u5d-u6d)
                  dudz = (u5-u6)*tkz
C
C
                  u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
                  u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
                  u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
                  u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
                  u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
                  u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
                  u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
                  u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
                  u5d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l5, 6)*rop(l5, 1) + rop(l5, 6)*ropd(l5, 1)
                  u5 = rop(l, 6)*rop(l, 1) + rop(l5, 6)*rop(l5, 1)
Cdudx
                  u6d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l6, 6)*rop(l6, 1) + rop(l6, 6)*ropd(l6, 1)
                  u6 = rop(l, 6)*rop(l, 1) + rop(l6, 6)*rop(l6, 1)
Cdudy
                  dudxd = dudxd*(u3*tix1-u1*tix+u2*tjx1-u4*tjx) + dudx*(
     +              tix1*u3d-tix*u1d+tjx1*u2d-tjx*u4d)
                  dudx = dudx*(u3*tix1-u1*tix+u2*tjx1-u4*tjx)
C
Cdudz
                  dudyd = dudyd*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy) + dudy*(
     +              tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
                  dudy = dudy*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
                  dudzd = tkz*(dudzd*(u5-u6)+dudz*(u5d-u6d))
                  dudz = dudz*(u5-u6)*tkz
C
                  anviscd = c1*xvol**2*(dudxd+dudyd+dudzd)
                  anvisc = c1*(dudx+dudy+dudz)*xvol*xvol
                  arg1d = temp01*ropd(l, 5)
                  arg1 = rop(l, 5)*temp01
                  IF (arg1 .EQ. 0.0) THEN
                    result1d = 0.D0
                  ELSE
                    result1d = arg1d/(2.0*SQRT(arg1))
                  END IF
                  result1 = SQRT(arg1)
                  amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut
     +              *result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/
     +              rop(l, 5))**2
                  amulam = coesut*result1/(1.+cmus1/rop(l, 5))
                  anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam
     +              **2
                  anulam = rop(l, 1)/amulam
                  IF (rop(l, 6) .LT. 1.e-27) THEN
                    anutild = 1.e-27
                    anutildd = 0.0
                  ELSE
                    anutildd = ropd(l, 6)
                    anutild = rop(l, 6)
                  END IF
                  IF (anutild*anulam .LT. 1.e-7) THEN
                    chi = 1.e-7
                    chid = 0.0
                  ELSE
                    chid = anutildd*anulam + anutild*anulamd
                    chi = anutild*anulam
                  END IF
C
C
                  f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +              chi**3+357.911)**2
                  f1 = chi**3/(chi**3+357.911)
                  f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+
     +              chi*f1)**2)
                  f2 = 1. - chi/(1.+chi*f1)
                  IF (dlng(l) .LT. 1.e-27) THEN
                    dist = 1.e-27
                  ELSE
                    dist = dlng(l)
                  END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
                  stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*
     +              dist*dist)
                  stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
                  prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(
     +              stildd*anutild+stild*anutildd))
                  prod = rop(l, 1)*0.1355*stild*anutild
                  IF (stild .LT. 0.00000000000000000001) THEN
                    stild = 0.00000000000000000001
                    stildd = 0.0
                  ELSE
                    stild = stild
                  END IF
                  rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*
     +              dist**2*stildd)/(stild*0.41*0.41*dist*dist)**2
                  r = anutild/(stild*0.41*0.41*dist*dist)
                  IF (r .GT. 10.) THEN
                    r = 10.
                    rd = 0.0
                  ELSE
                    r = r
                  END IF
                  gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*
     +              r+r**2*rd)*r**2+r**3*(rd*r+r*rd))
                  g = r*(1.+0.3*(r*r*r*r*r-1.))
                  pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
                  pwx1 = (1.+64.)/(g**6+64.)
                  IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ.
     +                INT(1./6.))) THEN
                    pwr1d = pwx1**(1./6.-1)*pwx1d/6.
                  ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                    pwr1d = pwx1d
                  ELSE
                    pwr1d = 0.0
                  END IF
                  pwr1 = pwx1**(1./6.)
                  fwgd = gd*pwr1 + g*pwr1d
                  fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
                  destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*
     +              anutild**2/dist**2+rop(l, 1)*fwg*(anutildd*anutild/
     +              dist**2+anutild*anutildd/dist**2))
                  destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/
     +              dist)
C
C
Cpour la Jacobienne (linearisation du terme visqueux)
                  tsourced = prodd + anviscd - destrucd
                  tsource = prod + anvisc - destruc
                  tsourceb = prod - destruc
                  amutild = anutild*rop(l, 1)
                  IF (amutild .LT. 0.0000000000000001) THEN
                    amutild = 0.0000000000000001
                  ELSE
                    amutild = amutild
                  END IF
                  tsourcenu = vol(lvo)*tsourceb/amutild
                  IF (tsourcenu .GT. 0.) THEN
                    min2 = 0.
                  ELSE
                    min2 = tsourcenu
                  END IF
C
                  drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
                ENDDO
              ENDDO
            ENDDO
          END IF
        ELSE
C
Ccalcul explicit, Stockage terme source inutile
C
          DO k=ind_loop(5),ind_loop(6)
            DO j=ind_loop(3),ind_loop(4)
              lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+
     +          3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1)
              ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5
     +          )+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-
     +          1)*param_int(5+2))
CDEC$ IVDEP
              DO l=lij,lij+ind_loop(2)-ind_loop(1)
                lt = l - ltij
Ccalcul de delta et gradient vitesse
                lvo = lt
C
                tix = ti(lt, 1)
                tiy = ti(lt, 2)
                tix1 = ti(lt+inci_mtr, 1)
                tiy1 = ti(lt+inci_mtr, 2)
C
                tjx = tj(lt, 1)
                tjy = tj(lt, 2)
                tjx1 = tj(lt+incj_mtr, 1)
                tjy1 = tj(lt+incj_mtr, 2)
C
                tkz = tk(lt, 1)
C
                l1 = l + 1
                l2 = l - 1
                l3 = l + incj
                l4 = l - incj
                l5 = l + inck
                l6 = l - inck
C
                u1d = ropd(l, 2) + ropd(l2, 2)
                u1 = rop(l, 2) + rop(l2, 2)
                u2d = ropd(l, 2) + ropd(l3, 2)
                u2 = rop(l, 2) + rop(l3, 2)
                u3d = ropd(l, 2) + ropd(l1, 2)
                u3 = rop(l, 2) + rop(l1, 2)
                u4d = ropd(l, 2) + ropd(l4, 2)
                u4 = rop(l, 2) + rop(l4, 2)
                u5d = ropd(l, 2) + ropd(l5, 2)
                u5 = rop(l, 2) + rop(l5, 2)
Cdudy
                u6d = ropd(l, 2) + ropd(l6, 2)
                u6 = rop(l, 2) + rop(l6, 2)
C
Cdudz
                rotzd = -(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
                rotz = -(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
                rotyd = tkz*(u5d-u6d)
                roty = (u5-u6)*tkz
C
                u1d = ropd(l, 3) + ropd(l2, 3)
                u1 = rop(l, 3) + rop(l2, 3)
                u2d = ropd(l, 3) + ropd(l3, 3)
                u2 = rop(l, 3) + rop(l3, 3)
                u3d = ropd(l, 3) + ropd(l1, 3)
                u3 = rop(l, 3) + rop(l1, 3)
                u4d = ropd(l, 3) + ropd(l4, 3)
                u4 = rop(l, 3) + rop(l4, 3)
                u5d = ropd(l, 3) + ropd(l5, 3)
                u5 = rop(l, 3) + rop(l5, 3)
Cdvdx
                u6d = ropd(l, 3) + ropd(l6, 3)
                u6 = rop(l, 3) + rop(l6, 3)
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
Cdvdy
                rotzd = rotzd + dudxd
                rotz = rotz + dudx
C
Cdvdz
                dudx = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
C
                dudxd = tkz*(u5d-u6d)
                dudx = (u5-u6)*tkz
C
                rotxd = -dudxd
                rotx = -dudx
C
                u1d = ropd(l, 4) + ropd(l2, 4)
                u1 = rop(l, 4) + rop(l2, 4)
                u2d = ropd(l, 4) + ropd(l3, 4)
                u2 = rop(l, 4) + rop(l3, 4)
                u3d = ropd(l, 4) + ropd(l1, 4)
                u3 = rop(l, 4) + rop(l1, 4)
                u4d = ropd(l, 4) + ropd(l4, 4)
                u4 = rop(l, 4) + rop(l4, 4)
                u5 = rop(l, 4) + rop(l5, 4)
Cdwdx
                u6 = rop(l, 4) + rop(l6, 4)
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
Cdwdy
                rotyd = rotyd - dudxd
                roty = roty - dudx
                dudxd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d
                dudx = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
C
C! mise a jour rot et auijuij par le volume
                rotxd = rotxd + dudxd
                rotx = rotx + dudx
C
                xvol = 0.5/vol(lvo)
Cformulation compressible complete
                arg1d = rotxd*rotx + rotx*rotxd + rotyd*roty + roty*
     +            rotyd + rotzd*rotz + rotz*rotzd
                arg1 = rotx*rotx + roty*roty + rotz*rotz
                IF (arg1 .EQ. 0.0) THEN
                  result1d = 0.D0
                ELSE
                  result1d = arg1d/(2.0*SQRT(arg1))
                END IF
                result1 = SQRT(arg1)
                rotd = xvol*result1d
                rot = result1*xvol
C
                u1d = ropd(l, 6) + ropd(l2, 6)
                u1 = rop(l, 6) + rop(l2, 6)
                u2d = ropd(l, 6) + ropd(l3, 6)
                u2 = rop(l, 6) + rop(l3, 6)
                u3d = ropd(l, 6) + ropd(l1, 6)
                u3 = rop(l, 6) + rop(l1, 6)
                u4d = ropd(l, 6) + ropd(l4, 6)
                u4 = rop(l, 6) + rop(l4, 6)
                u5d = ropd(l, 6) + ropd(l5, 6)
                u5 = rop(l, 6) + rop(l5, 6)
Cdudx
                u6d = ropd(l, 6) + ropd(l6, 6)
                u6 = rop(l, 6) + rop(l6, 6)
Cdudy
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
Cdudz
                dudyd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d
                dudy = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
                dudzd = tkz*(u5d-u6d)
                dudz = (u5-u6)*tkz
C
C
                u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
                u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
                u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
                u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
                u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
                u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
                u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
                u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
                u5d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l5, 6)*rop(l5, 1) + rop(l5, 6)*ropd(l5, 1)
                u5 = rop(l, 6)*rop(l, 1) + rop(l5, 6)*rop(l5, 1)
Cdudx
                u6d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l6, 6)*rop(l6, 1) + rop(l6, 6)*ropd(l6, 1)
                u6 = rop(l, 6)*rop(l, 1) + rop(l6, 6)*rop(l6, 1)
Cdudy
                dudxd = dudxd*(u3*tix1-u1*tix+u2*tjx1-u4*tjx) + dudx*(
     +            tix1*u3d-tix*u1d+tjx1*u2d-tjx*u4d)
                dudx = dudx*(u3*tix1-u1*tix+u2*tjx1-u4*tjx)
C
Cdudz
                dudyd = dudyd*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy) + dudy*(
     +            tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
                dudy = dudy*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
                dudzd = tkz*(dudzd*(u5-u6)+dudz*(u5d-u6d))
                dudz = dudz*(u5-u6)*tkz
C
                anviscd = c1*xvol**2*(dudxd+dudyd+dudzd)
                anvisc = c1*(dudx+dudy+dudz)*xvol*xvol
                arg1d = temp01*ropd(l, 5)
                arg1 = rop(l, 5)*temp01
                IF (arg1 .EQ. 0.0) THEN
                  result1d = 0.D0
                ELSE
                  result1d = arg1d/(2.0*SQRT(arg1))
                END IF
                result1 = SQRT(arg1)
                amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut*
     +            result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/rop(l
     +            , 5))**2
                amulam = coesut*result1/(1.+cmus1/rop(l, 5))
                anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam**
     +            2
                anulam = rop(l, 1)/amulam
                IF (rop(l, 6) .LT. 1.e-27) THEN
                  anutild = 1.e-27
                  anutildd = 0.0
                ELSE
                  anutildd = ropd(l, 6)
                  anutild = rop(l, 6)
                END IF
                IF (anutild*anulam .LT. 1.e-7) THEN
                  chi = 1.e-7
                  chid = 0.0
                ELSE
                  chid = anutildd*anulam + anutild*anulamd
                  chi = anutild*anulam
                END IF
C
C
                f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +            chi**3+357.911)**2
                f1 = chi**3/(chi**3+357.911)
                f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+chi
     +            *f1)**2)
                f2 = 1. - chi/(1.+chi*f1)
                IF (dlng(l) .LT. 1.e-27) THEN
                  dist = 1.e-27
                ELSE
                  dist = dlng(l)
                END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
                stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*
     +            dist*dist)
                stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
                prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(
     +            stildd*anutild+stild*anutildd))
                prod = rop(l, 1)*0.1355*stild*anutild
                IF (stild .LT. 0.00000000000000000001) THEN
                  stild = 0.00000000000000000001
                  stildd = 0.0
                ELSE
                  stild = stild
                END IF
                rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*
     +            dist**2*stildd)/(stild*0.41*0.41*dist*dist)**2
                r = anutild/(stild*0.41*0.41*dist*dist)
                IF (r .GT. 10.) THEN
                  r = 10.
                  rd = 0.0
                ELSE
                  r = r
                END IF
                gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*r+
     +            r**2*rd)*r**2+r**3*(rd*r+r*rd))
                g = r*(1.+0.3*(r*r*r*r*r-1.))
                pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
                pwx1 = (1.+64.)/(g**6+64.)
                IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ. 
     +              INT(1./6.))) THEN
                  pwr1d = pwx1**(1./6.-1)*pwx1d/6.
                ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                  pwr1d = pwx1d
                ELSE
                  pwr1d = 0.0
                END IF
                pwr1 = pwx1**(1./6.)
                fwgd = gd*pwr1 + g*pwr1d
                fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
                destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*anutild
     +            **2/dist**2+rop(l, 1)*fwg*(anutildd*anutild/dist**2+
     +            anutild*anutildd/dist**2))
                destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/dist
     +            )
C
C
                tsourced = prodd + anviscd - destrucd
                tsource = prod + anvisc - destruc
                drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
              ENDDO
            ENDDO
          ENDDO
        END IF
      ELSE IF (param_int(25) .EQ. 2) THEN
C
C
C
C
Cmetric
C
C
        lt = 1 + (1+param_int(5+3)-1)*param_int(5) + (1+param_int(5+3)-1
     +    )*param_int(5+1) + (1+param_int(5+4)-1)*param_int(5+2)
        lvo = lt
        tix = ti(lt, 1)
        tjy = tj(lt, 1)
        tkz = tk(lt, 1)
        IF (tix .GE. 0.) THEN
          si = tix
        ELSE
          si = -tix
        END IF
        IF (tjy .GE. 0.) THEN
          sj = tjy
        ELSE
          sj = -tjy
        END IF
        IF (tkz .GE. 0.) THEN
          sk = tkz
        ELSE
          sk = -tkz
        END IF
        IF (si .GT. sj) THEN
          IF (sj .GT. sk) THEN
            sph2 = sk
          ELSE
            sph2 = sj
          END IF
        ELSE IF (si .GT. sk) THEN
          sph2 = sk
        ELSE
          sph2 = si
        END IF
        sph2 = vol(lvo)/sph2
        voldes = vol(lvo)
        xvol = 0.5/vol(lvo)
Cexplicite/implicite 3dcart
C!!!!
C!!!!
C!!!!
C!!!!
C!!!!
C2D     
C
        IF (param_int(29) .LE. 1 .AND. nitcfg .LE. 1) THEN
Ccalcul implicite, on stocke coe pour ssor SA
C
          icoe_pos = 6
          IF (icoe_pos .GT. param_int(39)) THEN
C$OMP SINGLE 
            WRITE(*, *) 'erreur dim coe: spsource'
C$OMP END SINGLE 
            STOP
          ELSE
C
            DO k=ind_loop(5),ind_loop(6)
              DO j=ind_loop(3),ind_loop(4)
                lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(
     +            0+3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(
     +            0)*param_int(0+1)
CDEC$ IVDEP
                DO l=lij,lij+ind_loop(2)-ind_loop(1)
C
                  l1 = l + 1
                  l2 = l - 1
                  l3 = l + incj
                  l4 = l - incj
                  l5 = l + inck
                  l6 = l - inck
C
                  u1 = rop(l, 2) + rop(l2, 2)
                  u2d = ropd(l, 2) + ropd(l3, 2)
                  u2 = rop(l, 2) + rop(l3, 2)
                  u3 = rop(l, 2) + rop(l1, 2)
                  u4d = ropd(l, 2) + ropd(l4, 2)
                  u4 = rop(l, 2) + rop(l4, 2)
                  u5d = ropd(l, 2) + ropd(l5, 2)
                  u5 = rop(l, 2) + rop(l5, 2)
Cdudy
                  u6d = ropd(l, 2) + ropd(l6, 2)
                  u6 = rop(l, 2) + rop(l6, 2)
C
Cdudz
                  rotzd = -(tjy*(u2d-u4d))
                  rotz = -((u2-u4)*tjy)
C
                  rotyd = tkz*(u5d-u6d)
                  roty = (u5-u6)*tkz
C
                  u1d = ropd(l, 3) + ropd(l2, 3)
                  u1 = rop(l, 3) + rop(l2, 3)
                  u2 = rop(l, 3) + rop(l3, 3)
                  u3d = ropd(l, 3) + ropd(l1, 3)
                  u3 = rop(l, 3) + rop(l1, 3)
                  u4 = rop(l, 3) + rop(l4, 3)
                  u5d = ropd(l, 3) + ropd(l5, 3)
                  u5 = rop(l, 3) + rop(l5, 3)
Cdvdx
                  u6d = ropd(l, 3) + ropd(l6, 3)
                  u6 = rop(l, 3) + rop(l6, 3)
                  dudxd = tix*(u3d-u1d)
                  dudx = (u3-u1)*tix
C
Cdvdz
                  rotzd = rotzd + dudxd
                  rotz = rotz + dudx
C
                  dudxd = tkz*(u5d-u6d)
                  dudx = (u5-u6)*tkz
C
                  rotxd = -dudxd
                  rotx = -dudx
C
                  u1d = ropd(l, 4) + ropd(l2, 4)
                  u1 = rop(l, 4) + rop(l2, 4)
                  u2d = ropd(l, 4) + ropd(l3, 4)
                  u2 = rop(l, 4) + rop(l3, 4)
                  u3d = ropd(l, 4) + ropd(l1, 4)
                  u3 = rop(l, 4) + rop(l1, 4)
                  u4d = ropd(l, 4) + ropd(l4, 4)
                  u4 = rop(l, 4) + rop(l4, 4)
                  u5 = rop(l, 4) + rop(l5, 4)
Cdwdx
                  u6 = rop(l, 4) + rop(l6, 4)
                  dudxd = tix*(u3d-u1d)
                  dudx = (u3-u1)*tix
C
Cdwdy
                  rotyd = rotyd - dudxd
                  roty = roty - dudx
                  dudxd = tjy*(u2d-u4d)
                  dudx = (u2-u4)*tjy
C
C! mise a jour rot et auijuij par le volume
                  rotxd = rotxd + dudxd
                  rotx = rotx + dudx
C
Cformulation compressible complete
                  arg1d = rotxd*rotx + rotx*rotxd + rotyd*roty + roty*
     +              rotyd + rotzd*rotz + rotz*rotzd
                  arg1 = rotx*rotx + roty*roty + rotz*rotz
                  IF (arg1 .EQ. 0.0) THEN
                    result1d = 0.D0
                  ELSE
                    result1d = arg1d/(2.0*SQRT(arg1))
                  END IF
                  result1 = SQRT(arg1)
                  rotd = xvol*result1d
                  rot = result1*xvol
C
                  u1d = ropd(l, 6) + ropd(l2, 6)
                  u1 = rop(l, 6) + rop(l2, 6)
                  u2d = ropd(l, 6) + ropd(l3, 6)
                  u2 = rop(l, 6) + rop(l3, 6)
                  u3d = ropd(l, 6) + ropd(l1, 6)
                  u3 = rop(l, 6) + rop(l1, 6)
                  u4d = ropd(l, 6) + ropd(l4, 6)
                  u4 = rop(l, 6) + rop(l4, 6)
                  u5d = ropd(l, 6) + ropd(l5, 6)
                  u5 = rop(l, 6) + rop(l5, 6)
Cdudx
                  u6d = ropd(l, 6) + ropd(l6, 6)
                  u6 = rop(l, 6) + rop(l6, 6)
Cdudy
                  dudxd = tix*(u3d-u1d)
                  dudx = (u3-u1)*tix
C
Cdudz
                  dudyd = tjy*(u2d-u4d)
                  dudy = (u2-u4)*tjy
                  dudzd = tkz*(u5d-u6d)
                  dudz = (u5-u6)*tkz
C
C
                  u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
                  u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
                  u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
                  u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
                  u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
                  u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
                  u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
                  u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
                  u5d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l5, 6)*rop(l5, 1) + rop(l5, 6)*ropd(l5, 1)
                  u5 = rop(l, 6)*rop(l, 1) + rop(l5, 6)*rop(l5, 1)
Cdudx
                  u6d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + 
     +              ropd(l6, 6)*rop(l6, 1) + rop(l6, 6)*ropd(l6, 1)
                  u6 = rop(l, 6)*rop(l, 1) + rop(l6, 6)*rop(l6, 1)
Cdudy
                  dudxd = tix*(dudxd*(u3-u1)+dudx*(u3d-u1d))
                  dudx = dudx*(u3-u1)*tix
C
Cdudz
                  dudyd = tjy*(dudyd*(u2-u4)+dudy*(u2d-u4d))
                  dudy = dudy*(u2-u4)*tjy
C
                  dudzd = tkz*(dudzd*(u5-u6)+dudz*(u5d-u6d))
                  dudz = dudz*(u5-u6)*tkz
C
                  anviscd = c1*xvol**2*(dudxd+dudyd+dudzd)
                  anvisc = c1*(dudx+dudy+dudz)*xvol*xvol
                  arg1d = temp01*ropd(l, 5)
                  arg1 = rop(l, 5)*temp01
                  IF (arg1 .EQ. 0.0) THEN
                    result1d = 0.D0
                  ELSE
                    result1d = arg1d/(2.0*SQRT(arg1))
                  END IF
                  result1 = SQRT(arg1)
                  amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut
     +              *result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/
     +              rop(l, 5))**2
                  amulam = coesut*result1/(1.+cmus1/rop(l, 5))
                  anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam
     +              **2
                  anulam = rop(l, 1)/amulam
                  IF (rop(l, 6) .LT. 1.e-27) THEN
                    anutild = 1.e-27
                    anutildd = 0.0
                  ELSE
                    anutildd = ropd(l, 6)
                    anutild = rop(l, 6)
                  END IF
                  IF (anutild*anulam .LT. 1.e-7) THEN
                    chi = 1.e-7
                    chid = 0.0
                  ELSE
                    chid = anutildd*anulam + anutild*anulamd
                    chi = anutild*anulam
                  END IF
C
C
                  f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +              chi**3+357.911)**2
                  f1 = chi**3/(chi**3+357.911)
                  f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+
     +              chi*f1)**2)
                  f2 = 1. - chi/(1.+chi*f1)
                  IF (dlng(l) .LT. 1.e-27) THEN
                    dist = 1.e-27
                  ELSE
                    dist = dlng(l)
                  END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
                  stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*
     +              dist*dist)
                  stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
                  prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(
     +              stildd*anutild+stild*anutildd))
                  prod = rop(l, 1)*0.1355*stild*anutild
                  IF (stild .LT. 0.00000000000000000001) THEN
                    stild = 0.00000000000000000001
                    stildd = 0.0
                  ELSE
                    stild = stild
                  END IF
                  rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*
     +              dist**2*stildd)/(stild*0.41*0.41*dist*dist)**2
                  r = anutild/(stild*0.41*0.41*dist*dist)
                  IF (r .GT. 10.) THEN
                    r = 10.
                    rd = 0.0
                  ELSE
                    r = r
                  END IF
                  gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*
     +              r+r**2*rd)*r**2+r**3*(rd*r+r*rd))
                  g = r*(1.+0.3*(r*r*r*r*r-1.))
                  pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
                  pwx1 = (1.+64.)/(g**6+64.)
                  IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ.
     +                INT(1./6.))) THEN
                    pwr1d = pwx1**(1./6.-1)*pwx1d/6.
                  ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                    pwr1d = pwx1d
                  ELSE
                    pwr1d = 0.0
                  END IF
                  pwr1 = pwx1**(1./6.)
                  fwgd = gd*pwr1 + g*pwr1d
                  fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
                  destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*
     +              anutild**2/dist**2+rop(l, 1)*fwg*(anutildd*anutild/
     +              dist**2+anutild*anutildd/dist**2))
                  destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/
     +              dist)
C
C
Cpour la Jacobienne (linearisation du terme visqueux)
                  tsourced = prodd + anviscd - destrucd
                  tsource = prod + anvisc - destruc
                  tsourceb = prod - destruc
                  amutild = anutild*rop(l, 1)
                  IF (amutild .LT. 0.0000000000000001) THEN
                    amutild = 0.0000000000000001
                  ELSE
                    amutild = amutild
                  END IF
                  tsourcenu = vol(lvo)*tsourceb/amutild
                  IF (tsourcenu .GT. 0.) THEN
                    min3 = 0.
                  ELSE
                    min3 = tsourcenu
                  END IF
C
                  drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
                ENDDO
              ENDDO
            ENDDO
          END IF
        ELSE
C
Ccalcul explicit, Stockage terme source inutile
C
          DO k=ind_loop(5),ind_loop(6)
            DO j=ind_loop(3),ind_loop(4)
              lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+
     +          3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1)
CDEC$ IVDEP
              DO l=lij,lij+ind_loop(2)-ind_loop(1)
C
                l1 = l + 1
                l2 = l - 1
                l3 = l + incj
                l4 = l - incj
                l5 = l + inck
                l6 = l - inck
C
                u1 = rop(l, 2) + rop(l2, 2)
                u2d = ropd(l, 2) + ropd(l3, 2)
                u2 = rop(l, 2) + rop(l3, 2)
                u3 = rop(l, 2) + rop(l1, 2)
                u4d = ropd(l, 2) + ropd(l4, 2)
                u4 = rop(l, 2) + rop(l4, 2)
                u5d = ropd(l, 2) + ropd(l5, 2)
                u5 = rop(l, 2) + rop(l5, 2)
Cdudy
                u6d = ropd(l, 2) + ropd(l6, 2)
                u6 = rop(l, 2) + rop(l6, 2)
C
Cdudz
                rotzd = -(tjy*(u2d-u4d))
                rotz = -((u2-u4)*tjy)
C
                rotyd = tkz*(u5d-u6d)
                roty = (u5-u6)*tkz
C
                u1d = ropd(l, 3) + ropd(l2, 3)
                u1 = rop(l, 3) + rop(l2, 3)
                u2 = rop(l, 3) + rop(l3, 3)
                u3d = ropd(l, 3) + ropd(l1, 3)
                u3 = rop(l, 3) + rop(l1, 3)
                u4 = rop(l, 3) + rop(l4, 3)
                u5d = ropd(l, 3) + ropd(l5, 3)
                u5 = rop(l, 3) + rop(l5, 3)
Cdvdx
                u6d = ropd(l, 3) + ropd(l6, 3)
                u6 = rop(l, 3) + rop(l6, 3)
                dudxd = tix*(u3d-u1d)
                dudx = (u3-u1)*tix
C
Cdvdz
                rotzd = rotzd + dudxd
                rotz = rotz + dudx
C
                dudxd = tkz*(u5d-u6d)
                dudx = (u5-u6)*tkz
C
                rotxd = -dudxd
                rotx = -dudx
C
                u1d = ropd(l, 4) + ropd(l2, 4)
                u1 = rop(l, 4) + rop(l2, 4)
                u2d = ropd(l, 4) + ropd(l3, 4)
                u2 = rop(l, 4) + rop(l3, 4)
                u3d = ropd(l, 4) + ropd(l1, 4)
                u3 = rop(l, 4) + rop(l1, 4)
                u4d = ropd(l, 4) + ropd(l4, 4)
                u4 = rop(l, 4) + rop(l4, 4)
                u5 = rop(l, 4) + rop(l5, 4)
Cdwdx
                u6 = rop(l, 4) + rop(l6, 4)
                dudxd = tix*(u3d-u1d)
                dudx = (u3-u1)*tix
C
Cdwdy
                rotyd = rotyd - dudxd
                roty = roty - dudx
                dudxd = tjy*(u2d-u4d)
                dudx = (u2-u4)*tjy
C
C! mise a jour rot et auijuij par le volume
                rotxd = rotxd + dudxd
                rotx = rotx + dudx
C
Cformulation compressible complete
                arg1d = rotxd*rotx + rotx*rotxd + rotyd*roty + roty*
     +            rotyd + rotzd*rotz + rotz*rotzd
                arg1 = rotx*rotx + roty*roty + rotz*rotz
                IF (arg1 .EQ. 0.0) THEN
                  result1d = 0.D0
                ELSE
                  result1d = arg1d/(2.0*SQRT(arg1))
                END IF
                result1 = SQRT(arg1)
                rotd = xvol*result1d
                rot = result1*xvol
C
                u1d = ropd(l, 6) + ropd(l2, 6)
                u1 = rop(l, 6) + rop(l2, 6)
                u2d = ropd(l, 6) + ropd(l3, 6)
                u2 = rop(l, 6) + rop(l3, 6)
                u3d = ropd(l, 6) + ropd(l1, 6)
                u3 = rop(l, 6) + rop(l1, 6)
                u4d = ropd(l, 6) + ropd(l4, 6)
                u4 = rop(l, 6) + rop(l4, 6)
                u5d = ropd(l, 6) + ropd(l5, 6)
                u5 = rop(l, 6) + rop(l5, 6)
Cdudx
                u6d = ropd(l, 6) + ropd(l6, 6)
                u6 = rop(l, 6) + rop(l6, 6)
Cdudy
                dudxd = tix*(u3d-u1d)
                dudx = (u3-u1)*tix
C
Cdudz
                dudyd = tjy*(u2d-u4d)
                dudy = (u2-u4)*tjy
                dudzd = tkz*(u5d-u6d)
                dudz = (u5-u6)*tkz
C
C
                u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
                u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
                u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
                u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
                u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
                u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
                u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
                u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
                u5d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l5, 6)*rop(l5, 1) + rop(l5, 6)*ropd(l5, 1)
                u5 = rop(l, 6)*rop(l, 1) + rop(l5, 6)*rop(l5, 1)
Cdudx
                u6d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l6, 6)*rop(l6, 1) + rop(l6, 6)*ropd(l6, 1)
                u6 = rop(l, 6)*rop(l, 1) + rop(l6, 6)*rop(l6, 1)
Cdudy
                dudxd = tix*(dudxd*(u3-u1)+dudx*(u3d-u1d))
                dudx = dudx*(u3-u1)*tix
C
Cdudz
                dudyd = tjy*(dudyd*(u2-u4)+dudy*(u2d-u4d))
                dudy = dudy*(u2-u4)*tjy
C
                dudzd = tkz*(dudzd*(u5-u6)+dudz*(u5d-u6d))
                dudz = dudz*(u5-u6)*tkz
C
                anviscd = c1*xvol**2*(dudxd+dudyd+dudzd)
                anvisc = c1*(dudx+dudy+dudz)*xvol*xvol
                arg1d = temp01*ropd(l, 5)
                arg1 = rop(l, 5)*temp01
                IF (arg1 .EQ. 0.0) THEN
                  result1d = 0.D0
                ELSE
                  result1d = arg1d/(2.0*SQRT(arg1))
                END IF
                result1 = SQRT(arg1)
                amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut*
     +            result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/rop(l
     +            , 5))**2
                amulam = coesut*result1/(1.+cmus1/rop(l, 5))
                anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam**
     +            2
                anulam = rop(l, 1)/amulam
                IF (rop(l, 6) .LT. 1.e-27) THEN
                  anutild = 1.e-27
                  anutildd = 0.0
                ELSE
                  anutildd = ropd(l, 6)
                  anutild = rop(l, 6)
                END IF
                IF (anutild*anulam .LT. 1.e-7) THEN
                  chi = 1.e-7
                  chid = 0.0
                ELSE
                  chid = anutildd*anulam + anutild*anulamd
                  chi = anutild*anulam
                END IF
C
C
                f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +            chi**3+357.911)**2
                f1 = chi**3/(chi**3+357.911)
                f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+chi
     +            *f1)**2)
                f2 = 1. - chi/(1.+chi*f1)
                IF (dlng(l) .LT. 1.e-27) THEN
                  dist = 1.e-27
                ELSE
                  dist = dlng(l)
                END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
                stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*
     +            dist*dist)
                stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
                prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(
     +            stildd*anutild+stild*anutildd))
                prod = rop(l, 1)*0.1355*stild*anutild
                IF (stild .LT. 0.00000000000000000001) THEN
                  stild = 0.00000000000000000001
                  stildd = 0.0
                ELSE
                  stild = stild
                END IF
                rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*
     +            dist**2*stildd)/(stild*0.41*0.41*dist*dist)**2
                r = anutild/(stild*0.41*0.41*dist*dist)
                IF (r .GT. 10.) THEN
                  r = 10.
                  rd = 0.0
                ELSE
                  r = r
                END IF
                gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*r+
     +            r**2*rd)*r**2+r**3*(rd*r+r*rd))
                g = r*(1.+0.3*(r*r*r*r*r-1.))
                pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
                pwx1 = (1.+64.)/(g**6+64.)
                IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ. 
     +              INT(1./6.))) THEN
                  pwr1d = pwx1**(1./6.-1)*pwx1d/6.
                ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                  pwr1d = pwx1d
                ELSE
                  pwr1d = 0.0
                END IF
                pwr1 = pwx1**(1./6.)
                fwgd = gd*pwr1 + g*pwr1d
                fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
                destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*anutild
     +            **2/dist**2+rop(l, 1)*fwg*(anutildd*anutild/dist**2+
     +            anutild*anutildd/dist**2))
                destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/dist
     +            )
C
C
                tsourced = prodd + anviscd - destrucd
                tsource = prod + anvisc - destruc
                drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
              ENDDO
            ENDDO
          ENDDO
        END IF
      ELSE IF (param_int(29) .LE. 1 .AND. nitcfg .LE. 1) THEN
C
C
Cexplicite/implicite
C2d: SA force
C
Ccalcul implicite, on stocke coe pour ssor SA
C
        icoe_pos = 6
        IF (icoe_pos .GT. param_int(39)) THEN
C$OMP SINGLE 
          WRITE(*, *) 'erreur dim coe: spsource'
C$OMP END SINGLE 
          STOP
        ELSE
C
          DO k=ind_loop(5),ind_loop(6)
            DO j=ind_loop(3),ind_loop(4)
              lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+
     +          3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1)
              ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5
     +          )+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-
     +          1)*param_int(5+2))
CDEC$ IVDEP
              DO l=lij,lij+ind_loop(2)-ind_loop(1)
                lt = l - ltij
Ccalcul de delta et gradient vitesse
                lvo = lt
C
                tix = ti(lt, 1)
                tiy = ti(lt, 2)
                tix1 = ti(lt+inci_mtr, 1)
                tiy1 = ti(lt+inci_mtr, 2)
C
                tjx = tj(lt, 1)
                tjy = tj(lt, 2)
                tjx1 = tj(lt+incj_mtr, 1)
                tjy1 = tj(lt+incj_mtr, 2)
C
                l1 = l + 1
                l2 = l - 1
                l3 = l + incj
                l4 = l - incj
C
                u1d = ropd(l, 2) + ropd(l2, 2)
                u1 = rop(l, 2) + rop(l2, 2)
                u2d = ropd(l, 2) + ropd(l3, 2)
                u2 = rop(l, 2) + rop(l3, 2)
                u3d = ropd(l, 2) + ropd(l1, 2)
                u3 = rop(l, 2) + rop(l1, 2)
Cdudy
                u4d = ropd(l, 2) + ropd(l4, 2)
                u4 = rop(l, 2) + rop(l4, 2)
C
                rotzd = -(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
                rotz = -(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
                u1d = ropd(l, 3) + ropd(l2, 3)
                u1 = rop(l, 3) + rop(l2, 3)
                u2d = ropd(l, 3) + ropd(l3, 3)
                u2 = rop(l, 3) + rop(l3, 3)
                u3d = ropd(l, 3) + ropd(l1, 3)
                u3 = rop(l, 3) + rop(l1, 3)
Cdvdx
                u4d = ropd(l, 3) + ropd(l4, 3)
                u4 = rop(l, 3) + rop(l4, 3)
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
C! mise a jour rot et auijuij par le volume
                rotzd = rotzd + dudxd
                rotz = rotz + dudx
C
C
                xvol = 0.5/vol(lvo)
                IF (rotz .GE. 0.) THEN
                  abs0d = rotzd
                  abs0 = rotz
                ELSE
                  abs0d = -rotzd
                  abs0 = -rotz
                END IF
Cformulation compressible complete
                rotd = xvol*abs0d
                rot = abs0*xvol
C
C
                u1d = ropd(l, 6) + ropd(l2, 6)
                u1 = rop(l, 6) + rop(l2, 6)
                u2d = ropd(l, 6) + ropd(l3, 6)
                u2 = rop(l, 6) + rop(l3, 6)
                u3d = ropd(l, 6) + ropd(l1, 6)
                u3 = rop(l, 6) + rop(l1, 6)
Cdudx
                u4d = ropd(l, 6) + ropd(l4, 6)
                u4 = rop(l, 6) + rop(l4, 6)
Cdudy
                dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
                dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
                dudyd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d
                dudy = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
C
                u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
                u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
                u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
                u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
                u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
                u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
Cdudx
                u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd
     +            (l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
                u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
Cdudy
                dudxd = dudxd*(u3*tix1-u1*tix+u2*tjx1-u4*tjx) + dudx*(
     +            tix1*u3d-tix*u1d+tjx1*u2d-tjx*u4d)
                dudx = dudx*(u3*tix1-u1*tix+u2*tjx1-u4*tjx)
C
                dudyd = dudyd*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy) + dudy*(
     +            tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
                dudy = dudy*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
                anviscd = c1*xvol**2*(dudxd+dudyd)
                anvisc = c1*(dudx+dudy)*xvol*xvol
                arg1d = temp01*ropd(l, 5)
                arg1 = rop(l, 5)*temp01
                IF (arg1 .EQ. 0.0) THEN
                  result1d = 0.D0
                ELSE
                  result1d = arg1d/(2.0*SQRT(arg1))
                END IF
                result1 = SQRT(arg1)
                amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut*
     +            result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/rop(l
     +            , 5))**2
                amulam = coesut*result1/(1.+cmus1/rop(l, 5))
                anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam**
     +            2
                anulam = rop(l, 1)/amulam
                IF (rop(l, 6) .LT. 1.e-27) THEN
                  anutild = 1.e-27
                  anutildd = 0.0
                ELSE
                  anutildd = ropd(l, 6)
                  anutild = rop(l, 6)
                END IF
                IF (anutild*anulam .LT. 1.e-7) THEN
                  chi = 1.e-7
                  chid = 0.0
                ELSE
                  chid = anutildd*anulam + anutild*anulamd
                  chi = anutild*anulam
                END IF
C
C
                f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(
     +            chi**3+357.911)**2
                f1 = chi**3/(chi**3+357.911)
                f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+chi
     +            *f1)**2)
                f2 = 1. - chi/(1.+chi*f1)
                IF (dlng(l) .LT. 1.e-27) THEN
                  dist = 1.e-27
                ELSE
                  dist = dlng(l)
                END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
                stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*
     +            dist*dist)
                stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
                prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(
     +            stildd*anutild+stild*anutildd))
                prod = rop(l, 1)*0.1355*stild*anutild
                IF (stild .LT. 0.00000000000000000001) THEN
                  stild = 0.00000000000000000001
                  stildd = 0.0
                ELSE
                  stild = stild
                END IF
                rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*
     +            dist**2*stildd)/(stild*0.41*0.41*dist*dist)**2
                r = anutild/(stild*0.41*0.41*dist*dist)
                IF (r .GT. 10.) THEN
                  r = 10.
                  rd = 0.0
                ELSE
                  r = r
                END IF
                gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*r+
     +            r**2*rd)*r**2+r**3*(rd*r+r*rd))
                g = r*(1.+0.3*(r*r*r*r*r-1.))
                pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
                pwx1 = (1.+64.)/(g**6+64.)
                IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ. 
     +              INT(1./6.))) THEN
                  pwr1d = pwx1**(1./6.-1)*pwx1d/6.
                ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                  pwr1d = pwx1d
                ELSE
                  pwr1d = 0.0
                END IF
                pwr1 = pwx1**(1./6.)
                fwgd = gd*pwr1 + g*pwr1d
                fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
                destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*anutild
     +            **2/dist**2+rop(l, 1)*fwg*(anutildd*anutild/dist**2+
     +            anutild*anutildd/dist**2))
                destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/dist
     +            )
C
C
Cpour la Jacobienne (linearisation du terme visqueux)
                tsourced = prodd + anviscd - destrucd
                tsource = prod + anvisc - destruc
                tsourceb = prod - destruc
                amutild = anutild*rop(l, 1)
                IF (amutild .LT. 0.0000000000000001) THEN
                  amutild = 0.0000000000000001
                ELSE
                  amutild = amutild
                END IF
                tsourcenu = vol(lvo)*tsourceb/amutild
                IF (tsourcenu .GT. 0.) THEN
                  min4 = 0.
                ELSE
                  min4 = tsourcenu
                END IF
C
                drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
              ENDDO
            ENDDO
          ENDDO
        END IF
      ELSE
C
Ccalcul explicit, Stockage terme source inutile
C
        DO k=ind_loop(5),ind_loop(6)
          DO j=ind_loop(3),ind_loop(4)
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1)
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2))
CDEC$ IVDEP
            DO l=lij,lij+ind_loop(2)-ind_loop(1)
              lt = l - ltij
Ccalcul de delta et gradient vitesse
              lvo = lt
C
              tix = ti(lt, 1)
              tiy = ti(lt, 2)
              tix1 = ti(lt+inci_mtr, 1)
              tiy1 = ti(lt+inci_mtr, 2)
C
              tjx = tj(lt, 1)
              tjy = tj(lt, 2)
              tjx1 = tj(lt+incj_mtr, 1)
              tjy1 = tj(lt+incj_mtr, 2)
C
              l1 = l + 1
              l2 = l - 1
              l3 = l + incj
              l4 = l - incj
C
              u1d = ropd(l, 2) + ropd(l2, 2)
              u1 = rop(l, 2) + rop(l2, 2)
              u2d = ropd(l, 2) + ropd(l3, 2)
              u2 = rop(l, 2) + rop(l3, 2)
              u3d = ropd(l, 2) + ropd(l1, 2)
              u3 = rop(l, 2) + rop(l1, 2)
Cdudy
              u4d = ropd(l, 2) + ropd(l4, 2)
              u4 = rop(l, 2) + rop(l4, 2)
C
              rotzd = -(tiy1*u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
              rotz = -(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
              u1d = ropd(l, 3) + ropd(l2, 3)
              u1 = rop(l, 3) + rop(l2, 3)
              u2d = ropd(l, 3) + ropd(l3, 3)
              u2 = rop(l, 3) + rop(l3, 3)
              u3d = ropd(l, 3) + ropd(l1, 3)
              u3 = rop(l, 3) + rop(l1, 3)
Cdvdx
              u4d = ropd(l, 3) + ropd(l4, 3)
              u4 = rop(l, 3) + rop(l4, 3)
              dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
              dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
C! mise a jour rot et auijuij par le volume
              rotzd = rotzd + dudxd
              rotz = rotz + dudx
C
C
              xvol = 0.5/vol(lvo)
              IF (rotz .GE. 0.) THEN
                abs1d = rotzd
                abs1 = rotz
              ELSE
                abs1d = -rotzd
                abs1 = -rotz
              END IF
Cformulation compressible complete
              rotd = xvol*abs1d
              rot = abs1*xvol
C
C
              u1d = ropd(l, 6) + ropd(l2, 6)
              u1 = rop(l, 6) + rop(l2, 6)
              u2d = ropd(l, 6) + ropd(l3, 6)
              u2 = rop(l, 6) + rop(l3, 6)
              u3d = ropd(l, 6) + ropd(l1, 6)
              u3 = rop(l, 6) + rop(l1, 6)
Cdudx
              u4d = ropd(l, 6) + ropd(l4, 6)
              u4 = rop(l, 6) + rop(l4, 6)
Cdudy
              dudxd = tix1*u3d - tix*u1d + tjx1*u2d - tjx*u4d
              dudx = u3*tix1 - u1*tix + u2*tjx1 - u4*tjx
C
              dudyd = tiy1*u3d - tiy*u1d + tjy1*u2d - tjy*u4d
              dudy = u3*tiy1 - u1*tiy + u2*tjy1 - u4*tjy
C
              u1d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd(
     +          l2, 6)*rop(l2, 1) + rop(l2, 6)*ropd(l2, 1)
              u1 = rop(l, 6)*rop(l, 1) + rop(l2, 6)*rop(l2, 1)
              u2d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd(
     +          l3, 6)*rop(l3, 1) + rop(l3, 6)*ropd(l3, 1)
              u2 = rop(l, 6)*rop(l, 1) + rop(l3, 6)*rop(l3, 1)
              u3d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd(
     +          l1, 6)*rop(l1, 1) + rop(l1, 6)*ropd(l1, 1)
              u3 = rop(l, 6)*rop(l, 1) + rop(l1, 6)*rop(l1, 1)
Cdudx
              u4d = ropd(l, 6)*rop(l, 1) + rop(l, 6)*ropd(l, 1) + ropd(
     +          l4, 6)*rop(l4, 1) + rop(l4, 6)*ropd(l4, 1)
              u4 = rop(l, 6)*rop(l, 1) + rop(l4, 6)*rop(l4, 1)
Cdudy
              dudxd = dudxd*(u3*tix1-u1*tix+u2*tjx1-u4*tjx) + dudx*(tix1
     +          *u3d-tix*u1d+tjx1*u2d-tjx*u4d)
              dudx = dudx*(u3*tix1-u1*tix+u2*tjx1-u4*tjx)
C
              dudyd = dudyd*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy) + dudy*(tiy1
     +          *u3d-tiy*u1d+tjy1*u2d-tjy*u4d)
              dudy = dudy*(u3*tiy1-u1*tiy+u2*tjy1-u4*tjy)
C
              anviscd = c1*xvol**2*(dudxd+dudyd)
              anvisc = c1*(dudx+dudy)*xvol*xvol
              arg1d = temp01*ropd(l, 5)
              arg1 = rop(l, 5)*temp01
              IF (arg1 .EQ. 0.0) THEN
                result1d = 0.D0
              ELSE
                result1d = arg1d/(2.0*SQRT(arg1))
              END IF
              result1 = SQRT(arg1)
              amulamd = (coesut*result1d*(1.+cmus1/rop(l, 5))+coesut*
     +          result1*cmus1*ropd(l, 5)/rop(l, 5)**2)/(1.+cmus1/rop(l, 
     +          5))**2
              amulam = coesut*result1/(1.+cmus1/rop(l, 5))
              anulamd = (ropd(l, 1)*amulam-rop(l, 1)*amulamd)/amulam**2
              anulam = rop(l, 1)/amulam
              IF (rop(l, 6) .LT. 1.e-27) THEN
                anutild = 1.e-27
                anutildd = 0.0
              ELSE
                anutildd = ropd(l, 6)
                anutild = rop(l, 6)
              END IF
              IF (anutild*anulam .LT. 1.e-7) THEN
                chi = 1.e-7
                chid = 0.0
              ELSE
                chid = anutildd*anulam + anutild*anulamd
                chi = anutild*anulam
              END IF
C
C
              f1d = (3*chi**2*chid*(chi**3+357.911)-chi**5*3*chid)/(chi
     +          **3+357.911)**2
              f1 = chi**3/(chi**3+357.911)
              f2d = -((chid*(1.+chi*f1)-chi*(chid*f1+chi*f1d))/(1.+chi*
     +          f1)**2)
              f2 = 1. - chi/(1.+chi*f1)
              IF (dlng(l) .LT. 1.e-27) THEN
                dist = 1.e-27
              ELSE
                dist = dlng(l)
              END IF
C
C             stild = rot*(1. + (0.7*0.7*rot + 0.9*stild)
C     &                        /(0.9-2.*0.7*rot-stild)
C     &                   )
C          endif
C
              stildd = rotd + (anutildd*f2+anutild*f2d)/(0.41*0.41*dist*
     +          dist)
              stild = rot + anutild*f2/(0.41*0.41*dist*dist)
C
CCALCUL DU TERME DE DESTRUCTION
CVersion F Renac: commenter limitation stild qui suit
              prodd = 0.1355*(ropd(l, 1)*stild*anutild+rop(l, 1)*(stildd
     +          *anutild+stild*anutildd))
              prod = rop(l, 1)*0.1355*stild*anutild
              IF (stild .LT. 0.00000000000000000001) THEN
                stild = 0.00000000000000000001
                stildd = 0.0
              ELSE
                stild = stild
              END IF
              rd = (anutildd*stild*0.41**2*dist**2-anutild*0.41**2*dist
     +          **2*stildd)/(stild*0.41*0.41*dist*dist)**2
              r = anutild/(stild*0.41*0.41*dist*dist)
              IF (r .GT. 10.) THEN
                r = 10.
                rd = 0.0
              ELSE
                r = r
              END IF
              gd = rd*(1.+0.3*(r*r*r*r*r-1.)) + r*0.3*(((rd*r+r*rd)*r+r
     +          **2*rd)*r**2+r**3*(rd*r+r*rd))
              g = r*(1.+0.3*(r*r*r*r*r-1.))
              pwx1d = -((1.+64.)*6*g**5*gd/(g**6+64.)**2)
              pwx1 = (1.+64.)/(g**6+64.)
              IF (pwx1 .GT. 0.0 .OR. (pwx1 .LT. 0.0 .AND. 1./6. .EQ. INT
     +            (1./6.))) THEN
                pwr1d = pwx1**(1./6.-1)*pwx1d/6.
              ELSE IF (pwx1 .EQ. 0.0 .AND. 1./6. .EQ. 1.0) THEN
                pwr1d = pwx1d
              ELSE
                pwr1d = 0.0
              END IF
              pwr1 = pwx1**(1./6.)
              fwgd = gd*pwr1 + g*pwr1d
              fwg = g*pwr1
C
CCALCUL DU TERME SOURCE GLOBAL
              destrucd = cw1*((ropd(l, 1)*fwg+rop(l, 1)*fwgd)*anutild**2
     +          /dist**2+rop(l, 1)*fwg*(anutildd*anutild/dist**2+anutild
     +          *anutildd/dist**2))
              destruc = rop(l, 1)*cw1*fwg*(anutild/dist)*(anutild/dist)
C
C
              tsourced = prodd + anviscd - destrucd
              tsource = prod + anvisc - destruc
              drodmd(l, 6) = drodmd(l, 6) + vol(lvo)*tsourced
            ENDDO
          ENDDO
        ENDDO
      END IF
      END

