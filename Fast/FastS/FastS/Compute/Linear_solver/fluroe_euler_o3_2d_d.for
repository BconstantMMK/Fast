C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.13 (r6666M) -  1 Mar 2018 15:30
C
C  Differentiation of fluroe_euler_o3_2d in forward (tangent) mode:
C   variations   of useful results: drodm
C   with respect to varying inputs: rop drodm
      SUBROUTINE FLUROE_EULER_O3_2D_D(ndom, ithread, param_int, 
     +                                param_real, ind_dm, ind_loop, 
     +                                ijkv_bloc, ijkv_cache, 
     +                                synchro_send_sock, synchro_send_th
     +                                , synchro_receive_sock, 
     +                                synchro_receive_th, ibloc, jbloc, 
     +                                kbloc, icache, jcache, kcache, rop
     +                                , ropd, drodm, drodmd, wig, venti
     +                                , ventj, ventk, ti, tj, tk, vol, 
     +                                xmut)
      IMPLICIT NONE
C
Climiteur 'minmod'
C
C
Cdo k
C
      REAL souszero
      PARAMETER (souszero=-1e-12)
C
      INTEGER*4 ndom, ithread, nptpsi, icache, jcache, kcache, ibloc, 
     +          jbloc, kbloc, ijkv_bloc(3), ijkv_cache(3), ind_loop(6), 
     +          ind_dm(6), synchro_send_sock(3), synchro_send_th(3), 
     +          synchro_receive_sock(3), synchro_receive_th(3), 
     +          param_int(0:*)
C
      REAL*8 xmut(param_int(41))
      REAL*8 rop(param_int(41)*param_int(36))
      REAL*8 ropd(param_int(41)*param_int(36))
      REAL*8 drodm(param_int(41)*param_int(36))
      REAL*8 drodmd(param_int(41)*param_int(36))
      REAL*8 wig(param_int(41)*3)
      REAL*8 venti(param_int(44)*param_int(40))
      REAL*8 ventj(param_int(44)*param_int(40))
      REAL*8 ventk(param_int(44)*param_int(40))
C
      REAL*8 ti(param_int(43)*param_int(37)), tj(param_int(43)*param_int
     +       (37)), tk(param_int(43)*param_int(38))
      REAL*8 vol(param_int(43))
C
      REAL*8 param_real(0:*)
C
C Var loc
      INTEGER*4 inc, incmax, l, lt, i, j, k, incmax2, nm, nm2, np, l0, 
     +          lt0, inci, incj, inck, ci, cj, lij, ltij, inci_mtr, 
     +          incj_mtr, inck_mtr, icorr, jcorr, ls, v1, v2, v3, v4, v5
     +          , v6, wig_i, wig_j, wig_k, lt200, lt100, lt010, lt210, 
     +          lt020, lt110, lt002, lt012, lt102, lt001, lt021, lt201, 
     +          lt120, lvo, lvo200, lvo020, lvo002, lvol, lvor, ir
     +          , il, l200, l100, l010, l020, l110, l101, l011, v1mtr, 
     +          v2mtr, v3mtr, l001, l002, l210, l220, l201, l202, l021, 
     +          l022, l120, l102, l012
C
      REAL*8 c1, c2, c3, c4, c5, c6, c4sa, c5sa, c6sa, si, sj, sk, qm, 
     +       qp, tcx, tcy, tcz, tc, r1, h1, rou1, rov1, row1, r2, h2, 
     +       rou2, rov2, row2, gam, gam1, gam2, gam3, gam4, qn1, qn2, u
     +       , tdu, roref, uref, tam, tam1, qm1, qm2, qm3, qm4, 
     +       qm5, qm6, qp1, qp2, qp3, qp4, qp5, qp6, mut1, mut2, flu1, 
     +       flu2, flu3, flu4, flu5, flu6, p1, p2, qen, sigma_1, ck_vent
     +       , div, f1, f2, f3, f4, f5, f6, fv, fv5, volinv, test
      REAL*8 cmus1, temp01, coesut, tix, tiy, tiz, tix1, tiy1, tiz1, tjx
     +       , tjy, tjz, tjx1, tjy1, tjz1, tkx, tky, tkz, tkx1, tky1, 
     +       tkz1, xmutvol, cvisq, rgp, son, c, gradu_nx, gradu_ny, 
     +       gradu_nz, gradv_nx, gradv_ny, gradv_nz, gradw_nx, gradw_ny
     +       , gradw_nz, gradt_nx, gradt_ny, gradt_nz, delp, delm, delq
     +       , slq, slp, roff, tmin_1, du, dv, dw, dp, dqn, s_1, nx, ny
     +       , nz, qn, r, v, w, h, q, r_1, psiroe, xktvol, xmulam, 
     +       xmutur, xmutot
      REAL*8 qmd, qpd, r1d, h1d, rou1d, r2d, h2d, rou2d, qn1d, qn2d, ud
     +       , p1p2d, qm1d, qm2d, qm3d, qm5d, qp1d, qp2d, qp3d, qp5d, 
     +       flu1d, flu2d, flu3d, flu5d, p1d, p2d, f1d, f3d, f4d, cd, 
     +       dud, dvd, dpd, dqnd, qnd, rd, vd, hd, qd, r_1d
C
C    adresse point courant pour tableau de la taille d'un domaine 
      INTEGER_E inddm, i_1, j_1, k_1
C    adresse interface pour tableau metric
      INTEGER_E indmtr, i_3, j_3, k_3
      REAL*8 abs0
      REAL*8 abs0d
      REAL*8 abs1
      REAL*8 abs1d
      REAL*8 arg1
C
C
CC!DIR$ ASSUME_ALIGNED xmut: 32
C
      IF (ind_loop(1) .GT. ind_loop(2)) THEN
        RETURN
      ELSE IF (ind_loop(3) .GT. ind_loop(4)) THEN
        RETURN
      ELSE IF (ind_loop(5) .GT. ind_loop(6)) THEN
        RETURN
      ELSE
C
        inci = 1
        incj = param_int(0)
        inck = param_int(0)*param_int(0+1)
C
        inci_mtr = param_int(5)
        incj_mtr = param_int(5+1)
Cmetric
        inck_mtr = param_int(5+2)
C
        !return

        lt = 1 + (1+param_int(5+3)-1)*param_int(5) + (1+param_int(5+3)-1
     +    )*param_int(5+1) + (1+param_int(5+4)-1)*param_int(5+2)
        lvo = lt
        tcx = ti(lt)
        tcy = tj(lt)
        si      = abs (tcx)
        sj      = abs (tcy)
C-----Variables physiques
        volinv = 0.5/vol(lvo)
C
        gam = param_real(1)
CCv(gama-1)= R (gas parfait)
        rgp = param_real(2)*(gam-1.)
        gam1 = gam/(gam-1.)
        gam2 = 1./gam
        gam3 = gam1/param_real(10)*rgp
        gam4 = gam1/param_real(38)*rgp
C
        cmus1 = param_real(13)
        temp01 = 1./param_real(12)
        coesut = param_real(11)*(1.+cmus1*temp01)
        sigma_1 = 1./(2./3.)
C
        roref = param_real(3)
        uref = param_real(5)
C
        psiroe = param_real(34)
C!si T< 0.01Tinf, alors limiteur null
        tmin_1 = 100./param_real(6)
C
C modif suite chant metrique et suppression tc dans flux final
        c1 = 0.02*uref
C modif suite chant metrique et suppression tc dans flux final
        c2 = 0.02/(uref*roref)
C    roff MUSCL
        c3 = -2.
C
        c6 = 1./6.
        c4 = 5.*c6
        c5 = 2.*c6
        c6 = -(1.*c6)
C
C      c7     = c4/c5
C
        cvisq = 1./3
C
Ccorrection indice boucle i pour traiter l'interface ind_loop(2)+1 si necessaire
        icorr = 0
        jcorr = 0
        IF (ibloc .EQ. ijkv_bloc(1) .AND. synchro_receive_sock(1) .EQ. 0
     +      .AND. icache .EQ. ijkv_cache(1) .AND. synchro_receive_th(1) 
     +      .EQ. 0) icorr = 1
        IF (jbloc .EQ. ijkv_bloc(2) .AND. synchro_receive_sock(2) .EQ. 0
     +      .AND. jcache .EQ. ijkv_cache(2) .AND. synchro_receive_th(2) 
     +      .EQ. 0) jcorr = 1
C
        v1 = 0
        v2 = param_int(41)
        v3 = 2*param_int(41)
        v4 = 3*param_int(41)
        v5 = 4*param_int(41)
        v6 = 5*param_int(41)
C
        v1mtr = 0
        v2mtr = param_int(43)
        v3mtr = 2*param_int(43)
C
        wig_i = v1
        wig_j = v2
        wig_k = v3

C
C
C
CC!DIR$ ASSUME (mod(inck,   4) .eq. 0)
CC!DIR$ ASSUME (mod(incj,   4) .eq. 0)
CC!DIR$ ASSUME (mod(param_int(41), 4) .eq. 0)
C
        DO k=ind_loop(5),ind_loop(6)
          DO j=ind_loop(3),ind_loop(4)
C
C
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1) - 1
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
            DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
              lt = l - ltij
              lvo = lt
              l0 = l - incj
C.....Metrique
              tcx = tj(lt+v1mtr)
              tcy = tj(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              sj = SQRT(arg1)
C
              nm = l - incj
              nm2 = l - 2*incj
              np = l + incj
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              qm1d = c4*ropd(l+v1) + c5*ropd(nm+v1) + c6*ropd(np+v1
     +          )
              qm1 = c4*rop(l+v1) + c5*rop(nm+v1) + c6*rop(np+v1)
              qp1d = c4*ropd(nm+v1) + c6*ropd(nm2+v1) + c5*ropd(l+
     +          v1)
              qp1 = c4*rop(nm+v1) + c6*rop(nm2+v1) + c5*rop(l+v1)
C
C qm: right state,  qp: left state
              qm2d = c4*ropd(l+v2) + c5*ropd(nm+v2) + c6*ropd(np+
     +             v2)
              qm2 = c4*rop(l+v2) + c5*rop(nm+v2) + c6*rop(np+v2)
              qp2d = c4*ropd(nm+v2) + c6*ropd(nm2+v2) + c5*ropd(l+
     +          v2)
              qp2 = c4*rop(nm+v2) + c6*rop(nm2+v2) + c5*rop(l+v2)
C
C qm: right state,  qp: left state
              qm3d = c4*ropd(l+v3) + c5*ropd(nm+v3) + c6*ropd(np+
     +             v3)
              qm3 = c4*rop(l+v3) + c5*rop(nm+v3) + c6*rop(np+v3)
              qp3d = c4*ropd(nm+v3) + c6*ropd(nm2+v3) + c5*ropd(l+
     +          v3)
              qp3 = c4*rop(nm+v3) + c6*rop(nm2+v3) + c5*rop(l+v3)
C
C
C qm: right state,  qp: left state
              qm5d = c4*ropd(l+v5) + c5*ropd(nm+v5) + c6*ropd(np+
     +             v5)
              qm5 = c4*rop(l+v5) + c5*rop(nm+v5) + c6*rop(np+v5)
              qp5d = c4*ropd(nm+v5) + c6*ropd(nm2+v5) + c5*ropd(l+
     +          v5)
              qp5 = c4*rop(nm+v5) + c6*rop(nm2+v5) + c5*rop(l+v5)
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +          qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C     
Cdetermination etat moyenne roe
              qp1d = r1d/(2.0*SQRT(r1))
              qp1 = SQRT(r1)
              qm1d = r2d/(2.0*SQRT(r2))
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +          h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)

              abs0 = abs(h - q)
              abs0d = (hd - qd) * sign(1., h - q)

              cd = (gam-1.)*abs0d/(2.0*SQRT((gam-1.)*abs0))
              c = SQRT((gam-1.)*abs0)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = sj*(qm2d-qp2d)
              du = (qm2-qp2)*sj
              dvd = sj*(qm3d-qp3d)
              dv = (qm3-qp3)*sj
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
C
C.....Evaluation des valeurs propres
              s_1 = 1./max(sj,1.e-30)
              nx = tcx*s_1
              ny = tcy*s_1
C
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C
              f1d = qnd
              f1 = qn

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)
Cdelta
              f4d = psiroe*(abs1d+cd)
              f4 = psiroe*(abs1+c)
              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
C  a123*S
              f1d = sj*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*sj
C
              flu1d = f3d*f1 + f3*f1d
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
C
              f1d = qnd + cd
              f1 = qn + c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda4*S*a4
              f1d = sj*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*f3*sj
C
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
C
              f1d = qnd - cd
              f1 = qn - c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda5*S*a5
              f1d = sj*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*sj
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
C
              drodmd(l+v1) = drodmd(l+v1) + flu1d
              drodmd(l0+v1) = drodmd(l0+v1) - flu1d
              drodmd(l+v2) = drodmd(l+v2) + flu2d
              drodmd(l0+v2) = drodmd(l0+v2) - flu2d
              drodmd(l+v3) = drodmd(l+v3) + flu3d
              drodmd(l0+v3) = drodmd(l0+v3) - flu3d
              drodmd(l+v5) = drodmd(l+v5) + flu5d
              drodmd(l0+v5) = drodmd(l0+v5) - flu5d
            ENDDO
C
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1) - 1
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
            DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
              lt = l - ltij
              lvo = lt
              l0 = l - inci
C.....Metrique
              tcx = ti(lt+v1mtr)
              tcy = ti(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              si = SQRT(arg1)
C
              nm = l - inci
              nm2 = l - 2*inci
              np = l + inci
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              qm1d = c4*ropd(l+v1) + c5*ropd(nm+v1) + c6*ropd(np+v1
     +          )
              qm1 = c4*rop(l+v1) + c5*rop(nm+v1) + c6*rop(np+v1)
              qp1d = c4*ropd(nm+v1) + c6*ropd(nm2+v1) + c5*ropd(l+
     +          v1)
              qp1 = c4*rop(nm+v1) + c6*rop(nm2+v1) + c5*rop(l+v1)
C
C qm: right state,  qp: left state
              qm2d = c4*ropd(l+v2) + c5*ropd(nm+v2) + c6*ropd(np+v2
     +          )
              qm2 = c4*rop(l+v2) + c5*rop(nm+v2) + c6*rop(np+v2)
              qp2d = c4*ropd(nm+v2) + c6*ropd(nm2+v2) + c5*ropd(l+
     +          v2)
              qp2 = c4*rop(nm+v2) + c6*rop(nm2+v2) + c5*rop(l+v2)
C
C qm: right state,  qp: left state
              qm3d = c4*ropd(l+v3) + c5*ropd(nm+v3) + c6*ropd(np+v3
     +          )
              qm3 = c4*rop(l+v3) + c5*rop(nm+v3) + c6*rop(np+v3)
              qp3d = c4*ropd(nm+v3) + c6*ropd(nm2+v3) + c5*ropd(l+
     +          v3)
              qp3 = c4*rop(nm+v3) + c6*rop(nm2+v3) + c5*rop(l+v3)
C
C
C qm: right state,  qp: left state
              qm5d = c4*ropd(l+v5) + c5*ropd(nm+v5) + c6*ropd(np+v5
     +          )
              qm5 = c4*rop(l+v5) + c5*rop(nm+v5) + c6*rop(np+v5)
              qp5d = c4*ropd(nm+v5) + c6*ropd(nm2+v5) + c5*ropd(l+
     +          v5)
              qp5 = c4*rop(nm+v5) + c6*rop(nm2+v5) + c5*rop(l+v5)
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +          qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C     
C     determination etat moyenne roe
              qp1d = r1d/(2.0*SQRT(r1))
              qp1 = SQRT(r1)
              qm1d = r2d/(2.0*SQRT(r2))
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +          h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)

              abs0 = abs(h - q)
              abs0d = (hd - qd) * sign(1., h - q) 

              cd = (gam-1.)*abs0d/(2.0*SQRT((gam-1.)*abs0))
              c = SQRT((gam-1.)*abs0)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = si*(qm2d-qp2d)
              du = (qm2-qp2)*si
              dvd = si*(qm3d-qp3d)
              dv = (qm3-qp3)*si
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
C
C.....Evaluation des valeurs propres
              s_1 = 1./max(si,1.e-30)
              nx = tcx*s_1
              ny = tcy*s_1
C
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C
              f1d = qnd
              f1 = qn

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)
Cdelta
              f4d = psiroe*(abs1d+cd)
              f4 = psiroe*(abs1+c)
              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
C  a123
              f1d = si*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*si
C
              flu1d = f3d*f1 + f3*f1d
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
C
              f1d = qnd + cd
              f1 = qn + c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda4*S*a4
              f1d = si*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*si*f3
C
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
C
              f1d = qnd - cd
              f1 = qn - c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda5*S*a5
              f1d = si*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*si
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
C
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
C
              drodmd(l+v1) = drodmd(l+v1) + flu1d
              drodmd(l0+v1) = drodmd(l0+v1) - flu1d
              drodmd(l+v2) = drodmd(l+v2) + flu2d
              drodmd(l0+v2) = drodmd(l0+v2) - flu2d
              drodmd(l+v3) = drodmd(l+v3) + flu3d
              drodmd(l0+v3) = drodmd(l0+v3) - flu3d
              drodmd(l+v5) = drodmd(l+v5) + flu5d
              drodmd(l0+v5) = drodmd(l0+v5) - flu5d
            ENDDO
C
C
            IF (icorr .EQ. 1) THEN
Cflux manquant en I
              i = ind_loop(2) + 1
              l = 1 + (i+param_int(0+3)-1) + (j+param_int(0+3)-1)*
     +          param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1)
              lt = 1 + (i+param_int(5+3)-1)*param_int(5) + (j+param_int(
     +          5+3)-1)*param_int(5+1) + (k+param_int(5+4)-1)*param_int(
     +          5+2)
C.....Metrique
              tcx = ti(lt+v1mtr)
              tcy = ti(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              si = SQRT(arg1)
C
              nm = l - inci
              nm2 = l - 2*inci
              np = l + inci
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              qm1d = c4*ropd(l+v1) + c5*ropd(nm+v1) + c6*ropd(np+v1
     +          )
              qm1 = c4*rop(l+v1) + c5*rop(nm+v1) + c6*rop(np+v1)
              qp1d = c4*ropd(nm+v1) + c6*ropd(nm2+v1) + c5*ropd(l+
     +          v1)
              qp1 = c4*rop(nm+v1) + c6*rop(nm2+v1) + c5*rop(l+v1)
C
C qm: right state,  qp: left state
              qm2d = c4*ropd(l+v2) + c5*ropd(nm+v2) + c6*ropd(np+v2
     +          )
              qm2 = c4*rop(l+v2) + c5*rop(nm+v2) + c6*rop(np+v2)
              qp2d = c4*ropd(nm+v2) + c6*ropd(nm2+v2) + c5*ropd(l+
     +          v2)
              qp2 = c4*rop(nm+v2) + c6*rop(nm2+v2) + c5*rop(l+v2)
C
C qm: right state,  qp: left state
              qm3d = c4*ropd(l+v3) + c5*ropd(nm+v3) + c6*ropd(np+v3
     +          )
              qm3 = c4*rop(l+v3) + c5*rop(nm+v3) + c6*rop(np+v3)
              qp3d = c4*ropd(nm+v3) + c6*ropd(nm2+v3) + c5*ropd(l+
     +          v3)
              qp3 = c4*rop(nm+v3) + c6*rop(nm2+v3) + c5*rop(l+v3)
C
C
C qm: right state,  qp: left state
              qm5d = c4*ropd(l+v5) + c5*ropd(nm+v5) + c6*ropd(np+v5
     +          )
              qm5 = c4*rop(l+v5) + c5*rop(nm+v5) + c6*rop(np+v5)
              qp5d = c4*ropd(nm+v5) + c6*ropd(nm2+v5) + c5*ropd(l+
     +          v5)
              qp5 = c4*rop(nm+v5) + c6*rop(nm2+v5) + c5*rop(l+v5)
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +             qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C     
Cdetermination etat moyenne roe
              qp1d = r1d/(2.0*SQRT(r1))
              qp1 = SQRT(r1)
              qm1d = r2d/(2.0*SQRT(r2))
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +             h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)

              abs0 = abs(h - q)
              abs0d = (hd - qd) * sign(1., h - q)

              cd = (gam-1.)*abs0d/(2.0*SQRT((gam-1.)*abs0))
              c = SQRT((gam-1.)*abs0)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = si*(qm2d-qp2d)
              du = (qm2-qp2)*si
              dvd = si*(qm3d-qp3d)
              dv = (qm3-qp3)*si
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
C
C.....Evaluation des valeurs propres
              s_1 = 1./max(si,1.e-30)
              nx = tcx*s_1
              ny = tcy*s_1
C
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C
              f1d = qnd
              f1 = qn

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)
Cdelta
              f4d = psiroe*(abs1d+cd)
              f4 = psiroe*(abs1+c)
              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
C  a123
              f1d = si*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*si
C
              flu1d = f3d*f1 + f3*f1d
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
C
              f1d = qnd + cd
              f1 = qn + c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda4*S*a4
              f1d = si*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*si*f3
C
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
C     
              f1d = qnd - cd
              f1 = qn - c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda5*S*a5
              f1d = si*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*si
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
C
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
C
              ls = l - inci
              drodmd(ls+v1) = drodmd(ls+v1) - flu1d
              drodmd(ls+v2) = drodmd(ls+v2) - flu2d
              drodmd(ls+v3) = drodmd(ls+v3) - flu3d
              drodmd(ls+v5) = drodmd(ls+v5) - flu5d
            END IF
          ENDDO
Cdo j
CComplement fluj en Jmax
C
          IF (jcorr .EQ. 1) THEN
C
            j = ind_loop(4) + 1
C
            lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+3)
     +        -1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +        param_int(0+1) - 1
            ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5)+
     +        (j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-1)*
     +        param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
            DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
              lt = l - ltij
              lvo = lt
C
C.....Metrique
              tcx = tj(lt+v1mtr)
              tcy = tj(lt+v2mtr)
              arg1 = tcx*tcx + tcy*tcy
              sj = SQRT(arg1)
C
              nm = l - incj
              nm2 = l - 2*incj
              np = l + incj
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
C qm: right state,  qp: left state
              qm1d = c4*ropd(l+v1) + c5*ropd(nm+v1) + c6*ropd(np+v1
     +          )
              qm1 = c4*rop(l+v1) + c5*rop(nm+v1) + c6*rop(np+v1)
              qp1d = c4*ropd(nm+v1) + c6*ropd(nm2+v1) + c5*ropd(l+
     +          v1)
              qp1 = c4*rop(nm+v1) + c6*rop(nm2+v1) + c5*rop(l+v1)
C
C qm: right state,  qp: left state
              qm2d = c4*ropd(l+v2) + c5*ropd(nm+v2) + c6*ropd(np+v2
     +          )
              qm2 = c4*rop(l+v2) + c5*rop(nm+v2) + c6*rop(np+v2)
              qp2d = c4*ropd(nm+v2) + c6*ropd(nm2+v2) + c5*ropd(l+
     +          v2)
              qp2 = c4*rop(nm+v2) + c6*rop(nm2+v2) + c5*rop(l+v2)
C
C qm: right state,  qp: left state
              qm3d = c4*ropd(l+v3) + c5*ropd(nm+v3) + c6*ropd(np+v3
     +          )
              qm3 = c4*rop(l+v3) + c5*rop(nm+v3) + c6*rop(np+v3)
              qp3d = c4*ropd(nm+v3) + c6*ropd(nm2+v3) + c5*ropd(l+
     +          v3)
              qp3 = c4*rop(nm+v3) + c6*rop(nm2+v3) + c5*rop(l+v3)
C
C
C qm: right state,  qp: left state
              qm5d = c4*ropd(l+v5) + c5*ropd(nm+v5) + c6*ropd(np+v5
     +          )
              qm5 = c4*rop(l+v5) + c5*rop(nm+v5) + c6*rop(np+v5)
              qp5d = c4*ropd(nm+v5) + c6*ropd(nm2+v5) + c5*ropd(l+
     +          v5)
              qp5 = c4*rop(nm+v5) + c6*rop(nm2+v5) + c5*rop(l+v5)
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
              r1d = qp1d
              r1 = qp1
              p1d = rgp*(r1d*qp5+r1*qp5d)
              p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
              h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3*
     +          qp3d)
              h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3)
C
              r2d = qm1d
              r2 = qm1
              p2d = rgp*(r2d*qm5+r2*qm5d)
              p2 = r2*qm5*rgp
              h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3*
     +          qm3d)
              h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3)
C     
Cdetermination etat moyenne roe
              qp1d = r1d/(2.0*SQRT(r1))
              qp1 = SQRT(r1)
              qm1d = r2d/(2.0*SQRT(r2))
              qm1 = SQRT(r2)
              rd = qp1d*qm1 + qp1*qm1d
              r = qp1*qm1
              r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
              r_1 = 1./(qp1+qm1)
              ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*qp2+
     +          qm1*qm2)*r_1d
              u = (qp1*qp2+qm1*qm2)*r_1
              vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*qp3+
     +          qm1*qm3)*r_1d
              v = (qp1*qp3+qm1*qm3)*r_1
              hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1*
     +          h2)*r_1d
              h = (qp1*h1+qm1*h2)*r_1
              qd = .5*(ud*u+u*ud+vd*v+v*vd)
              q = .5*(u*u+v*v)

              abs0 = abs(h - q)
              abs0d = (hd - qd) * sign(1., h - q)

              cd = (gam-1.)*abs0d/(2.0*SQRT((gam-1.)*abs0))
              c = SQRT((gam-1.)*abs0)
C
Cdetermination vitesse normale interface
              qn1d = tcx*qp2d + tcy*qp3d
              qn1 = qp2*tcx + qp3*tcy
              qn2d = tcx*qm2d + tcy*qm3d
              qn2 = qm2*tcx + qm3*tcy
C
              dud = sj*(qm2d-qp2d)
              du = (qm2-qp2)*sj
              dvd = sj*(qm3d-qp3d)
              dv = (qm3-qp3)*sj
              dpd = p2d - p1d
              dp = p2 - p1
CSdqn
              dqnd = qn2d - qn1d
              dqn = qn2 - qn1
C
C.....Evaluation des valeurs propres
              s_1 = 1./max(sj,1.e-30)
              nx = tcx*s_1
              ny = tcy*s_1
C     
              qnd = nx*ud + ny*vd
              qn = u*nx + v*ny
C     
              f1d = qnd
              f1 = qn

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)
Cdelta
              f4d = psiroe*(abs1d+cd)
              f4 = psiroe*(abs1+c)
              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
C  a123*S
              f1d = sj*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
              f1 = (r2-r1-dp/(c*c))*sj
C
              flu1d = f3d*f1 + f3*f1d
              flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(du-
     +          nx*dqn)+r*(dud-nx*dqnd))
              flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(dv-
     +          ny*dqn)+r*(dvd-ny*dqnd))
              flu5d = f3d*(f1*q+r*(u*du+v*dv-qn*dqn)) + f3*(f1d*q+f1*qd+
     +          rd*(u*du+v*dv-qn*dqn)+r*(ud*du+u*dud+vd*dv+v*dvd-qnd*dqn
     +          -qn*dqnd))
C
              f1d = qnd + cd
              f1 = qn + c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda4*S*a4
              f1d = sj*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*f3*sj
C
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
              flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
              flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
C
              f1d = qnd - cd
              f1 = qn - c

              abs1 = abs(f1)
              abs1d = f1d * sign(1., f1)

              f2 = .5 + SIGN(.5, abs1 - f4)
              f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +          f4d) - f2*abs1d
              f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs1
Clambda5*S*a5
              f1d = sj*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-(
     +          dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r*c*
     +          dqn*s_1)*f3d/(2.*c**2))
              f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*sj
              flu1d = flu1d + f1d
              flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
              flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
              flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
              rou1d = r1d*qn1 + r1*qn1d
              rou1 = r1*qn1
              rou2d = r2d*qn2 + r2*qn2d
              rou2 = r2*qn2
              p1p2d = p1d + p2d
C
              flu1d = 0.5*(flu1d+rou1d+rou2d)
              flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*qm2d
     +          +tcx*p1p2d)
              flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*qm3d
     +          +tcy*p1p2d)
              flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
C
              ls = l - incj
              drodmd(ls+v1) = drodmd(ls+v1) - flu1d
              drodmd(ls+v2) = drodmd(ls+v2) - flu2d
              drodmd(ls+v3) = drodmd(ls+v3) - flu3d
              drodmd(ls+v5) = drodmd(ls+v5) - flu5d
            ENDDO
          END IF
        ENDDO
      END IF
      END
