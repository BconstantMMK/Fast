C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.13 (r6666M) - 28 May 2018 09:28
C
C  Differentiation of corr_fluroe_lamin_minmod_3dfull in forward (tangent) mode:
C   variations   of useful results: drodm
C   with respect to varying inputs: rop
C   RW status of diff variables: rop:in drodm:out
C
C
C
C
C
C
C
C
C
C
C
C***********************************************************************
C     $Date: 2013-08-26 16:00:23 +0200 (lun. 26 ao√ªt 2013) $
C     $Revision: 64 $
C     $Author: IvanMary $
C***********************************************************************
      SUBROUTINE CORR_FLUROE_LAMIN_MINMOD_3DFULL_D(ndom, ithread, idir, 
     +                                             param_int, param_real
     +                                             , ind_loop, rop, ropd
     +                                             , drodm, drodmd, wig
     +                                             , venti, ventj, ventk
     +                                             , ti, tj, tk, vol, 
     +                                             xmut)
      IMPLICIT NONE
C
C
Climiteur 'minmod'
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
      INTEGER*4 ndom, ithread, idir, ind_loop(6), param_int(0:*)
C
      REAL*8 xmut(param_int(41))
      REAL*8 rop(param_int(41)*param_int(36))
      REAL*8 ropd(param_int(41)*param_int(36))
      REAL*8 drodm(param_int(41)*param_int(36))
      REAL*8 drodmd(param_int(41)*param_int(36))
      REAL*8 wig(param_int(41)*3)
      REAL*8 venti(param_int(44)*param_int(40))
      REAL*8 ventj(param_int(44)*param_int(40))
      REAL*8 ventk(param_int(44)*param_int(40))
C
      REAL*8 ti(param_int(43)*param_int(37)), tj(param_int(43)*param_int
     +       (37)), tk(param_int(43)*param_int(38))
      REAL*8 vol(param_int(43))
C
      REAL*8 param_real(0:*)
C
C Var loc
      INTEGER*4 inc, incmax, l, lt, i, j, k, incmax2, nm, nm2, np, l0, 
     +          lt0, inci, incj, inck, ci, cj, lij, ltij, inci_mtr, 
     +          incj_mtr, inck_mtr, icorr, jcorr, ls, v1, v2, v3, v4, v5
     +          , v6, wig_i, wig_j, wig_k, lt200, lt100, lt010, lt210, 
     +          lt020, lt110, lt002, lt012, lt102, lt001, lt021, lt201, 
     +          lt120, shift, lvo, lvo200, lvo020, lvo002, vslp, lvol, 
     +          lvor, ir, il, l200, l100, l010, l020, l110, l101, l011, 
     +          v1mtr, v2mtr, v3mtr, l001, l002, l210, l220, l201, l202
     +          , l021, l022, l120, l102
      INTEGER*4 l012
C
      REAL*8 c1, c2, c3, c4, c5, c6, c4sa, c5sa, c6sa, si, sj, sk, qm, 
     +       qp, tcx, tcy, tcz, tc, r1, h1, rou1, rov1, row1, r2, h2, 
     +       rou2, rov2, row2, gam, gam1, qn1, qn2, u, tdu, p1p2, roref
     +       , uref, tam, tam1, son, c, gam2, qm1, qm2, qm3, qm4, qm5, 
     +       qm6, qp1, qp2, qp3, qp4, qp5, qp6, mut1, mut2, flu1, flu2, 
     +       flu3, flu4, flu5, flu6, p1, p2, qen, sigma_1, ck_vent, div
     +       , f1, f2, f3, f4, f5, f6, fv, fv5, volinv, test
      REAL*8 cmus1, temp01, coesut, tix, tiy, tiz, tix1, tiy1, tiz1, tjx
     +       , tjy, tjz, tjx1, tjy1, tjz1, tkx, tky, tkz, tkx1, tky1, 
     +       tkz1, xmutvol, prandt, gam3, cvisq, rgp, gradu_nx, gradu_ny
     +       , gradu_nz, gradv_nx, gradv_ny, gradv_nz, gradw_nx, 
     +       gradw_ny, gradw_nz, gradt_nx, gradt_ny, gradt_nz, delp, 
     +       delm, delq, slq, slp, roff, tmin_1, du, dv, dw, dp, dqn, 
     +       s_1, nx, ny, nz, qn, r, v, w, h, q, r_1, psiroe, avmin, 
     +       sens, flagi, flagj, flagk, norm
      REAL*8 qmd, qpd, r1d, h1d, rou1d, r2d, h2d, rou2d, qn1d, qn2d, ud
     +       , p1p2d, cd, qm1d, qm2d, qm3d, qm4d, qm5d, qp1d, qp2d, qp3d
     +       , qp4d, qp5d, flu1d, flu2d, flu3d, flu4d, flu5d, p1d, p2d, 
     +       f1d, f3d, f4d, delpd, delmd, delqd, slqd, slpd, roffd, dud
     +       , dvd, dwd, dpd, dqnd, qnd, rd, vd, wd, hd, qd, r_1d
C
C    adresse point courant pour tableau de la taille d'un domaine 
      INTEGER_E inddm, i_1, j_1, k_1
C    adresse interface pour tableau metric
      INTEGER_E indmtr, i_3, j_3, k_3
C    adresse interface pour tableau vitesse entrainement
      INTEGER_E indven, i_4, j_4, k_4
      INTRINSIC ABS
      INTRINSIC MOD
      INTRINSIC SQRT
      INTRINSIC MIN
      INTRINSIC MAX
      INTRINSIC SIGN
      REAL*8 max1
      REAL*8 max1d
      REAL*8 max2
      REAL*8 max2d
      REAL*8 max3
      REAL*8 max3d
      REAL*8 max4
      REAL*8 max4d
      REAL*8 max5
      REAL*8 max5d
      REAL*8 max6
      REAL*8 max6d
      REAL*8 max7
      REAL*8 max7d
      REAL*8 max8
      REAL*8 max8d
      REAL*8 max9
      REAL*8 max9d
      REAL*8 max10
      REAL*8 max10d
      REAL*8 max11
      REAL*8 max11d
      REAL*8 max12
      REAL*8 max12d
      REAL*8 max13
      REAL*8 max13d
      REAL*8 max14
      REAL*8 max14d
      REAL*8 max15
      REAL*8 max15d
      REAL*8 abs0
      REAL*8 abs0d
      REAL*8 max16
      REAL*8 abs1
      REAL*8 abs1d
      REAL*8 abs2
      REAL*8 abs3
      REAL*8 abs3d
      REAL*8 abs4
      REAL*8 abs5
      REAL*8 abs5d
      REAL*8 abs6
      REAL*8 abs7
      REAL*8 abs7d
      REAL*8 max17
      REAL*8 max17d
      REAL*8 max18
      REAL*8 max18d
      REAL*8 max19
      REAL*8 max19d
      REAL*8 max20
      REAL*8 max20d
      REAL*8 max21
      REAL*8 max21d
      REAL*8 max22
      REAL*8 max22d
      REAL*8 max23
      REAL*8 max23d
      REAL*8 max24
      REAL*8 max24d
      REAL*8 max25
      REAL*8 max25d
      REAL*8 max26
      REAL*8 max26d
      REAL*8 max27
      REAL*8 max27d
      REAL*8 max28
      REAL*8 max28d
      REAL*8 max29
      REAL*8 max29d
      REAL*8 max30
      REAL*8 max30d
      REAL*8 max31
      REAL*8 max31d
      REAL*8 abs8
      REAL*8 abs8d
      REAL*8 max32
      REAL*8 abs9
      REAL*8 abs9d
      REAL*8 abs10
      REAL*8 abs11
      REAL*8 abs11d
      REAL*8 abs12
      REAL*8 abs13
      REAL*8 abs13d
      REAL*8 abs14
      REAL*8 abs15
      REAL*8 abs15d
      REAL*8 max33
      REAL*8 max33d
      REAL*8 max34
      REAL*8 max34d
      REAL*8 max35
      REAL*8 max35d
      REAL*8 max36
      REAL*8 max36d
      REAL*8 max37
      REAL*8 max37d
      REAL*8 max38
      REAL*8 max38d
      REAL*8 max39
      REAL*8 max39d
      REAL*8 max40
      REAL*8 max40d
      REAL*8 max41
      REAL*8 max41d
      REAL*8 max42
      REAL*8 max42d
      REAL*8 max43
      REAL*8 max43d
      REAL*8 max44
      REAL*8 max44d
      REAL*8 max45
      REAL*8 max45d
      REAL*8 max46
      REAL*8 max46d
      REAL*8 max47
      REAL*8 max47d
      REAL*8 abs16
      REAL*8 abs16d
      REAL*8 max48
      REAL*8 abs17
      REAL*8 abs17d
      REAL*8 abs18
      REAL*8 abs19
      REAL*8 abs19d
      REAL*8 abs20
      REAL*8 abs21
      REAL*8 abs21d
      REAL*8 abs22
      REAL*8 abs23
      REAL*8 abs23d
      REAL*8 arg1
      REAL*8 y1d
      REAL*8 x1d
      REAL*8 y46d
      REAL*8 y2d
      REAL*8 x2d
      REAL*8 y47d
      REAL*8 y3d
      REAL*8 y4d
      REAL*8 x3d
      REAL*8 y48d
      REAL*8 y5d
      REAL*8 x4d
      REAL*8 y49d
      REAL*8 y6d
      REAL*8 y7d
      REAL*8 x5d
      REAL*8 y50d
      REAL*8 y8d
      REAL*8 x6d
      REAL*8 y51d
      REAL*8 y9d
      REAL*8 y10d
      REAL*8 x7d
      REAL*8 y52d
      REAL*8 y11d
      REAL*8 x8d
      REAL*8 y53d
      REAL*8 y12d
      REAL*8 y13d
      REAL*8 x9d
      REAL*8 y54d
      REAL*8 y14d
      REAL*8 x10d
      REAL*8 y55d
      REAL*8 y15d
      REAL*8 y16d
      REAL*8 x11d
      REAL*8 y56d
      REAL*8 y17d
      REAL*8 x12d
      REAL*8 y57d
      REAL*8 y18d
      REAL*8 y19d
      REAL*8 x13d
      REAL*8 y58d
      REAL*8 y20d
      REAL*8 x14d
      REAL*8 y59d
      REAL*8 y21d
      REAL*8 y22d
      REAL*8 x15d
      REAL*8 y60d
      REAL*8 y23d
      REAL*8 x16d
      REAL*8 y61d
      REAL*8 y24d
      REAL*8 y25d
      REAL*8 x17d
      REAL*8 y62d
      REAL*8 y26d
      REAL*8 x18d
      REAL*8 y63d
      REAL*8 y27d
      REAL*8 y28d
      REAL*8 x19d
      REAL*8 y64d
      REAL*8 y29d
      REAL*8 x20d
      REAL*8 y65d
      REAL*8 y30d
      REAL*8 y31d
      REAL*8 x21d
      REAL*8 y66d
      REAL*8 y32d
      REAL*8 x22d
      REAL*8 y67d
      REAL*8 y33d
      REAL*8 y34d
      REAL*8 x23d
      REAL*8 y68d
      REAL*8 y35d
      REAL*8 x24d
      REAL*8 y69d
      REAL*8 y36d
      REAL*8 y37d
      REAL*8 x25d
      REAL*8 y70d
      REAL*8 y38d
      REAL*8 x26d
      REAL*8 y71d
      REAL*8 y39d
      REAL*8 y40d
      REAL*8 x27d
      REAL*8 y72d
      REAL*8 y41d
      REAL*8 x28d
      REAL*8 y73d
      REAL*8 y42d
      REAL*8 y43d
      REAL*8 x29d
      REAL*8 y74d
      REAL*8 y44d
      REAL*8 x30d
      REAL*8 y75d
      REAL*8 y45d
      INTEGER ii1
      REAL*8 x19
      REAL*8 x18
      REAL*8 x17
      REAL*8 x16
      REAL*8 x15
      REAL*8 x14
      REAL*8 x13
      REAL*8 x12
      REAL*8 y29
      REAL*8 x11
      REAL*8 y28
      REAL*8 x10
      REAL*8 y27
      REAL*8 y26
      REAL*8 y25
      REAL*8 y24
      REAL*8 y23
      REAL*8 y22
      REAL*8 y59
      REAL*8 y21
      REAL*8 y58
      REAL*8 y20
      REAL*8 y57
      REAL*8 y56
      REAL*8 x9
      REAL*8 y55
      REAL*8 x8
      REAL*8 y54
      REAL*8 x7
      REAL*8 y53
      REAL*8 x6
      REAL*8 y52
      REAL*8 x5
      REAL*8 y51
      REAL*8 x4
      REAL*8 y50
      REAL*8 x3
      REAL*8 x2
      REAL*8 x1
      REAL*8 y19
      REAL*8 y18
      REAL*8 y17
      REAL*8 y16
      REAL*8 y15
      REAL*8 y14
      REAL*8 y13
      REAL*8 y12
      REAL*8 y49
      REAL*8 y11
      REAL*8 y48
      REAL*8 x30
      REAL*8 y10
      REAL*8 y47
      REAL*8 y46
      REAL*8 y45
      REAL*8 y44
      REAL*8 y43
      REAL*8 y42
      REAL*8 y41
      REAL*8 y40
      REAL*8 y75
      REAL*8 y74
      REAL*8 y73
      REAL*8 y72
      REAL*8 y71
      REAL*8 y70
      REAL*8 x29
      REAL*8 x28
      REAL*8 x27
      REAL*8 x26
      REAL*8 x25
      REAL*8 x24
      REAL*8 x23
      REAL*8 x22
      REAL*8 y39
      REAL*8 x21
      REAL*8 y38
      REAL*8 x20
      REAL*8 y37
      REAL*8 y36
      REAL*8 y35
      REAL*8 y34
      REAL*8 y33
      REAL*8 y32
      REAL*8 y69
      REAL*8 y31
      REAL*8 y68
      REAL*8 y30
      REAL*8 y67
      REAL*8 y66
      REAL*8 y9
      REAL*8 y65
      REAL*8 y8
      REAL*8 y64
      REAL*8 y7
      REAL*8 y63
      REAL*8 y6
      REAL*8 y62
      REAL*8 y5
      REAL*8 y61
      REAL*8 y4
      REAL*8 y60
      REAL*8 y3
      REAL*8 y2
      REAL*8 y1
C
CC!DIR$ ASSUME_ALIGNED xmut: 32
C
      IF (ind_loop(1) .GT. ind_loop(2)) THEN
        RETURN
      ELSE IF (ind_loop(3) .GT. ind_loop(4)) THEN
        RETURN
      ELSE IF (ind_loop(5) .GT. ind_loop(6)) THEN
        RETURN
      ELSE
C
        inci = 1
        incj = param_int(0)
        inck = param_int(0)*param_int(0+1)
C
        inci_mtr = param_int(5)
        incj_mtr = param_int(5+1)
Cmetric
        inck_mtr = param_int(5+2)
C
        lt = 1 + (1+param_int(5+3)-1)*param_int(5) + (1+param_int(5+3)-1
     +    )*param_int(5+1) + (1+param_int(5+4)-1)*param_int(5+2)
        lvo = lt
        tcx = ti(lt)
        tcy = tj(lt)
        tcz = 0.
        tcz = tk(lt)
        IF (tcx .GE. 0.) THEN
          si = tcx
        ELSE
          si = -tcx
        END IF
        IF (tcy .GE. 0.) THEN
          sj = tcy
        ELSE
          sj = -tcy
        END IF
        IF (tcz .GE. 0.) THEN
          sk = tcz
        ELSE
          sk = -tcz
        END IF
C-----Variables physiques
        volinv = 0.5/vol(lvo)
C
        gam = param_real(1)
CCv(gama-1)= R (gas parfait)
        rgp = param_real(2)*(gam-1.)
        prandt = param_real(10)
        gam1 = gam/(gam-1.)
        gam2 = 1./gam
        gam3 = gam1/prandt*rgp
        cmus1 = param_real(13)
        temp01 = 1./param_real(12)
        coesut = param_real(11)*(1.+cmus1*temp01)
        sigma_1 = 1./(2./3.)
C
        roref = param_real(3)
        uref = param_real(5)
C
        psiroe = param_real(34)
C!si T< 0.01Tinf, alors limiteur null
        tmin_1 = 100./param_real(6)
C
C modif suite chant metrique et suppression tc dans flux final
        c1 = 0.02*uref
C modif suite chant metrique et suppression tc dans flux final
        c2 = 0.02/(uref*roref)
C    roff MUSCL
        c3 = -2.
C
        c6 = 1./6.
        c4 = 5.*c6
        c5 = 2.*c6
        c6 = -(1.*c6)
C
C      c7     = c4/c5
C
        cvisq = 1./3
C
        v1 = 0
        v2 = param_int(41)
        v3 = 2*param_int(41)
        v4 = 3*param_int(41)
        v5 = 4*param_int(41)
        v6 = 5*param_int(41)
C
        v1mtr = 0
        v2mtr = param_int(43)
        v3mtr = 2*param_int(43)
C
        wig_i = v1
        wig_j = v2
        wig_k = v3
C
Cpour blinder Roe 6eme variable   
        qen = 0.
C
C
        sens = -1
        shift = 0
        IF (MOD(idir, 2) .EQ. 0) THEN
          sens = 1
          shift = 1
        END IF
CC!DIR$ ASSUME (mod(inck,   4) .eq. 0)
CC!DIR$ ASSUME (mod(incj,   4) .eq. 0)
CC!DIR$ ASSUME (mod(param_int(41), 4) .eq. 0)
C
        IF (idir .LE. 2) THEN
C
          shift = inci*shift
          DO k=ind_loop(5),ind_loop(6)
            DO j=ind_loop(3),ind_loop(4)
C
              lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+
     +          3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1) - 1
              ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5
     +          )+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-
     +          1)*param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
              DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
                lt = l - ltij
                lvo = lt
                l0 = l - shift
C.....Metrique
                tcx = ti(lt+v1mtr)
                tcy = ti(lt+v2mtr)
                tcz = ti(lt+v3mtr)
                arg1 = tcx*tcx + tcy*tcy + tcz*tcz
                si = SQRT(arg1)
C
                nm = l - inci
                nm2 = l - 2*inci
                np = l + inci
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v1
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y1 = 1.
                  y1d = 0.0
                ELSE
                  y1d = tmin_1*ropd(l+v5)
                  y1 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y1) THEN
                  max1d = y1d
                  max1 = y1
                ELSE
                  max1 = 0.
                  max1d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max1d
                roff = .5*max1
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x1d = delmd
                  x1 = delm
                ELSE
                  x1d = -delmd
                  x1 = -delm
                END IF
                y46d = SIGN(1., delm)*delpd
                y46 = SIGN(1., delm)*delp
                IF (x1 .GT. y46) THEN
                  y2d = y46d
                  y2 = y46
                ELSE
                  y2d = x1d
                  y2 = x1
                END IF
                IF (0. .LT. y2) THEN
                  max2d = y2d
                  max2 = y2
                ELSE
                  max2 = 0.
                  max2d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max2+roff*max2d)
                slp = roff*(SIGN(1., delm)*max2)
                IF (delq .GE. 0.) THEN
                  x2d = delqd
                  x2 = delq
                ELSE
                  x2d = -delqd
                  x2 = -delq
                END IF
                y47d = SIGN(1., delq)*delmd
                y47 = SIGN(1., delq)*delm
                IF (x2 .GT. y47) THEN
                  y3d = y47d
                  y3 = y47
                ELSE
                  y3d = x2d
                  y3 = x2
                END IF
                IF (0. .LT. y3) THEN
                  max3d = y3d
                  max3 = y3
                ELSE
                  max3 = 0.
                  max3d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max3+roff*max3d)
                slq = roff*(SIGN(1., delq)*max3)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm1d = qmd
                qm1 = qm
                qp1d = qpd
                qp1 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v2
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y4 = 1.
                  y4d = 0.0
                ELSE
                  y4d = tmin_1*ropd(l+v5)
                  y4 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y4) THEN
                  max4d = y4d
                  max4 = y4
                ELSE
                  max4 = 0.
                  max4d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max4d
                roff = .5*max4
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x3d = delmd
                  x3 = delm
                ELSE
                  x3d = -delmd
                  x3 = -delm
                END IF
                y48d = SIGN(1., delm)*delpd
                y48 = SIGN(1., delm)*delp
                IF (x3 .GT. y48) THEN
                  y5d = y48d
                  y5 = y48
                ELSE
                  y5d = x3d
                  y5 = x3
                END IF
                IF (0. .LT. y5) THEN
                  max5d = y5d
                  max5 = y5
                ELSE
                  max5 = 0.
                  max5d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max5+roff*max5d)
                slp = roff*(SIGN(1., delm)*max5)
                IF (delq .GE. 0.) THEN
                  x4d = delqd
                  x4 = delq
                ELSE
                  x4d = -delqd
                  x4 = -delq
                END IF
                y49d = SIGN(1., delq)*delmd
                y49 = SIGN(1., delq)*delm
                IF (x4 .GT. y49) THEN
                  y6d = y49d
                  y6 = y49
                ELSE
                  y6d = x4d
                  y6 = x4
                END IF
                IF (0. .LT. y6) THEN
                  max6d = y6d
                  max6 = y6
                ELSE
                  max6 = 0.
                  max6d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max6+roff*max6d)
                slq = roff*(SIGN(1., delq)*max6)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm2d = qmd
                qm2 = qm
                qp2d = qpd
                qp2 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v3
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y7 = 1.
                  y7d = 0.0
                ELSE
                  y7d = tmin_1*ropd(l+v5)
                  y7 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y7) THEN
                  max7d = y7d
                  max7 = y7
                ELSE
                  max7 = 0.
                  max7d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max7d
                roff = .5*max7
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x5d = delmd
                  x5 = delm
                ELSE
                  x5d = -delmd
                  x5 = -delm
                END IF
                y50d = SIGN(1., delm)*delpd
                y50 = SIGN(1., delm)*delp
                IF (x5 .GT. y50) THEN
                  y8d = y50d
                  y8 = y50
                ELSE
                  y8d = x5d
                  y8 = x5
                END IF
                IF (0. .LT. y8) THEN
                  max8d = y8d
                  max8 = y8
                ELSE
                  max8 = 0.
                  max8d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max8+roff*max8d)
                slp = roff*(SIGN(1., delm)*max8)
                IF (delq .GE. 0.) THEN
                  x6d = delqd
                  x6 = delq
                ELSE
                  x6d = -delqd
                  x6 = -delq
                END IF
                y51d = SIGN(1., delq)*delmd
                y51 = SIGN(1., delq)*delm
                IF (x6 .GT. y51) THEN
                  y9d = y51d
                  y9 = y51
                ELSE
                  y9d = x6d
                  y9 = x6
                END IF
                IF (0. .LT. y9) THEN
                  max9d = y9d
                  max9 = y9
                ELSE
                  max9 = 0.
                  max9d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max9+roff*max9d)
                slq = roff*(SIGN(1., delq)*max9)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm3d = qmd
                qm3 = qm
                qp3d = qpd
                qp3 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v4
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y10 = 1.
                  y10d = 0.0
                ELSE
                  y10d = tmin_1*ropd(l+v5)
                  y10 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y10) THEN
                  max10d = y10d
                  max10 = y10
                ELSE
                  max10 = 0.
                  max10d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max10d
                roff = .5*max10
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x7d = delmd
                  x7 = delm
                ELSE
                  x7d = -delmd
                  x7 = -delm
                END IF
                y52d = SIGN(1., delm)*delpd
                y52 = SIGN(1., delm)*delp
                IF (x7 .GT. y52) THEN
                  y11d = y52d
                  y11 = y52
                ELSE
                  y11d = x7d
                  y11 = x7
                END IF
                IF (0. .LT. y11) THEN
                  max11d = y11d
                  max11 = y11
                ELSE
                  max11 = 0.
                  max11d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max11+roff*max11d)
                slp = roff*(SIGN(1., delm)*max11)
                IF (delq .GE. 0.) THEN
                  x8d = delqd
                  x8 = delq
                ELSE
                  x8d = -delqd
                  x8 = -delq
                END IF
                y53d = SIGN(1., delq)*delmd
                y53 = SIGN(1., delq)*delm
                IF (x8 .GT. y53) THEN
                  y12d = y53d
                  y12 = y53
                ELSE
                  y12d = x8d
                  y12 = x8
                END IF
                IF (0. .LT. y12) THEN
                  max12d = y12d
                  max12 = y12
                ELSE
                  max12 = 0.
                  max12d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max12+roff*max12d)
                slq = roff*(SIGN(1., delq)*max12)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm4d = qmd
                qm4 = qm
                qp4d = qpd
                qp4 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v5
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y13 = 1.
                  y13d = 0.0
                ELSE
                  y13d = tmin_1*ropd(l+v5)
                  y13 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y13) THEN
                  max13d = y13d
                  max13 = y13
                ELSE
                  max13 = 0.
                  max13d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max13d
                roff = .5*max13
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x9d = delmd
                  x9 = delm
                ELSE
                  x9d = -delmd
                  x9 = -delm
                END IF
                y54d = SIGN(1., delm)*delpd
                y54 = SIGN(1., delm)*delp
                IF (x9 .GT. y54) THEN
                  y14d = y54d
                  y14 = y54
                ELSE
                  y14d = x9d
                  y14 = x9
                END IF
                IF (0. .LT. y14) THEN
                  max14d = y14d
                  max14 = y14
                ELSE
                  max14 = 0.
                  max14d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max14+roff*max14d)
                slp = roff*(SIGN(1., delm)*max14)
                IF (delq .GE. 0.) THEN
                  x10d = delqd
                  x10 = delq
                ELSE
                  x10d = -delqd
                  x10 = -delq
                END IF
                y55d = SIGN(1., delq)*delmd
                y55 = SIGN(1., delq)*delm
                IF (x10 .GT. y55) THEN
                  y15d = y55d
                  y15 = y55
                ELSE
                  y15d = x10d
                  y15 = x10
                END IF
                IF (0. .LT. y15) THEN
                  max15d = y15d
                  max15 = y15
                ELSE
                  max15 = 0.
                  max15d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max15+roff*max15d)
                slq = roff*(SIGN(1., delq)*max15)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm5d = qmd
                qm5 = qm
                qp5d = qpd
                qp5 = qp
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
                r1d = qp1d
                r1 = qp1
                p1d = rgp*(r1d*qp5+r1*qp5d)
                p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
                h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3
     +            *qp3d+qp4d*qp4+qp4*qp4d)
                h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3+qp4*qp4)
C
                r2d = qm1d
                r2 = qm1
                p2d = rgp*(r2d*qm5+r2*qm5d)
                p2 = r2*qm5*rgp
                h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3
     +            *qm3d+qm4d*qm4+qm4*qm4d)
                h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3+qm4*qm4)
C
Cdetermination etat moyenne roe
                IF (r1 .EQ. 0.0) THEN
                  qp1d = 0.D0
                ELSE
                  qp1d = r1d/(2.0*SQRT(r1))
                END IF
                qp1 = SQRT(r1)
                IF (r2 .EQ. 0.0) THEN
                  qm1d = 0.D0
                ELSE
                  qm1d = r2d/(2.0*SQRT(r2))
                END IF
                qm1 = SQRT(r2)
                rd = qp1d*qm1 + qp1*qm1d
                r = qp1*qm1
                r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
                r_1 = 1./(qp1+qm1)
                ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*
     +            qp2+qm1*qm2)*r_1d
                u = (qp1*qp2+qm1*qm2)*r_1
                vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*
     +            qp3+qm1*qm3)*r_1d
                v = (qp1*qp3+qm1*qm3)*r_1
                wd = (qp1d*qp4+qp1*qp4d+qm1d*qm4+qm1*qm4d)*r_1 + (qp1*
     +            qp4+qm1*qm4)*r_1d
                w = (qp1*qp4+qm1*qm4)*r_1
                hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1
     +            *h2)*r_1d
                h = (qp1*h1+qm1*h2)*r_1
                qd = .5*(ud*u+u*ud+vd*v+v*vd+wd*w+w*wd)
                q = .5*(u*u+v*v+w*w)
                IF (h - q .GE. 0.) THEN
                  abs0d = hd - qd
                  abs0 = h - q
                ELSE
                  abs0d = -(hd-qd)
                  abs0 = -(h-q)
                END IF
                IF ((gam-1.)*abs0 .EQ. 0.0) THEN
                  cd = 0.D0
                ELSE
                  cd = (gam-1.)*abs0d/(2.0*SQRT((gam-1.)*abs0))
                END IF
                c = SQRT((gam-1.)*abs0)
C
Cdetermination vitesse normale interface
                qn1d = tcx*qp2d + tcy*qp3d + tcz*qp4d
                qn1 = qp2*tcx + qp3*tcy + qp4*tcz
                qn2d = tcx*qm2d + tcy*qm3d + tcz*qm4d
                qn2 = qm2*tcx + qm3*tcy + qm4*tcz
C
                dud = si*(qm2d-qp2d)
                du = (qm2-qp2)*si
                dvd = si*(qm3d-qp3d)
                dv = (qm3-qp3)*si
                dwd = si*(qm4d-qp4d)
                dw = (qm4-qp4)*si
                dpd = p2d - p1d
                dp = p2 - p1
CSdqn
                dqnd = qn2d - qn1d
                dqn = qn2 - qn1
                IF (si .LT. 1.e-30) THEN
                  max16 = 1.e-30
                ELSE
                  max16 = si
                END IF
C
C.....Evaluation des valeurs propres
                s_1 = 1.0/max16
                nx = tcx*s_1
                ny = tcy*s_1
                nz = tcz*s_1
C
                qnd = nx*ud + ny*vd + nz*wd
                qn = u*nx + v*ny + w*nz
C
                f1d = qnd
                f1 = qn
                IF (f1 .GE. 0.) THEN
                  abs1d = f1d
                  abs1 = f1
                ELSE
                  abs1d = -f1d
                  abs1 = -f1
                END IF
Cdelta
                f4d = psiroe*(abs1d+cd)
                f4 = psiroe*(abs1+c)
                IF (f1 .GE. 0.) THEN
                  abs2 = f1
                ELSE
                  abs2 = -f1
                END IF
C
                f2 = 0.5 + SIGN(0.5, abs2 - f4)
                IF (f1 .GE. 0.) THEN
                  abs3d = f1d
                  abs3 = f1
                ELSE
                  abs3d = -f1d
                  abs3 = -f1
                END IF
                f3d = (f2-1.0)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2
     +            +f4d) - f2*abs3d
                f3 = (f2-1.0)*(f1*f1/f4+f4)*0.5 - f2*abs3
C  a123
                f1d = si*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
                f1 = (r2-r1-dp/(c*c))*si
                flu1d = f3d*f1 + f3*f1d
                flu1 = f3*f1
                flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(
     +            du-nx*dqn)+r*(dud-nx*dqnd))
                flu2 = f3*(f1*u+r*(du-nx*dqn))
                flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(
     +            dv-ny*dqn)+r*(dvd-ny*dqnd))
                flu3 = f3*(f1*v+r*(dv-ny*dqn))
                flu4d = f3d*(f1*w+r*(dw-nz*dqn)) + f3*(f1d*w+f1*wd+rd*(
     +            dw-nz*dqn)+r*(dwd-nz*dqnd))
                flu4 = f3*(f1*w+r*(dw-nz*dqn))
                flu5d = f3d*(f1*q+r*(u*du+v*dv+w*dw-qn*dqn)) + f3*(f1d*q
     +            +f1*qd+rd*(u*du+v*dv+w*dw-qn*dqn)+r*(ud*du+u*dud+vd*dv
     +            +v*dvd+wd*dw+w*dwd-qnd*dqn-qn*dqnd))
                flu5 = f3*(f1*q+r*(u*du+v*dv+w*dw-qn*dqn))
C
                f1d = qnd + cd
                f1 = qn + c
                IF (f1 .GE. 0.) THEN
                  abs4 = f1
                ELSE
                  abs4 = -f1
                END IF
                f2 = 0.5 + SIGN(0.5, abs4 - f4)
                IF (f1 .GE. 0.) THEN
                  abs5d = f1d
                  abs5 = f1
                ELSE
                  abs5d = -f1d
                  abs5 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs5d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs5
Clambda4*S*a4
                f1d = si*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-
     +            (dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r
     +            *c*dqn*s_1)*f3d/(2.*c**2))
                f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*si*f3
C
                flu1d = flu1d + f1d
                flu1 = flu1 + f1
                flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
                flu2 = flu2 + f1*(u+nx*c)
                flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
                flu3 = flu3 + f1*(v+ny*c)
                flu4d = flu4d + f1d*(w+nz*c) + f1*(wd+nz*cd)
                flu4 = flu4 + f1*(w+nz*c)
                flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
                flu5 = flu5 + f1*(h+qn*c)
C
                f1d = qnd - cd
                f1 = qn - c
                IF (f1 .GE. 0.) THEN
                  abs6 = f1
                ELSE
                  abs6 = -f1
                END IF
                f2 = 0.5 + SIGN(0.5, abs6 - f4)
                IF (f1 .GE. 0.) THEN
                  abs7d = f1d
                  abs7 = f1
                ELSE
                  abs7d = -f1d
                  abs7 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs7d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs7
C
Clambda5*S*a5
                f1d = si*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-
     +            (dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r
     +            *c*dqn*s_1)*f3d/(2.*c**2))
                f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*si
                flu1d = flu1d + f1d
                flu1 = flu1 + f1
                flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
                flu2 = flu2 + f1*(u-nx*c)
                flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
                flu3 = flu3 + f1*(v-ny*c)
                flu4d = flu4d + f1d*(w-nz*c) + f1*(wd-nz*cd)
                flu4 = flu4 + f1*(w-nz*c)
                flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
                flu5 = flu5 + f1*(h-qn*c)
C
                rou1d = r1d*qn1 + r1*qn1d
                rou1 = r1*qn1
                rou2d = r2d*qn2 + r2*qn2d
                rou2 = r2*qn2
                p1p2d = p1d + p2d
                p1p2 = p1 + p2
                flu1d = 0.5*(flu1d+rou1d+rou2d)
                flu1 = (flu1+rou1+rou2)*0.5
                flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*
     +            qm2d+tcx*p1p2d)
                flu2 = (flu2+rou1*qp2+rou2*qm2+tcx*p1p2)*0.5
                flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*
     +            qm3d+tcy*p1p2d)
                flu3 = (flu3+rou1*qp3+rou2*qm3+tcy*p1p2)*0.5
                flu4d = 0.5*(flu4d+rou1d*qp4+rou1*qp4d+rou2d*qm4+rou2*
     +            qm4d+tcz*p1p2d)
                flu4 = (flu4+rou1*qp4+rou2*qm4+tcz*p1p2)*0.5
                flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
                flu5 = (flu5+rou1*h1+rou2*h2)*0.5
                drodmd(l0+v1) = drodmd(l0+v1) + sens*flu1d
                drodmd(l0+v2) = drodmd(l0+v2) + sens*flu2d
                drodmd(l0+v3) = drodmd(l0+v3) + sens*flu3d
                drodmd(l0+v4) = drodmd(l0+v4) + sens*flu4d
                drodmd(l0+v5) = drodmd(l0+v5) + sens*flu5d
              ENDDO
            ENDDO
          ENDDO
        ELSE IF (idir .LE. 4) THEN
C
C
          shift = incj*shift
          DO k=ind_loop(5),ind_loop(6)
            DO j=ind_loop(3),ind_loop(4)
C
              lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+
     +          3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1) - 1
              ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5
     +          )+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-
     +          1)*param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
              DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
                lt = l - ltij
                lvo = lt
C
                l0 = l - shift
C.....Metrique
                tcx = tj(lt+v1mtr)
                tcy = tj(lt+v2mtr)
                tcz = tj(lt+v3mtr)
                arg1 = tcx*tcx + tcy*tcy + tcz*tcz
                sj = SQRT(arg1)
C
                nm = l - incj
                nm2 = l - 2*incj
                np = l + incj
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v1
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y16 = 1.
                  y16d = 0.0
                ELSE
                  y16d = tmin_1*ropd(l+v5)
                  y16 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y16) THEN
                  max17d = y16d
                  max17 = y16
                ELSE
                  max17 = 0.
                  max17d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max17d
                roff = .5*max17
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x11d = delmd
                  x11 = delm
                ELSE
                  x11d = -delmd
                  x11 = -delm
                END IF
                y56d = SIGN(1., delm)*delpd
                y56 = SIGN(1., delm)*delp
                IF (x11 .GT. y56) THEN
                  y17d = y56d
                  y17 = y56
                ELSE
                  y17d = x11d
                  y17 = x11
                END IF
                IF (0. .LT. y17) THEN
                  max18d = y17d
                  max18 = y17
                ELSE
                  max18 = 0.
                  max18d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max18+roff*max18d)
                slp = roff*(SIGN(1., delm)*max18)
                IF (delq .GE. 0.) THEN
                  x12d = delqd
                  x12 = delq
                ELSE
                  x12d = -delqd
                  x12 = -delq
                END IF
                y57d = SIGN(1., delq)*delmd
                y57 = SIGN(1., delq)*delm
                IF (x12 .GT. y57) THEN
                  y18d = y57d
                  y18 = y57
                ELSE
                  y18d = x12d
                  y18 = x12
                END IF
                IF (0. .LT. y18) THEN
                  max19d = y18d
                  max19 = y18
                ELSE
                  max19 = 0.
                  max19d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max19+roff*max19d)
                slq = roff*(SIGN(1., delq)*max19)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm1d = qmd
                qm1 = qm
                qp1d = qpd
                qp1 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v2
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y19 = 1.
                  y19d = 0.0
                ELSE
                  y19d = tmin_1*ropd(l+v5)
                  y19 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y19) THEN
                  max20d = y19d
                  max20 = y19
                ELSE
                  max20 = 0.
                  max20d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max20d
                roff = .5*max20
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x13d = delmd
                  x13 = delm
                ELSE
                  x13d = -delmd
                  x13 = -delm
                END IF
                y58d = SIGN(1., delm)*delpd
                y58 = SIGN(1., delm)*delp
                IF (x13 .GT. y58) THEN
                  y20d = y58d
                  y20 = y58
                ELSE
                  y20d = x13d
                  y20 = x13
                END IF
                IF (0. .LT. y20) THEN
                  max21d = y20d
                  max21 = y20
                ELSE
                  max21 = 0.
                  max21d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max21+roff*max21d)
                slp = roff*(SIGN(1., delm)*max21)
                IF (delq .GE. 0.) THEN
                  x14d = delqd
                  x14 = delq
                ELSE
                  x14d = -delqd
                  x14 = -delq
                END IF
                y59d = SIGN(1., delq)*delmd
                y59 = SIGN(1., delq)*delm
                IF (x14 .GT. y59) THEN
                  y21d = y59d
                  y21 = y59
                ELSE
                  y21d = x14d
                  y21 = x14
                END IF
                IF (0. .LT. y21) THEN
                  max22d = y21d
                  max22 = y21
                ELSE
                  max22 = 0.
                  max22d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max22+roff*max22d)
                slq = roff*(SIGN(1., delq)*max22)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm2d = qmd
                qm2 = qm
                qp2d = qpd
                qp2 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v3
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y22 = 1.
                  y22d = 0.0
                ELSE
                  y22d = tmin_1*ropd(l+v5)
                  y22 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y22) THEN
                  max23d = y22d
                  max23 = y22
                ELSE
                  max23 = 0.
                  max23d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max23d
                roff = .5*max23
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x15d = delmd
                  x15 = delm
                ELSE
                  x15d = -delmd
                  x15 = -delm
                END IF
                y60d = SIGN(1., delm)*delpd
                y60 = SIGN(1., delm)*delp
                IF (x15 .GT. y60) THEN
                  y23d = y60d
                  y23 = y60
                ELSE
                  y23d = x15d
                  y23 = x15
                END IF
                IF (0. .LT. y23) THEN
                  max24d = y23d
                  max24 = y23
                ELSE
                  max24 = 0.
                  max24d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max24+roff*max24d)
                slp = roff*(SIGN(1., delm)*max24)
                IF (delq .GE. 0.) THEN
                  x16d = delqd
                  x16 = delq
                ELSE
                  x16d = -delqd
                  x16 = -delq
                END IF
                y61d = SIGN(1., delq)*delmd
                y61 = SIGN(1., delq)*delm
                IF (x16 .GT. y61) THEN
                  y24d = y61d
                  y24 = y61
                ELSE
                  y24d = x16d
                  y24 = x16
                END IF
                IF (0. .LT. y24) THEN
                  max25d = y24d
                  max25 = y24
                ELSE
                  max25 = 0.
                  max25d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max25+roff*max25d)
                slq = roff*(SIGN(1., delq)*max25)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm3d = qmd
                qm3 = qm
                qp3d = qpd
                qp3 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v4
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y25 = 1.
                  y25d = 0.0
                ELSE
                  y25d = tmin_1*ropd(l+v5)
                  y25 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y25) THEN
                  max26d = y25d
                  max26 = y25
                ELSE
                  max26 = 0.
                  max26d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max26d
                roff = .5*max26
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x17d = delmd
                  x17 = delm
                ELSE
                  x17d = -delmd
                  x17 = -delm
                END IF
                y62d = SIGN(1., delm)*delpd
                y62 = SIGN(1., delm)*delp
                IF (x17 .GT. y62) THEN
                  y26d = y62d
                  y26 = y62
                ELSE
                  y26d = x17d
                  y26 = x17
                END IF
                IF (0. .LT. y26) THEN
                  max27d = y26d
                  max27 = y26
                ELSE
                  max27 = 0.
                  max27d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max27+roff*max27d)
                slp = roff*(SIGN(1., delm)*max27)
                IF (delq .GE. 0.) THEN
                  x18d = delqd
                  x18 = delq
                ELSE
                  x18d = -delqd
                  x18 = -delq
                END IF
                y63d = SIGN(1., delq)*delmd
                y63 = SIGN(1., delq)*delm
                IF (x18 .GT. y63) THEN
                  y27d = y63d
                  y27 = y63
                ELSE
                  y27d = x18d
                  y27 = x18
                END IF
                IF (0. .LT. y27) THEN
                  max28d = y27d
                  max28 = y27
                ELSE
                  max28 = 0.
                  max28d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max28+roff*max28d)
                slq = roff*(SIGN(1., delq)*max28)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm4d = qmd
                qm4 = qm
                qp4d = qpd
                qp4 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v5
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y28 = 1.
                  y28d = 0.0
                ELSE
                  y28d = tmin_1*ropd(l+v5)
                  y28 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y28) THEN
                  max29d = y28d
                  max29 = y28
                ELSE
                  max29 = 0.
                  max29d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max29d
                roff = .5*max29
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x19d = delmd
                  x19 = delm
                ELSE
                  x19d = -delmd
                  x19 = -delm
                END IF
                y64d = SIGN(1., delm)*delpd
                y64 = SIGN(1., delm)*delp
                IF (x19 .GT. y64) THEN
                  y29d = y64d
                  y29 = y64
                ELSE
                  y29d = x19d
                  y29 = x19
                END IF
                IF (0. .LT. y29) THEN
                  max30d = y29d
                  max30 = y29
                ELSE
                  max30 = 0.
                  max30d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max30+roff*max30d)
                slp = roff*(SIGN(1., delm)*max30)
                IF (delq .GE. 0.) THEN
                  x20d = delqd
                  x20 = delq
                ELSE
                  x20d = -delqd
                  x20 = -delq
                END IF
                y65d = SIGN(1., delq)*delmd
                y65 = SIGN(1., delq)*delm
                IF (x20 .GT. y65) THEN
                  y30d = y65d
                  y30 = y65
                ELSE
                  y30d = x20d
                  y30 = x20
                END IF
                IF (0. .LT. y30) THEN
                  max31d = y30d
                  max31 = y30
                ELSE
                  max31 = 0.
                  max31d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max31+roff*max31d)
                slq = roff*(SIGN(1., delq)*max31)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm5d = qmd
                qm5 = qm
                qp5d = qpd
                qp5 = qp
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
                r1d = qp1d
                r1 = qp1
                p1d = rgp*(r1d*qp5+r1*qp5d)
                p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
                h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3
     +            *qp3d+qp4d*qp4+qp4*qp4d)
                h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3+qp4*qp4)
C
                r2d = qm1d
                r2 = qm1
                p2d = rgp*(r2d*qm5+r2*qm5d)
                p2 = r2*qm5*rgp
                h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3
     +            *qm3d+qm4d*qm4+qm4*qm4d)
                h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3+qm4*qm4)
C
Cdetermination etat moyenne roe
                IF (r1 .EQ. 0.0) THEN
                  qp1d = 0.D0
                ELSE
                  qp1d = r1d/(2.0*SQRT(r1))
                END IF
                qp1 = SQRT(r1)
                IF (r2 .EQ. 0.0) THEN
                  qm1d = 0.D0
                ELSE
                  qm1d = r2d/(2.0*SQRT(r2))
                END IF
                qm1 = SQRT(r2)
                rd = qp1d*qm1 + qp1*qm1d
                r = qp1*qm1
                r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
                r_1 = 1./(qp1+qm1)
                ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*
     +            qp2+qm1*qm2)*r_1d
                u = (qp1*qp2+qm1*qm2)*r_1
                vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*
     +            qp3+qm1*qm3)*r_1d
                v = (qp1*qp3+qm1*qm3)*r_1
                wd = (qp1d*qp4+qp1*qp4d+qm1d*qm4+qm1*qm4d)*r_1 + (qp1*
     +            qp4+qm1*qm4)*r_1d
                w = (qp1*qp4+qm1*qm4)*r_1
                hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1
     +            *h2)*r_1d
                h = (qp1*h1+qm1*h2)*r_1
                qd = .5*(ud*u+u*ud+vd*v+v*vd+wd*w+w*wd)
                q = .5*(u*u+v*v+w*w)
                IF (h - q .GE. 0.) THEN
                  abs8d = hd - qd
                  abs8 = h - q
                ELSE
                  abs8d = -(hd-qd)
                  abs8 = -(h-q)
                END IF
                IF ((gam-1.)*abs8 .EQ. 0.0) THEN
                  cd = 0.D0
                ELSE
                  cd = (gam-1.)*abs8d/(2.0*SQRT((gam-1.)*abs8))
                END IF
                c = SQRT((gam-1.)*abs8)
C
Cdetermination vitesse normale interface
                qn1d = tcx*qp2d + tcy*qp3d + tcz*qp4d
                qn1 = qp2*tcx + qp3*tcy + qp4*tcz
                qn2d = tcx*qm2d + tcy*qm3d + tcz*qm4d
                qn2 = qm2*tcx + qm3*tcy + qm4*tcz
C
                dud = sj*(qm2d-qp2d)
                du = (qm2-qp2)*sj
                dvd = sj*(qm3d-qp3d)
                dv = (qm3-qp3)*sj
                dwd = sj*(qm4d-qp4d)
                dw = (qm4-qp4)*sj
                dpd = p2d - p1d
                dp = p2 - p1
CSdqn
                dqnd = qn2d - qn1d
                dqn = qn2 - qn1
                IF (sj .LT. 1.e-30) THEN
                  max32 = 1.e-30
                ELSE
                  max32 = sj
                END IF
C
C.....Evaluation des valeurs propres
                s_1 = 1./max32
                nx = tcx*s_1
                ny = tcy*s_1
                nz = tcz*s_1
C
                qnd = nx*ud + ny*vd + nz*wd
                qn = u*nx + v*ny + w*nz
C
                f1d = qnd
                f1 = qn
                IF (f1 .GE. 0.) THEN
                  abs9d = f1d
                  abs9 = f1
                ELSE
                  abs9d = -f1d
                  abs9 = -f1
                END IF
Cdelta
                f4d = psiroe*(abs9d+cd)
                f4 = psiroe*(abs9+c)
                IF (f1 .GE. 0.) THEN
                  abs10 = f1
                ELSE
                  abs10 = -f1
                END IF
C
                f2 = .5 + SIGN(.5, abs10 - f4)
                IF (f1 .GE. 0.) THEN
                  abs11d = f1d
                  abs11 = f1
                ELSE
                  abs11d = -f1d
                  abs11 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs11d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs11
C  a123
                f1d = sj*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
                f1 = (r2-r1-dp/(c*c))*sj
                flu1d = f3d*f1 + f3*f1d
                flu1 = f3*f1
                flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(
     +            du-nx*dqn)+r*(dud-nx*dqnd))
                flu2 = f3*(f1*u+r*(du-nx*dqn))
                flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(
     +            dv-ny*dqn)+r*(dvd-ny*dqnd))
                flu3 = f3*(f1*v+r*(dv-ny*dqn))
                flu4d = f3d*(f1*w+r*(dw-nz*dqn)) + f3*(f1d*w+f1*wd+rd*(
     +            dw-nz*dqn)+r*(dwd-nz*dqnd))
                flu4 = f3*(f1*w+r*(dw-nz*dqn))
                flu5d = f3d*(f1*q+r*(u*du+v*dv+w*dw-qn*dqn)) + f3*(f1d*q
     +            +f1*qd+rd*(u*du+v*dv+w*dw-qn*dqn)+r*(ud*du+u*dud+vd*dv
     +            +v*dvd+wd*dw+w*dwd-qnd*dqn-qn*dqnd))
                flu5 = f3*(f1*q+r*(u*du+v*dv+w*dw-qn*dqn))
C
                f1d = qnd + cd
                f1 = qn + c
                IF (f1 .GE. 0.) THEN
                  abs12 = f1
                ELSE
                  abs12 = -f1
                END IF
                f2 = .5 + SIGN(.5, abs12 - f4)
                IF (f1 .GE. 0.) THEN
                  abs13d = f1d
                  abs13 = f1
                ELSE
                  abs13d = -f1d
                  abs13 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs13d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs13
Clambda4*S*a4
                f1d = sj*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-
     +            (dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r
     +            *c*dqn*s_1)*f3d/(2.*c**2))
                f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*sj*f3
C
                flu1d = flu1d + f1d
                flu1 = flu1 + f1
                flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
                flu2 = flu2 + f1*(u+nx*c)
                flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
                flu3 = flu3 + f1*(v+ny*c)
                flu4d = flu4d + f1d*(w+nz*c) + f1*(wd+nz*cd)
                flu4 = flu4 + f1*(w+nz*c)
                flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
                flu5 = flu5 + f1*(h+qn*c)
C
                f1d = qnd - cd
                f1 = qn - c
                IF (f1 .GE. 0.) THEN
                  abs14 = f1
                ELSE
                  abs14 = -f1
                END IF
                f2 = .5 + SIGN(.5, abs14 - f4)
                IF (f1 .GE. 0.) THEN
                  abs15d = f1d
                  abs15 = f1
                ELSE
                  abs15d = -f1d
                  abs15 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs15d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs15
C
Clambda5*S*a5
                f1d = sj*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-
     +            (dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r
     +            *c*dqn*s_1)*f3d/(2.*c**2))
                f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*sj
                flu1d = flu1d + f1d
                flu1 = flu1 + f1
                flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
                flu2 = flu2 + f1*(u-nx*c)
                flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
                flu3 = flu3 + f1*(v-ny*c)
                flu4d = flu4d + f1d*(w-nz*c) + f1*(wd-nz*cd)
                flu4 = flu4 + f1*(w-nz*c)
                flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
                flu5 = flu5 + f1*(h-qn*c)
C
                rou1d = r1d*qn1 + r1*qn1d
                rou1 = r1*qn1
                rou2d = r2d*qn2 + r2*qn2d
                rou2 = r2*qn2
                p1p2d = p1d + p2d
                p1p2 = p1 + p2
                flu1d = 0.5*(flu1d+rou1d+rou2d)
                flu1 = (flu1+rou1+rou2)*0.5
                flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*
     +            qm2d+tcx*p1p2d)
                flu2 = (flu2+rou1*qp2+rou2*qm2+tcx*p1p2)*0.5
                flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*
     +            qm3d+tcy*p1p2d)
                flu3 = (flu3+rou1*qp3+rou2*qm3+tcy*p1p2)*0.5
                flu4d = 0.5*(flu4d+rou1d*qp4+rou1*qp4d+rou2d*qm4+rou2*
     +            qm4d+tcz*p1p2d)
                flu4 = (flu4+rou1*qp4+rou2*qm4+tcz*p1p2)*0.5
                flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
                flu5 = (flu5+rou1*h1+rou2*h2)*0.5
                drodmd(l0+v1) = drodmd(l0+v1) + sens*flu1d
                drodmd(l0+v2) = drodmd(l0+v2) + sens*flu2d
                drodmd(l0+v3) = drodmd(l0+v3) + sens*flu3d
                drodmd(l0+v4) = drodmd(l0+v4) + sens*flu4d
                drodmd(l0+v5) = drodmd(l0+v5) + sens*flu5d
              ENDDO
            ENDDO
          ENDDO
        ELSE
C
C
          shift = inck*shift
          DO k=ind_loop(5),ind_loop(6)
            DO j=ind_loop(3),ind_loop(4)
              lij = 1 + (ind_loop(1)+param_int(0+3)-1) + (j+param_int(0+
     +          3)-1)*param_int(0) + (k+param_int(0+4)-1)*param_int(0)*
     +          param_int(0+1) - 1
              ltij = lij - (1+(ind_loop(1)+param_int(5+3)-1)*param_int(5
     +          )+(j+param_int(5+3)-1)*param_int(5+1)+(k+param_int(5+4)-
     +          1)*param_int(5+2)) + 1
CC    !DIR$ ASSUME (mod(lij,4) .eq. 0)
CDIR$ IVDEP
CDIR$ DISTRIBUTE POINT
              DO l=lij+1,lij+1+ind_loop(2)-ind_loop(1)
C
                lt = l - ltij
                lvo = lt
                l0 = l - shift
C.....Metrique
                tcx = tk(lt+v1mtr)
                tcy = tk(lt+v2mtr)
                tcz = tk(lt+v3mtr)
                arg1 = tcx*tcx + tcy*tcy + tcz*tcz
                sk = SQRT(arg1)
C
                nm = l - inck
                nm2 = l - 2*inck
                np = l + inck
C
C pente (qm) a l'interface droite et  (qp) a l'interface gauche
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v1
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y31 = 1.
                  y31d = 0.0
                ELSE
                  y31d = tmin_1*ropd(l+v5)
                  y31 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y31) THEN
                  max33d = y31d
                  max33 = y31
                ELSE
                  max33 = 0.
                  max33d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max33d
                roff = .5*max33
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x21d = delmd
                  x21 = delm
                ELSE
                  x21d = -delmd
                  x21 = -delm
                END IF
                y66d = SIGN(1., delm)*delpd
                y66 = SIGN(1., delm)*delp
                IF (x21 .GT. y66) THEN
                  y32d = y66d
                  y32 = y66
                ELSE
                  y32d = x21d
                  y32 = x21
                END IF
                IF (0. .LT. y32) THEN
                  max34d = y32d
                  max34 = y32
                ELSE
                  max34 = 0.
                  max34d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max34+roff*max34d)
                slp = roff*(SIGN(1., delm)*max34)
                IF (delq .GE. 0.) THEN
                  x22d = delqd
                  x22 = delq
                ELSE
                  x22d = -delqd
                  x22 = -delq
                END IF
                y67d = SIGN(1., delq)*delmd
                y67 = SIGN(1., delq)*delm
                IF (x22 .GT. y67) THEN
                  y33d = y67d
                  y33 = y67
                ELSE
                  y33d = x22d
                  y33 = x22
                END IF
                IF (0. .LT. y33) THEN
                  max35d = y33d
                  max35 = y33
                ELSE
                  max35 = 0.
                  max35d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max35+roff*max35d)
                slq = roff*(SIGN(1., delq)*max35)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm1d = qmd
                qm1 = qm
                qp1d = qpd
                qp1 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v2
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y34 = 1.
                  y34d = 0.0
                ELSE
                  y34d = tmin_1*ropd(l+v5)
                  y34 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y34) THEN
                  max36d = y34d
                  max36 = y34
                ELSE
                  max36 = 0.
                  max36d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max36d
                roff = .5*max36
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x23d = delmd
                  x23 = delm
                ELSE
                  x23d = -delmd
                  x23 = -delm
                END IF
                y68d = SIGN(1., delm)*delpd
                y68 = SIGN(1., delm)*delp
                IF (x23 .GT. y68) THEN
                  y35d = y68d
                  y35 = y68
                ELSE
                  y35d = x23d
                  y35 = x23
                END IF
                IF (0. .LT. y35) THEN
                  max37d = y35d
                  max37 = y35
                ELSE
                  max37 = 0.
                  max37d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max37+roff*max37d)
                slp = roff*(SIGN(1., delm)*max37)
                IF (delq .GE. 0.) THEN
                  x24d = delqd
                  x24 = delq
                ELSE
                  x24d = -delqd
                  x24 = -delq
                END IF
                y69d = SIGN(1., delq)*delmd
                y69 = SIGN(1., delq)*delm
                IF (x24 .GT. y69) THEN
                  y36d = y69d
                  y36 = y69
                ELSE
                  y36d = x24d
                  y36 = x24
                END IF
                IF (0. .LT. y36) THEN
                  max38d = y36d
                  max38 = y36
                ELSE
                  max38 = 0.
                  max38d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max38+roff*max38d)
                slq = roff*(SIGN(1., delq)*max38)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm2d = qmd
                qm2 = qm
                qp2d = qpd
                qp2 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v3
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y37 = 1.
                  y37d = 0.0
                ELSE
                  y37d = tmin_1*ropd(l+v5)
                  y37 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y37) THEN
                  max39d = y37d
                  max39 = y37
                ELSE
                  max39 = 0.
                  max39d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max39d
                roff = .5*max39
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x25d = delmd
                  x25 = delm
                ELSE
                  x25d = -delmd
                  x25 = -delm
                END IF
                y70d = SIGN(1., delm)*delpd
                y70 = SIGN(1., delm)*delp
                IF (x25 .GT. y70) THEN
                  y38d = y70d
                  y38 = y70
                ELSE
                  y38d = x25d
                  y38 = x25
                END IF
                IF (0. .LT. y38) THEN
                  max40d = y38d
                  max40 = y38
                ELSE
                  max40 = 0.
                  max40d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max40+roff*max40d)
                slp = roff*(SIGN(1., delm)*max40)
                IF (delq .GE. 0.) THEN
                  x26d = delqd
                  x26 = delq
                ELSE
                  x26d = -delqd
                  x26 = -delq
                END IF
                y71d = SIGN(1., delq)*delmd
                y71 = SIGN(1., delq)*delm
                IF (x26 .GT. y71) THEN
                  y39d = y71d
                  y39 = y71
                ELSE
                  y39d = x26d
                  y39 = x26
                END IF
                IF (0. .LT. y39) THEN
                  max41d = y39d
                  max41 = y39
                ELSE
                  max41 = 0.
                  max41d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max41+roff*max41d)
                slq = roff*(SIGN(1., delq)*max41)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm3d = qmd
                qm3 = qm
                qp3d = qpd
                qp3 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v4
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y40 = 1.
                  y40d = 0.0
                ELSE
                  y40d = tmin_1*ropd(l+v5)
                  y40 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y40) THEN
                  max42d = y40d
                  max42 = y40
                ELSE
                  max42 = 0.
                  max42d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max42d
                roff = .5*max42
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x27d = delmd
                  x27 = delm
                ELSE
                  x27d = -delmd
                  x27 = -delm
                END IF
                y72d = SIGN(1., delm)*delpd
                y72 = SIGN(1., delm)*delp
                IF (x27 .GT. y72) THEN
                  y41d = y72d
                  y41 = y72
                ELSE
                  y41d = x27d
                  y41 = x27
                END IF
                IF (0. .LT. y41) THEN
                  max43d = y41d
                  max43 = y41
                ELSE
                  max43 = 0.
                  max43d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max43+roff*max43d)
                slp = roff*(SIGN(1., delm)*max43)
                IF (delq .GE. 0.) THEN
                  x28d = delqd
                  x28 = delq
                ELSE
                  x28d = -delqd
                  x28 = -delq
                END IF
                y73d = SIGN(1., delq)*delmd
                y73 = SIGN(1., delq)*delm
                IF (x28 .GT. y73) THEN
                  y42d = y73d
                  y42 = y73
                ELSE
                  y42d = x28d
                  y42 = x28
                END IF
                IF (0. .LT. y42) THEN
                  max44d = y42d
                  max44 = y42
                ELSE
                  max44 = 0.
                  max44d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max44+roff*max44d)
                slq = roff*(SIGN(1., delq)*max44)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm4d = qmd
                qm4 = qm
                qp4d = qpd
                qp4 = qp
C
CPentes annulees pour toute temperature inferieure a la temperature Tmin
                vslp = v5
                IF (rop(l+v5)*tmin_1 - .5 .GT. 1.) THEN
                  y43 = 1.
                  y43d = 0.0
                ELSE
                  y43d = tmin_1*ropd(l+v5)
                  y43 = rop(l+v5)*tmin_1 - .5
                END IF
                IF (0. .LT. y43) THEN
                  max45d = y43d
                  max45 = y43
                ELSE
                  max45 = 0.
                  max45d = 0.0
                END IF
C qm: right state,  qp: left state
                roffd = .5*max45d
                roff = .5*max45
C
Ci+1 - i 
                delmd = ropd(l+vslp) - ropd(nm+vslp)
                delm = rop(l+vslp) - rop(nm+vslp)
Ci+2 - i+1
                delpd = ropd(np+vslp) - ropd(l+vslp)
                delp = rop(np+vslp) - rop(l+vslp)
Ci   - i-1
                delqd = ropd(nm+vslp) - ropd(nm2+vslp)
                delq = rop(nm+vslp) - rop(nm2+vslp)
                IF (delm .GE. 0.) THEN
                  x29d = delmd
                  x29 = delm
                ELSE
                  x29d = -delmd
                  x29 = -delm
                END IF
                y74d = SIGN(1., delm)*delpd
                y74 = SIGN(1., delm)*delp
                IF (x29 .GT. y74) THEN
                  y44d = y74d
                  y44 = y74
                ELSE
                  y44d = x29d
                  y44 = x29
                END IF
                IF (0. .LT. y44) THEN
                  max46d = y44d
                  max46 = y44
                ELSE
                  max46 = 0.
                  max46d = 0.0
                END IF
C
C
                slpd = SIGN(1., delm)*(roffd*max46+roff*max46d)
                slp = roff*(SIGN(1., delm)*max46)
                IF (delq .GE. 0.) THEN
                  x30d = delqd
                  x30 = delq
                ELSE
                  x30d = -delqd
                  x30 = -delq
                END IF
                y75d = SIGN(1., delq)*delmd
                y75 = SIGN(1., delq)*delm
                IF (x30 .GT. y75) THEN
                  y45d = y75d
                  y45 = y75
                ELSE
                  y45d = x30d
                  y45 = x30
                END IF
                IF (0. .LT. y45) THEN
                  max47d = y45d
                  max47 = y45
                ELSE
                  max47 = 0.
                  max47d = 0.0
                END IF
Cright state
                slqd = SIGN(1., delq)*(roffd*max47+roff*max47d)
                slq = roff*(SIGN(1., delq)*max47)
C
Cleft state
                qmd = ropd(l+vslp) - slpd
                qm = rop(l+vslp) - slp
C
                qpd = ropd(nm+vslp) + slqd
                qp = rop(nm+vslp) + slq
                qm5d = qmd
                qm5 = qm
                qp5d = qpd
                qp5 = qp
C
Cdetermination etat gauche (rou1) et droit (rou2): ro, roui, roe+p
                r1d = qp1d
                r1 = qp1
                p1d = rgp*(r1d*qp5+r1*qp5d)
                p1 = r1*qp5*rgp
Cdetermination etat droite: ro, roui, roe+p
                h1d = gam1*rgp*qp5d + .5*(qp2d*qp2+qp2*qp2d+qp3d*qp3+qp3
     +            *qp3d+qp4d*qp4+qp4*qp4d)
                h1 = gam1*qp5*rgp + .5*(qp2*qp2+qp3*qp3+qp4*qp4)
C
                r2d = qm1d
                r2 = qm1
                p2d = rgp*(r2d*qm5+r2*qm5d)
                p2 = r2*qm5*rgp
                h2d = gam1*rgp*qm5d + .5*(qm2d*qm2+qm2*qm2d+qm3d*qm3+qm3
     +            *qm3d+qm4d*qm4+qm4*qm4d)
                h2 = gam1*qm5*rgp + .5*(qm2*qm2+qm3*qm3+qm4*qm4)
C
Cdetermination etat moyenne roe
                IF (r1 .EQ. 0.0) THEN
                  qp1d = 0.D0
                ELSE
                  qp1d = r1d/(2.0*SQRT(r1))
                END IF
                qp1 = SQRT(r1)
                IF (r2 .EQ. 0.0) THEN
                  qm1d = 0.D0
                ELSE
                  qm1d = r2d/(2.0*SQRT(r2))
                END IF
                qm1 = SQRT(r2)
                rd = qp1d*qm1 + qp1*qm1d
                r = qp1*qm1
                r_1d = -((qp1d+qm1d)/(qp1+qm1)**2)
                r_1 = 1./(qp1+qm1)
                ud = (qp1d*qp2+qp1*qp2d+qm1d*qm2+qm1*qm2d)*r_1 + (qp1*
     +            qp2+qm1*qm2)*r_1d
                u = (qp1*qp2+qm1*qm2)*r_1
                vd = (qp1d*qp3+qp1*qp3d+qm1d*qm3+qm1*qm3d)*r_1 + (qp1*
     +            qp3+qm1*qm3)*r_1d
                v = (qp1*qp3+qm1*qm3)*r_1
                wd = (qp1d*qp4+qp1*qp4d+qm1d*qm4+qm1*qm4d)*r_1 + (qp1*
     +            qp4+qm1*qm4)*r_1d
                w = (qp1*qp4+qm1*qm4)*r_1
                hd = (qp1d*h1+qp1*h1d+qm1d*h2+qm1*h2d)*r_1 + (qp1*h1+qm1
     +            *h2)*r_1d
                h = (qp1*h1+qm1*h2)*r_1
                qd = .5*(ud*u+u*ud+vd*v+v*vd+wd*w+w*wd)
                q = .5*(u*u+v*v+w*w)
                IF (h - q .GE. 0.) THEN
                  abs16d = hd - qd
                  abs16 = h - q
                ELSE
                  abs16d = -(hd-qd)
                  abs16 = -(h-q)
                END IF
                IF ((gam-1.)*abs16 .EQ. 0.0) THEN
                  cd = 0.D0
                ELSE
                  cd = (gam-1.)*abs16d/(2.0*SQRT((gam-1.)*abs16))
                END IF
                c = SQRT((gam-1.)*abs16)
C
Cdetermination vitesse normale interface
                qn1d = tcx*qp2d + tcy*qp3d + tcz*qp4d
                qn1 = qp2*tcx + qp3*tcy + qp4*tcz
                qn2d = tcx*qm2d + tcy*qm3d + tcz*qm4d
                qn2 = qm2*tcx + qm3*tcy + qm4*tcz
C
                dud = sk*(qm2d-qp2d)
                du = (qm2-qp2)*sk
                dvd = sk*(qm3d-qp3d)
                dv = (qm3-qp3)*sk
                dwd = sk*(qm4d-qp4d)
                dw = (qm4-qp4)*sk
                dpd = p2d - p1d
                dp = p2 - p1
CSdqn
                dqnd = qn2d - qn1d
                dqn = qn2 - qn1
                IF (sk .LT. 1.e-30) THEN
                  max48 = 1.e-30
                ELSE
                  max48 = sk
                END IF
C
C.....Evaluation des valeurs propres
                s_1 = 1./max48
                nx = tcx*s_1
                ny = tcy*s_1
                nz = tcz*s_1
C
                qnd = nx*ud + ny*vd + nz*wd
                qn = u*nx + v*ny + w*nz
C
                f1d = qnd
                f1 = qn
                IF (f1 .GE. 0.) THEN
                  abs17d = f1d
                  abs17 = f1
                ELSE
                  abs17d = -f1d
                  abs17 = -f1
                END IF
Cdelta
                f4d = psiroe*(abs17d+cd)
                f4 = psiroe*(abs17+c)
                IF (f1 .GE. 0.) THEN
                  abs18 = f1
                ELSE
                  abs18 = -f1
                END IF
C
                f2 = .5 + SIGN(.5, abs18 - f4)
                IF (f1 .GE. 0.) THEN
                  abs19d = f1d
                  abs19 = f1
                ELSE
                  abs19d = -f1d
                  abs19 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs19d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs19
C  a123
                f1d = sk*(r2d-r1d-(dpd*c**2-dp*(cd*c+c*cd))/(c*c)**2)
                f1 = (r2-r1-dp/(c*c))*sk
                flu1d = f3d*f1 + f3*f1d
                flu1 = f3*f1
                flu2d = f3d*(f1*u+r*(du-nx*dqn)) + f3*(f1d*u+f1*ud+rd*(
     +            du-nx*dqn)+r*(dud-nx*dqnd))
                flu2 = f3*(f1*u+r*(du-nx*dqn))
                flu3d = f3d*(f1*v+r*(dv-ny*dqn)) + f3*(f1d*v+f1*vd+rd*(
     +            dv-ny*dqn)+r*(dvd-ny*dqnd))
                flu3 = f3*(f1*v+r*(dv-ny*dqn))
                flu4d = f3d*(f1*w+r*(dw-nz*dqn)) + f3*(f1d*w+f1*wd+rd*(
     +            dw-nz*dqn)+r*(dwd-nz*dqnd))
                flu4 = f3*(f1*w+r*(dw-nz*dqn))
                flu5d = f3d*(f1*q+r*(u*du+v*dv+w*dw-qn*dqn)) + f3*(f1d*q
     +            +f1*qd+rd*(u*du+v*dv+w*dw-qn*dqn)+r*(ud*du+u*dud+vd*dv
     +            +v*dvd+wd*dw+w*dwd-qnd*dqn-qn*dqnd))
                flu5 = f3*(f1*q+r*(u*du+v*dv+w*dw-qn*dqn))
C
                f1d = qnd + cd
                f1 = qn + c
                IF (f1 .GE. 0.) THEN
                  abs20 = f1
                ELSE
                  abs20 = -f1
                END IF
                f2 = .5 + SIGN(.5, abs20 - f4)
                IF (f1 .GE. 0.) THEN
                  abs21d = f1d
                  abs21 = f1
                ELSE
                  abs21d = -f1d
                  abs21 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs21d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs21
Clambda4*S*a4
                f1d = sk*(((dpd+s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-
     +            (dp+r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp+r
     +            *c*dqn*s_1)*f3d/(2.*c**2))
                f1 = (dp+r*c*dqn*s_1)/(2.*c*c)*sk*f3
C
                flu1d = flu1d + f1d
                flu1 = flu1 + f1
                flu2d = flu2d + f1d*(u+nx*c) + f1*(ud+nx*cd)
                flu2 = flu2 + f1*(u+nx*c)
                flu3d = flu3d + f1d*(v+ny*c) + f1*(vd+ny*cd)
                flu3 = flu3 + f1*(v+ny*c)
                flu4d = flu4d + f1d*(w+nz*c) + f1*(wd+nz*cd)
                flu4 = flu4 + f1*(w+nz*c)
                flu5d = flu5d + f1d*(h+qn*c) + f1*(hd+qnd*c+qn*cd)
                flu5 = flu5 + f1*(h+qn*c)
C
                f1d = qnd - cd
                f1 = qn - c
                IF (f1 .GE. 0.) THEN
                  abs22 = f1
                ELSE
                  abs22 = -f1
                END IF
                f2 = .5 + SIGN(.5, abs22 - f4)
                IF (f1 .GE. 0.) THEN
                  abs23d = f1d
                  abs23 = f1
                ELSE
                  abs23d = -f1d
                  abs23 = -f1
                END IF
                f3d = (f2-1.)*0.5*(((f1d*f1+f1*f1d)*f4-f1**2*f4d)/f4**2+
     +            f4d) - f2*abs23d
                f3 = (f2-1.)*(f1*f1/f4+f4)*0.5 - f2*abs23
C
Clambda5*S*a5
                f1d = sk*(((dpd-s_1*((rd*c+r*cd)*dqn+r*c*dqnd))*2.*c**2-
     +            (dp-r*c*dqn*s_1)*2.*(cd*c+c*cd))*f3/(2.**2*c**4)+(dp-r
     +            *c*dqn*s_1)*f3d/(2.*c**2))
                f1 = (dp-r*c*dqn*s_1)/(2.*c*c)*f3*sk
                flu1d = flu1d + f1d
                flu1 = flu1 + f1
                flu2d = flu2d + f1d*(u-nx*c) + f1*(ud-nx*cd)
                flu2 = flu2 + f1*(u-nx*c)
                flu3d = flu3d + f1d*(v-ny*c) + f1*(vd-ny*cd)
                flu3 = flu3 + f1*(v-ny*c)
                flu4d = flu4d + f1d*(w-nz*c) + f1*(wd-nz*cd)
                flu4 = flu4 + f1*(w-nz*c)
                flu5d = flu5d + f1d*(h-qn*c) + f1*(hd-qnd*c-qn*cd)
                flu5 = flu5 + f1*(h-qn*c)
C
                rou1d = r1d*qn1 + r1*qn1d
                rou1 = r1*qn1
                rou2d = r2d*qn2 + r2*qn2d
                rou2 = r2*qn2
                p1p2d = p1d + p2d
                p1p2 = p1 + p2
                flu1d = 0.5*(flu1d+rou1d+rou2d)
                flu1 = (flu1+rou1+rou2)*0.5
                flu2d = 0.5*(flu2d+rou1d*qp2+rou1*qp2d+rou2d*qm2+rou2*
     +            qm2d+tcx*p1p2d)
                flu2 = (flu2+rou1*qp2+rou2*qm2+tcx*p1p2)*0.5
                flu3d = 0.5*(flu3d+rou1d*qp3+rou1*qp3d+rou2d*qm3+rou2*
     +            qm3d+tcy*p1p2d)
                flu3 = (flu3+rou1*qp3+rou2*qm3+tcy*p1p2)*0.5
                flu4d = 0.5*(flu4d+rou1d*qp4+rou1*qp4d+rou2d*qm4+rou2*
     +            qm4d+tcz*p1p2d)
                flu4 = (flu4+rou1*qp4+rou2*qm4+tcz*p1p2)*0.5
                flu5d = 0.5*(flu5d+rou1d*h1+rou1*h1d+rou2d*h2+rou2*h2d)
                flu5 = (flu5+rou1*h1+rou2*h2)*0.5
                drodmd(l0+v1) = drodmd(l0+v1) + sens*flu1d
                drodmd(l0+v2) = drodmd(l0+v2) + sens*flu2d
                drodmd(l0+v3) = drodmd(l0+v3) + sens*flu3d
                drodmd(l0+v4) = drodmd(l0+v4) + sens*flu4d
                drodmd(l0+v5) = drodmd(l0+v5) + sens*flu5d
              ENDDO
            ENDDO
          ENDDO
        END IF
      END IF
      END
C

