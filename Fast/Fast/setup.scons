import os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# Fast requires:
# ELSAPROD variable defined in environment
# C++ compiler
# Fortran compiler: defined in config.py
# Numpy
# KCore library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

# Test if xcore exists =======================================================
(xcoreVersion, xcoreIncDir, xcoreLibDir) = Dist.checkXCore()

# Test if connector exists ==================================================
(connectorVersion, connectorIncDir, connectorLibDir) = Dist.checkConnector()

# Test if fastc exists =====================================================
(fastcVersion, fastcIncDir, fastcLibDir) = Dist.checkFastC()

# Test if fasts exists =====================================================
(fastsVersion, fastsIncDir, fastsLibDir) = Dist.checkFastS()

# Test if fastp exists =====================================================
#(fastpVersion, fastpIncDir, fastpLibDir) = Dist.checkFastP()

# Test if fastlbm exists =====================================================
#(fastlbmVersion, fastlbmIncDir, fastlbmLibDir) = Dist.checkFastLBM()
#(fastaslbmVersion, fastaslbmIncDir, fastaslbmLibDir) = Dist.checkFastASLBM()

# Test if libmpi exists ======================================================
(mpi, mpiIncDir, mpiLibDir, mpiLibs) = Dist.checkMpi(additionalLibPaths, additionalIncludePaths)

from KCore.config import *

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir, xcoreLibDir, connectorLibDir, fastcLibDir, fastsLibDir]
includeDirs = [numpyIncDir, kcoreIncDir, xcoreIncDir, connectorIncDir, pythonIncDir, fastcIncDir, fastsIncDir]
libraries = ["fastc", "fasts", "connector", "xcore", "kcore"]
#libraryDirs += [fastaslbmLibDir]
#includeDirs += [fastaslbmIncDir]
#libraries += ["fastaslbm"]

(ok, libs, paths) = Dist.checkFortranLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs
(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

if mpi:
    libraryDirs.append(mpiLibDir)
    includeDirs.append(mpiIncDir)
    ADDITIONALCPPFLAGS = ['-D_MPI']
else:	       
    ADDITIONALCPPFLAGS = []

if mpi: libraries += mpiLibs

# Builder fortran
#==============================================================================
# Essai emitter
def addSourceScannerToTargets(target, source, env):
   #import SCons.Scanner
   #scanner = SCons.Scanner.C.CScanner()
   #scanner.skeys = ['.for', '.h']
   #for q in zip(source, target):
   #   f = q[0] 
   #   includes = scanner(f, env, scanner.path_function(env))
   #   print f,'=='
   #   for i in includes:
   #      print "  + %s" % (str(i))
   #      Depends(q[1], str(i))
   return (target, source)

PP = Dist.getPP() # preprocessing des fortrans
f77CppArgs = '-D_NOOPENMP4 -DE_SCALAR_COMPUTER -DE_OMP_SOUS_DOMAIN'+" -I'"+fastcIncDir+"'"
#f77CppArgs = '-D_OPENMP4 -DE_SCALAR_COMPUTER -DE_OMP_SOUS_DOMAIN'+" -I'"+fastcIncDir+"'"
cacheLine = Dist.getCacheLine()
if cacheLine == 1: f77CppArgs += ' -DCACHELINE=16'
else: f77CppArgs += ' -DCACHELINE=%d'%cacheLine
nbsocket = Dist.getNbSocket()
if nbsocket == 1: f77CppArgs += ' -DNB_SOCKET=1'
else: f77CppArgs += ' -DNB_SOCKET=%d'%nbsocket

corePerSock = Dist.getCorePerSocket()
if  corePerSock== 1: f77CppArgs += ' -DCORE_PER_SOCK=1'
else: f77CppArgs += ' -DCORE_PER_SOCK=%d'%corePerSock

action = PP+'\"'+kcoreIncDir+'\" -I. '+f77CppArgs+' $SOURCES $TARGETS'
bld = Builder(action=action, suffix='.f', src_suffix='.for')
#emitter=addSourceScannerToTargets)

# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None
AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CFLAGS=[], CXXFLAGS=[],
                  BUILDERS={'FPROC': bld}, FORTRAN=f77compiler,
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons())
env.Replace(CPPPATH=[".","Fast"]+additionalIncludePaths+includeDirs)

ELSAPROD = os.environ.get('ELSAPROD', 'x86_r8')
env.SConsignFile('build/'+ELSAPROD+'/.sconsign.dblite')

env = Dist.createFortranScanner(env)

# Pre processing du C
cppArgs = Dist.getCppArgs()+['-g']+["-DE_SCALAR_COMPUTER -DE_OMP_SOUS_DOMAIN"]
if Dist.getCacheLine() == 1: cppArgs += ['-DCACHELINE=16']
env.Replace(CPPFLAGS=cppArgs+ADDITIONALCPPFLAGS)

### voir installBase de KCore pour option de compil par defaut
if f90compiler == 'ifort':
   FFLAGS = Dist.getForArgs()
   env.Replace(FORTRANFLAGS=FFLAGS)
else:
   env.Replace(FORTRANFLAGS=Dist.getForArgs())

if f77compiler == 'ifort':
   version = Dist.getForVersion() # A utiliser version=(13,4)
   floatType = '-r8' if Dist.EDOUBLEINT else '-r8 -i4'
   f77Args = floatType+' -g -fno-alias -fno-fnalias -ip'
   cacheLine = Dist.getCacheLine()

   simd = Dist.getSimd()
   if cacheLine != 1: f77Args += ' -align array%dbyte '%cacheLine

   if version[0] >= 17:
      env.Replace(FORTRANCOM = '$FORTRAN $FORTRANFLAGS '+f77Args+' -qopt-report5 -qopt-report-phase=loop,vec,cg -qopt-report-embed -unroll0 -c -o $TARGET $SOURCE')
   else:
      env.Replace(FORTRANCOM = '$FORTRAN $FORTRANFLAGS '+f77Args+' -unroll0 -c -o $TARGET $SOURCE')

env.Replace(FORTRANSUFFIXES=['.f', '.F', '.f90', '.F90'])
fortran_builder = Builder(action='$FORTRANCOM',
                          suffix='.o', src_suffix='.f')


env.Append(BUILDERS={'Fortran' : fortran_builder})

# Scan fortran files and store dependencies
parentFolder = os.path.dirname(os.path.dirname(os.getcwd()))
deps = Dist.findImmediateDeps(parentFolder=parentFolder, searchFolder="Fast",
                              depPattern=r'^#include\s*["\'](.+?)["\']',
                              fileExtensions=['.f', '.f90', '.for'])
ppf = Dist.createFortranFiles(env, srcs, deps=deps)
ppf = srcs.cpp_srcs + ppf

# Split list of pre-processed object files
ppf = Dist.chunkObjectFiles(ppf, chunkSize=100)

# Create a static library and copy built files to the install folder
staticLib = Dist.createStaticLibrary(env, ppf, parentFolder=parentFolder,
                                     moduleName="Fast")
Dist.copyBuiltFiles(env, staticLib, moduleName="Fast", installPath=installPath)
